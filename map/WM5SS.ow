變數
{
	全域:
		0: EditorVersion
		1: ShareCode
		2: Version
		3: Author
		4: MaxZones
		5: MaxHeroes
		6: HeroRoster
		7: LavaLocations
		8: LavaRadius
		9: CheckpointLocations
		10: ZoneLocations
		11: ZoneText
		12: PortalLocations
		13: PortalDestinations
		14: PortalUnlockDefaults
		15: PortalText
		16: HeroLocations
		17: UnlockLocations
		18: SpeedrunLocation
		19: BouncepadLocations
		20: BouncepadStrength
		21: EffectColors
		22: EffectBehaviors
		23: PlayerBehaviors
		24: SpawnFaceDirection
		25: MaxObjectIndex
		26: LoadingObjectIndex
		27: LoadingElementIndex
		28: InWorldText
		29: MatchTime
		30: AntiCrash
		42: AbilityUnlockData
		69: EasterEggLocations
		70: EasterEggHeroes
		71: EasterEggColors
		72: EasterEggMaxCount
		73: ForLoop

	玩家:
		0: Victory
		1: TutorialMode
		2: ZonesReached
		3: HeroesUnlocked
		4: ZoneCount
		5: HeroCount
		6: FoundSecretHero
		7: Respawn
		8: AlternativeRespawn
		9: SpeedRunMode
		10: Timer
		11: Deaths
		12: MyHUD
		13: CanDie
		14: LoopCounter
		15: PortalUnlocked
		42: EnabledAbilities
		69: EasterEggsFound
		70: EasterEggCount
}

subroutines
{
	0: ResetProgress
	1: UpdateCount
	42: UpdateUnlockedAbilities
}

規則("---------- INITIALIZATION ----------")
{
	事件
	{
		Ongoing - Global;
	}
}

規則("Global")
{
	事件
	{
		Ongoing - Global;
	}

	動作
	{
		Disable Inspector Recording;
		Global.MatchTime = 60 * 180;
		Disable Built-In Game Mode Scoring;
		Disable Built-In Game Mode Completion;
		"Center HUD"
		Create HUD Text(All Players(All Teams), Null, Null, Custom String("||        discord.me/lavaparkour        ||"), Top, -2, Color(
			White), Color(White), Color(Orange), Visible To and String, Default Visibility);
		Create HUD Text(Filtered Array(All Players(All Teams),
			Current Array Element.Victory == True && Current Array Element.SpeedRunMode == False), String("已完成"), Null, Null, Top, 1,
			Color(Purple), Color(Purple), Color(Purple), Visible To and String, Default Visibility);
		Create HUD Text(Filtered Array(All Players(All Teams), Current Array Element.TutorialMode == False), Null, Null, Custom String(
			"Hold [{0}] To Start Tutorial Mode", Input Binding String(Button(Reload))), Top, 2, Color(White), Color(White), Color(Yellow),
			Visible To and String, Default Visibility);
		Create HUD Text(Filtered Array(All Players(All Teams), Current Array Element.TutorialMode == True), Custom String("TUTORIAL MODE"),
			Null, Null, Top, 2, Color(Yellow), Color(Yellow), Color(Yellow), Visible To and String, Default Visibility);
		Create HUD Text(Filtered Array(All Players(All Teams), Current Array Element.TutorialMode == True), Null, Null, Custom String(
			"Press [{0}] to use portals/hero swaps\r\n       Hold [{1}] to place checkpoint\r\n                   Hold [{2}] for a tip",
			Input Binding String(Button(Interact)), Input Binding String(Button(Reload)), Input Binding String(Button(Melee))), Top, 3,
			Color(Yellow), Color(Yellow), Color(Yellow), Visible To and String, Default Visibility);
		Create HUD Text(Filtered Array(All Players(All Teams), Current Array Element.TutorialMode == False), Null, Null, Custom String(
			"Press [{0}] To Respawn\r\n     Press [{1}] To Use", Input Binding String(Button(Ultimate)), Input Binding String(Button(
			Interact))), Top, 3, Color(White), Color(White), Color(White), Visible To and String, Default Visibility);
		Wait(1, Ignore Condition);
		"Left-Side HUD"
		Create HUD Text(Filtered Array(All Players(All Teams), Current Array Element.TutorialMode == False), Null, Custom String(
			"Hold [{0}] to restart", Input Binding String(Button(Ultimate))), Null, Left, 0, Color(White), Color(Purple), Color(White),
			Visible To and String, Default Visibility);
		Create HUD Text(Filtered Array(All Players(All Teams), Current Array Element.TutorialMode == True), Null, Custom String(
			"Hold [{0}] to exit tutorial mode (resets progress)", Input Binding String(Button(Ultimate))), Null, Left, 0, Color(Yellow),
			Color(Yellow), Color(Yellow), Visible To and String, Default Visibility);
		Create HUD Text(All Players(All Teams), Custom String("PROGRESS:"), Null, Null, Left, 1, Color(Purple), Color(White), Color(White),
			Visible To and String, Default Visibility);
		Wait(1, Ignore Condition);
		"Right-Side HUD"
		Create HUD Text(All Players(All Teams), Custom String("Share Code: {0} ", Global.ShareCode), Null, Null, Right, -3, Color(White),
			Color(White), Color(White), Visible To and String, Default Visibility);
		Create HUD Text(All Players(All Teams), Null, Null, Custom String("Created By: {0}", Global.Author), Right, -2, Color(White),
			Color(White), Color(White), Visible To and String, Default Visibility);
		Create HUD Text(All Players(All Teams), Null, Null, Custom String("version {0}", Global.Version), Right, -1, Color(White), Color(
			White), Color(White), Visible To and String, Default Visibility);
		"Player Progress"
		Create HUD Text(All Players(All Teams), Null, Null, Custom String("Zones Reached\r\n{0}\r\nHeroes Unlocked\r\n{1}", Custom String(
			"{0} / {1}", Local Player.ZoneCount, Global.MaxZones), Custom String("{0} / {1}", Local Player.HeroCount, Global.MaxHeroes)),
			Left, 2, Color(Aqua), Color(Aqua), Color(Blue), Visible To and String, Default Visibility);
	}
}

規則("Player")
{
	事件
	{
		Ongoing - Each Player;
		All;
		All;
	}

	動作
	{
		Event Player.CanDie = False;
		Start Forcing Player To Be Hero(Event Player, Global.HeroRoster[0]);
		While(Has Spawned(Event Player) == False);
			Wait(0.025, Ignore Condition);
		End;
		Disable Game Mode In-World UI(Event Player);
		Disable Game Mode HUD(Event Player);
		If(Global.PlayerBehaviors[0] == 1);
			Disable Movement Collision With Players(Event Player);
		Else If(Global.PlayerBehaviors[0] == 2);
			Set Status(Event Player, Null, Phased Out, 9999);
		End;
		Set Status(Event Player, Null, Invincible, 9999);
		Event Player.SpeedRunMode = False;
		Set Damage Dealt(Event Player, 0);
		Call Subroutine(ResetProgress);
		Wait(0.300, Ignore Condition);
		Set Objective Description(Event Player, Custom String("Find All Zones and Heroes"), String);
		Event Player.CanDie = True;
		Wait(2, Ignore Condition);
		Set Facing(Event Player, Global.SpawnFaceDirection, To World);
	}
}

規則("----- DATA -----")
{
	事件
	{
		Ongoing - Global;
	}
}

規則("Release Information")
{
	事件
	{
		Ongoing - Global;
	}

	動作
	{
		Global.EditorVersion = Custom String("Classic 1.2");
		Global.ShareCode = Custom String("WM5SS");
		Global.Version = Custom String("1.0.1");
		Global.Author = Custom String("Lyoko6600");
	}
}

規則("Goal Counts")
{
	事件
	{
		Ongoing - Global;
	}

	動作
	{
		Global.MaxZones = 4;
		Global.MaxHeroes = 4;
	}
}

規則("Hero Roster")
{
	事件
	{
		Ongoing - Global;
	}

	動作
	{
		"Spawning Hero - Yellow"
		Global.HeroRoster[0] = Hero(碧姬);
		"Unlockable Hero 1 - Green"
		Global.HeroRoster[1] = Hero(巴帝斯特);
		"Unlockable Hero 2 - Blue"
		Global.HeroRoster[2] = Hero(禪亞塔);
		"Unlockable Hero 3 - Purple"
		Global.HeroRoster[3] = Hero(路西歐);
		"Unlockable Hero 4 - Red"
		Global.HeroRoster[4] = Hero(安娜);
		"Secret Hero - White"
		Global.HeroRoster[5] = Hero(莫伊拉);
		"Secret Hero - White"
		Global.HeroRoster[6] = Hero(慈悲);
	}
}

規則("Lava Locations")
{
	事件
	{
		Ongoing - Global;
	}

	動作
	{
		Global.LavaLocations[0] = Vector(343.135, -26.518, 51.545);
		Global.LavaLocations[1] = Vector(336.706, -24.381, 48.744);
		Global.LavaLocations[2] = Vector(325.334, -82.055, 44.923);
		Global.LavaLocations[3] = Vector(317.227, -44.363, 41.713);
		Global.LavaLocations[4] = Vector(328.922, -79.081, 19.752);
		Global.LavaLocations[5] = Vector(322.700, -22.341, 15.124);
		Global.LavaLocations[6] = Vector(352.209, -54.314, -1.971);
		Global.LavaLocations[7] = Vector(328.769, -55.128, -16.249);
		Global.LavaLocations[8] = Vector(314.170, -43.059, -25.936);
		Global.LavaLocations[9] = Vector(332.953, -16.905, 9.322);
		Global.LavaLocations[10] = Vector(335.921, -16.261, 5.262);
		Global.LavaLocations[11] = Vector(328.169, -19.010, -8.501);
		Global.LavaLocations[12] = Vector(325.023, -15.757, -37.646);
		Global.LavaLocations[13] = Vector(314.514, -12.057, -34.217);
		Global.LavaLocations[14] = Vector(328.479, -41.541, -87.988);
		Global.LavaLocations[15] = Vector(322.284, -54.272, -0.996);
		Global.LavaLocations[16] = Vector(357.549, -67.440, -51.332);
		Global.LavaLocations[17] = Vector(353.940, -48.041, -30.600);
		Global.LavaLocations[18] = Vector(349.096, -18.957, -30.532);
		Global.LavaLocations[19] = Vector(347.933, -24.909, -33.134);
		Global.LavaLocations[20] = Vector(337.228, -99.417, -47.874);
		Global.LavaLocations[21] = Vector(363.986, -15.177, -53.994);
		Global.LavaLocations[22] = Vector(360.138, -47.044, -43.505);
		Global.LavaLocations[23] = Vector(362.441, -29.170, -66.091);
		Global.LavaLocations[24] = Vector(360.105, -25.891, -61.538);
		Global.LavaLocations[25] = Vector(335.665, -28.100, -67.215);
		Global.LavaLocations[26] = Vector(318.326, -18.634, -58.800);
		Global.LavaLocations[27] = Vector(321.091, -18.961, -71.759);
		Global.LavaLocations[28] = Vector(324.213, -26.026, -82.573);
		Global.LavaLocations[29] = Vector(301.468, -110.802, -74.494);
		Global.LavaLocations[30] = Vector(315.271, -25.424, -91.141);
		Global.LavaLocations[31] = Vector(287.412, -110.999, -86.660);
		Global.LavaLocations[32] = Vector(306.651, -100.160, -46.236);
		Global.LavaLocations[33] = Vector(274.670, -20.051, -91.236);
		Global.LavaLocations[34] = Vector(-294.409, -41.630, 17.600);
		Global.LavaLocations[35] = Vector(-286.397, -99.973, 38.534);
		Global.LavaLocations[36] = Vector(-269.138, 1.725, 6.574);
		Global.LavaLocations[37] = Vector(-272.433, 1.136, 15.954);
		Global.LavaLocations[38] = Vector(-252.740, -100.014, 42.313);
		Global.LavaLocations[39] = Vector(-239.310, -55.146, 19.329);
		Global.LavaLocations[40] = Vector(-258.411, -2.629, 39.340);
		Global.LavaLocations[41] = Vector(-229.833, -43.938, 19.693);
		Global.LavaLocations[42] = Vector(-213.363, -45.283, 10.297);
		Global.LavaLocations[43] = Vector(333.785, -34.741, -1.584);
		Global.LavaLocations[44] = Vector(327.854, -20.739, 5.139);
		Global.LavaLocations[45] = Vector(313.801, -43.375, -62.081);
		Global.LavaLocations[46] = Vector(-231.098, -4.918, -6.726);
		Global.LavaLocations[47] = Vector(-214.159, 3.437, 10.516);
		Global.LavaLocations[48] = Vector(-208.419, -154.682, -16.617);
		Global.LavaLocations[49] = Vector(-192.583, 3.913, -1.501);
		Global.LavaLocations[50] = Vector(-198.628, 8.450, -39.085);
		Global.LavaLocations[51] = Vector(-165.899, -87.884, -66.433);
		Global.LavaLocations[52] = Vector(-158.713, 1.261, -56.818);
		Global.LavaLocations[53] = Vector(-145.897, -21.593, -69.007);
		Global.LavaLocations[54] = Vector(-39.078, -73.232, -156.453);
		Global.LavaLocations[55] = Vector(-219.905, 14.187, -27.933);
		Global.LavaLocations[56] = Vector(-242.318, 7.655, 11.144);
		Global.LavaLocations[57] = Vector(-237.092, -9.548, 26.278);
		Global.LavaLocations[58] = Vector(-201.320, 8.906, -9.286);
		Global.LavaLocations[59] = Vector(-156.311, 2.843, -27.572);
		Global.LavaLocations[60] = Vector(-179.418, 6.424, -37.898);
		Global.LavaLocations[61] = Vector(28.596, 69.567, -157.520);
		Global.LavaLocations[62] = Vector(28.516, 6.429, -177.610);
		Global.LavaLocations[63] = Vector(2.067, -20.133, -164.146);
		Global.LavaLocations[64] = Vector(-1.574, 49.067, -170.610);
		Global.LavaLocations[65] = Vector(-13.985, 58.367, -183.348);
		Global.LavaLocations[66] = Vector(-7.921, -33.489, -146.127);
		Global.LavaLocations[67] = Vector(15.509, 62.388, -145.670);
		Global.LavaLocations[68] = Vector(6.664, 52.805, -140.516);
		Global.LavaLocations[69] = Vector(28.576, 66.787, -167.722);
		Global.LavaLocations[70] = Vector(12.617, 64.740, -152.468);
		Global.LavaLocations[71] = Vector(60.773, -45.433, -157.176);
		Global.LavaLocations[72] = Vector(65.911, 64.470, -174.865);
		Global.LavaLocations[73] = Vector(80.787, 66.314, -139.601);
		Global.LavaLocations[74] = Vector(90.151, 63.046, -156.965);
		Global.LavaLocations[75] = Vector(83.485, 57.154, -179.773);
		Global.LavaLocations[76] = Vector(105.018, 66.429, -177.645);
		Global.LavaLocations[77] = Vector(92.544, 16.467, -179.967);
		Global.LavaLocations[78] = Vector(108.367, 25.520, -158.057);
		Global.LavaLocations[79] = Vector(101.705, 70.371, -128.752);
		Global.LavaLocations[80] = Vector(113.273, 51.358, -155.271);
		Global.LavaLocations[81] = Vector(-179.740, -31.427, -86.223);
		Global.LavaLocations[82] = Vector(-171.454, -0.500, -78.556);
		Global.LavaLocations[83] = Vector(-157.020, -83.988, -95.344);
		Global.LavaLocations[84] = Vector(-151.079, -93.988, -92.811);
		Global.LavaLocations[85] = Vector(0, 0, 0);
		Global.LavaLocations[86] = Vector(0, 0, 0);
		Global.LavaLocations[87] = Vector(0, 0, 0);
		Global.LavaLocations[88] = Vector(0, 0, 0);
		Global.LavaLocations[89] = Vector(0, 0, 0);
		Global.LavaLocations[90] = Vector(0, 0, 0);
		Global.LavaLocations[91] = Vector(0, 0, 0);
		Global.LavaLocations[92] = Vector(0, 0, 0);
		Global.LavaLocations[93] = Vector(0, 0, 0);
		Global.LavaLocations[94] = Vector(0, 0, 0);
		Global.LavaLocations[95] = Vector(0, 0, 0);
		Global.LavaLocations[96] = Vector(0, 0, 0);
		Global.LavaLocations[97] = Vector(0, 0, 0);
		Global.LavaLocations[98] = Vector(0, 0, 0);
		Global.LavaLocations[99] = Vector(0, 0, 0);
		Global.LavaLocations[100] = Vector(0, 0, 0);
		Global.LavaLocations[101] = Vector(0, 0, 0);
		Global.LavaLocations[102] = Vector(0, 0, 0);
		Global.LavaLocations[103] = Vector(0, 0, 0);
		Global.LavaLocations[104] = Vector(0, 0, 0);
		Global.LavaLocations[105] = Vector(0, 0, 0);
		Global.LavaLocations[106] = Vector(0, 0, 0);
		Global.LavaLocations[107] = Vector(0, 0, 0);
		Global.LavaLocations[108] = Vector(0, 0, 0);
		Global.LavaLocations[109] = Vector(0, 0, 0);
		Global.LavaLocations[110] = Vector(0, 0, 0);
		Global.LavaLocations[111] = Vector(0, 0, 0);
		Global.LavaLocations[112] = Vector(0, 0, 0);
		Global.LavaLocations[113] = Vector(0, 0, 0);
		Global.LavaLocations[114] = Vector(0, 0, 0);
		Global.LavaLocations[115] = Vector(0, 0, 0);
		Global.LavaLocations[116] = Vector(0, 0, 0);
		Global.LavaLocations[117] = Vector(0, 0, 0);
		Global.LavaLocations[118] = Vector(0, 0, 0);
		Global.LavaLocations[119] = Vector(0, 0, 0);
		Global.LavaLocations[120] = Vector(0, 0, 0);
		Global.LavaLocations[121] = Vector(0, 0, 0);
		Global.LavaLocations[122] = Vector(0, 0, 0);
		Global.LavaLocations[123] = Vector(0, 0, 0);
		Global.LavaLocations[124] = Vector(0, 0, 0);
		Global.LavaLocations[125] = Vector(0, 0, 0);
		Global.LavaLocations[126] = Vector(0, 0, 0);
		Global.LavaLocations[127] = Vector(0, 0, 0);
		Global.LavaLocations[128] = Vector(0, 0, 0);
		Global.LavaLocations[129] = Vector(0, 0, 0);
		Global.LavaLocations[130] = Vector(0, 0, 0);
		Global.LavaLocations[131] = Vector(0, 0, 0);
		Global.LavaLocations[132] = Vector(0, 0, 0);
		Global.LavaLocations[133] = Vector(0, 0, 0);
		Global.LavaLocations[134] = Vector(0, 0, 0);
		Global.LavaLocations[135] = Vector(0, 0, 0);
		Global.LavaLocations[136] = Vector(0, 0, 0);
		Global.LavaLocations[137] = Vector(0, 0, 0);
		Global.LavaLocations[138] = Vector(0, 0, 0);
		Global.LavaLocations[139] = Vector(0, 0, 0);
		Global.LavaLocations[140] = Vector(0, 0, 0);
		Global.LavaLocations[141] = Vector(0, 0, 0);
		Global.LavaLocations[142] = Vector(0, 0, 0);
		Global.LavaLocations[143] = Vector(0, 0, 0);
		Global.LavaLocations[144] = Vector(0, 0, 0);
		Global.LavaLocations[145] = Vector(0, 0, 0);
		Global.LavaLocations[146] = Vector(0, 0, 0);
		Global.LavaLocations[147] = Vector(0, 0, 0);
		Global.LavaLocations[148] = Vector(0, 0, 0);
		Global.LavaLocations[149] = Vector(0, 0, 0);
		Global.LavaLocations[150] = Vector(0, 0, 0);
		Global.LavaLocations[151] = Vector(0, 0, 0);
		Global.LavaLocations[152] = Vector(0, 0, 0);
		Global.LavaLocations[153] = Vector(0, 0, 0);
		Global.LavaLocations[154] = Vector(0, 0, 0);
		Global.LavaLocations[155] = Vector(0, 0, 0);
		Global.LavaLocations[156] = Vector(0, 0, 0);
		Global.LavaLocations[157] = Vector(0, 0, 0);
		Global.LavaLocations[158] = Vector(0, 0, 0);
		Global.LavaLocations[159] = Vector(0, 0, 0);
	}
}

規則("Lava Radius")
{
	事件
	{
		Ongoing - Global;
	}

	動作
	{
		Global.LavaRadius[0] = 9.400;
		Global.LavaRadius[1] = 6;
		Global.LavaRadius[2] = 60.400;
		Global.LavaRadius[3] = 23.200;
		Global.LavaRadius[4] = 58.800;
		Global.LavaRadius[5] = 7;
		Global.LavaRadius[6] = 34.600;
		Global.LavaRadius[7] = 34.700;
		Global.LavaRadius[8] = 21;
		Global.LavaRadius[9] = 3.600;
		Global.LavaRadius[10] = 3;
		Global.LavaRadius[11] = 4.400;
		Global.LavaRadius[12] = 10.500;
		Global.LavaRadius[13] = 8.200;
		Global.LavaRadius[14] = 19.400;
		Global.LavaRadius[15] = 30;
		Global.LavaRadius[16] = 43.100;
		Global.LavaRadius[17] = 24.800;
		Global.LavaRadius[18] = 2.400;
		Global.LavaRadius[19] = 2.700;
		Global.LavaRadius[20] = 78.599;
		Global.LavaRadius[21] = 9.800;
		Global.LavaRadius[22] = 24.300;
		Global.LavaRadius[23] = 4.300;
		Global.LavaRadius[24] = 2.200;
		Global.LavaRadius[25] = 5;
		Global.LavaRadius[26] = 10.600;
		Global.LavaRadius[27] = 11;
		Global.LavaRadius[28] = 8.400;
		Global.LavaRadius[29] = 88.599;
		Global.LavaRadius[30] = 4.900;
		Global.LavaRadius[31] = 88.099;
		Global.LavaRadius[32] = 79.199;
		Global.LavaRadius[33] = 6;
		Global.LavaRadius[34] = 43.900;
		Global.LavaRadius[35] = 98.599;
		Global.LavaRadius[36] = 8;
		Global.LavaRadius[37] = 9;
		Global.LavaRadius[38] = 101.699;
		Global.LavaRadius[39] = 60.400;
		Global.LavaRadius[40] = 6.300;
		Global.LavaRadius[41] = 51.500;
		Global.LavaRadius[42] = 52.600;
		Global.LavaRadius[43] = 10.600;
		Global.LavaRadius[44] = 3;
		Global.LavaRadius[45] = 24.600;
		Global.LavaRadius[46] = 15.400;
		Global.LavaRadius[47] = 10.100;
		Global.LavaRadius[48] = 161.501;
		Global.LavaRadius[49] = 12.800;
		Global.LavaRadius[50] = 20.300;
		Global.LavaRadius[51] = 87.099;
		Global.LavaRadius[52] = 11;
		Global.LavaRadius[53] = 22.600;
		Global.LavaRadius[54] = 138.299;
		Global.LavaRadius[55] = 8.500;
		Global.LavaRadius[56] = 6.400;
		Global.LavaRadius[57] = 18;
		Global.LavaRadius[58] = 3.700;
		Global.LavaRadius[59] = 21.700;
		Global.LavaRadius[60] = 4;
		Global.LavaRadius[61] = 15;
		Global.LavaRadius[62] = 55.800;
		Global.LavaRadius[63] = 83.099;
		Global.LavaRadius[64] = 21;
		Global.LavaRadius[65] = 6.300;
		Global.LavaRadius[66] = 94.899;
		Global.LavaRadius[67] = 2.900;
		Global.LavaRadius[68] = 8;
		Global.LavaRadius[69] = 8.500;
		Global.LavaRadius[70] = 5.200;
		Global.LavaRadius[71] = 110.399;
		Global.LavaRadius[72] = 11.500;
		Global.LavaRadius[73] = 12.800;
		Global.LavaRadius[74] = 10.800;
		Global.LavaRadius[75] = 8.200;
		Global.LavaRadius[76] = 8.600;
		Global.LavaRadius[77] = 48.400;
		Global.LavaRadius[78] = 38.800;
		Global.LavaRadius[79] = 22;
		Global.LavaRadius[80] = 14.600;
		Global.LavaRadius[81] = 32.100;
		Global.LavaRadius[82] = 6.100;
		Global.LavaRadius[83] = 82.199;
		Global.LavaRadius[84] = 92.399;
		Global.LavaRadius[85] = 0;
		Global.LavaRadius[86] = 0;
		Global.LavaRadius[87] = 0;
		Global.LavaRadius[88] = 0;
		Global.LavaRadius[89] = 0;
		Global.LavaRadius[90] = 0;
		Global.LavaRadius[91] = 0;
		Global.LavaRadius[92] = 0;
		Global.LavaRadius[93] = 0;
		Global.LavaRadius[94] = 0;
		Global.LavaRadius[95] = 0;
		Global.LavaRadius[96] = 0;
		Global.LavaRadius[97] = 0;
		Global.LavaRadius[98] = 0;
		Global.LavaRadius[99] = 0;
		Global.LavaRadius[100] = 0;
		Global.LavaRadius[101] = 0;
		Global.LavaRadius[102] = 0;
		Global.LavaRadius[103] = 0;
		Global.LavaRadius[104] = 0;
		Global.LavaRadius[105] = 0;
		Global.LavaRadius[106] = 0;
		Global.LavaRadius[107] = 0;
		Global.LavaRadius[108] = 0;
		Global.LavaRadius[109] = 0;
		Global.LavaRadius[110] = 0;
		Global.LavaRadius[111] = 0;
		Global.LavaRadius[112] = 0;
		Global.LavaRadius[113] = 0;
		Global.LavaRadius[114] = 0;
		Global.LavaRadius[115] = 0;
		Global.LavaRadius[116] = 0;
		Global.LavaRadius[117] = 0;
		Global.LavaRadius[118] = 0;
		Global.LavaRadius[119] = 0;
		Global.LavaRadius[120] = 0;
		Global.LavaRadius[121] = 0;
		Global.LavaRadius[122] = 0;
		Global.LavaRadius[123] = 0;
		Global.LavaRadius[124] = 0;
		Global.LavaRadius[125] = 0;
		Global.LavaRadius[126] = 0;
		Global.LavaRadius[127] = 0;
		Global.LavaRadius[128] = 0;
		Global.LavaRadius[129] = 0;
		Global.LavaRadius[130] = 0;
		Global.LavaRadius[131] = 0;
		Global.LavaRadius[132] = 0;
		Global.LavaRadius[133] = 0;
		Global.LavaRadius[134] = 0;
		Global.LavaRadius[135] = 0;
		Global.LavaRadius[136] = 0;
		Global.LavaRadius[137] = 0;
		Global.LavaRadius[138] = 0;
		Global.LavaRadius[139] = 0;
		Global.LavaRadius[140] = 0;
		Global.LavaRadius[141] = 0;
		Global.LavaRadius[142] = 0;
		Global.LavaRadius[143] = 0;
		Global.LavaRadius[144] = 0;
		Global.LavaRadius[145] = 0;
		Global.LavaRadius[146] = 0;
		Global.LavaRadius[147] = 0;
		Global.LavaRadius[148] = 0;
		Global.LavaRadius[149] = 0;
		Global.LavaRadius[150] = 0;
		Global.LavaRadius[151] = 0;
		Global.LavaRadius[152] = 0;
		Global.LavaRadius[153] = 0;
		Global.LavaRadius[154] = 0;
		Global.LavaRadius[155] = 0;
		Global.LavaRadius[156] = 0;
		Global.LavaRadius[157] = 0;
		Global.LavaRadius[158] = 0;
		Global.LavaRadius[159] = 0;
	}
}

規則("Checkpoint Locations")
{
	事件
	{
		Ongoing - Global;
	}

	動作
	{
		Global.CheckpointLocations[0] = Vector(319.152, -17.432, 26.270);
		Global.CheckpointLocations[1] = Vector(329.661, -18.641, -61.876);
		Global.CheckpointLocations[2] = Vector(307.112, -24.740, -95.032);
		Global.CheckpointLocations[3] = Vector(-233.047, 9.460, 23.418);
		Global.CheckpointLocations[4] = Vector(-197.832, 9.865, -13.338);
		Global.CheckpointLocations[5] = Vector(-184.953, 3.037, -57.116);
		Global.CheckpointLocations[6] = Vector(-67.118, 66.577, -180.435);
		Global.CheckpointLocations[7] = Vector(3.441, 66.367, -147.261);
		Global.CheckpointLocations[8] = Vector(52.657, 66.367, -147.171);
		Global.CheckpointLocations[9] = Vector(-296.894, 4.556, 11.893);
	}
}

規則("Zone Locations")
{
	事件
	{
		Ongoing - Global;
	}

	動作
	{
		"Spawn"
		Global.ZoneLocations[0] = Vector(350.814, -15.461, 54.442);
		"Zone 1"
		Global.ZoneLocations[1] = Vector(335.738, -18.634, -18.429);
		"Zone 2"
		Global.ZoneLocations[2] = Vector(-279.305, 1.044, 54.630);
		"Zone 3"
		Global.ZoneLocations[3] = Vector(-21.374, 68.054, -156.929);
		"Zone 4"
		Global.ZoneLocations[4] = Vector(133.480, 62.469, -158.937);
	}
}

規則("Zone Text")
{
	事件
	{
		Ongoing - Global;
	}

	動作
	{
		"Spawn"
		Global.ZoneText[0] = 0;
		"Zone 1"
		Global.ZoneText[1] = Custom String("Zone 1");
		"Zone 2"
		Global.ZoneText[2] = Custom String("Zone 2");
		"Zone 3"
		Global.ZoneText[3] = Custom String("Zone 3");
		"Zone 4"
		Global.ZoneText[4] = Custom String("Zone 4");
	}
}

規則("Portal Locations")
{
	事件
	{
		Ongoing - Global;
	}

	動作
	{
		Global.PortalLocations[0] = Vector(325.330, -19.341, -13.610);
		Global.PortalLocations[1] = Vector(328.733, -18.756, -15.176);
		Global.PortalLocations[2] = Vector(330.918, -17.562, -16.060);
		Global.PortalLocations[3] = Vector(-283.192, 2.339, 56.401);
		Global.PortalLocations[4] = Vector(-14.768, 69.354, -156.964);
		Global.PortalLocations[5] = Vector(139.872, 63.895, -158.977);
		Global.PortalLocations[6] = Vector(138.170, 67.584, -142.370);
		Global.PortalLocations[7] = Vector(-180.100, 5.856, -104.505);
		Global.PortalLocations[8] = Vector(-291.076, 12.637, 26.170);
		Global.PortalLocations[9] = Vector(284.221, -17.855, -111.006);
		Global.PortalLocations[10] = Vector(0, 0, 0);
		Global.PortalLocations[11] = Vector(0, 0, 0);
		Global.PortalLocations[12] = Vector(0, 0, 0);
		Global.PortalLocations[13] = Vector(0, 0, 0);
	}
}

規則("Portal Destinations")
{
	事件
	{
		Ongoing - Global;
	}

	動作
	{
		Global.PortalDestinations[0] = Global.ZoneLocations[2];
		Global.PortalDestinations[1] = Global.ZoneLocations[3];
		Global.PortalDestinations[2] = Global.ZoneLocations[4];
		Global.PortalDestinations[3] = Global.ZoneLocations[1];
		Global.PortalDestinations[4] = Global.ZoneLocations[1];
		Global.PortalDestinations[5] = Global.ZoneLocations[1];
		Global.PortalDestinations[6] = Vector(152.057, 60.448, -138.451);
		Global.PortalDestinations[7] = Vector(-67.277, 66.581, -180.332);
		Global.PortalDestinations[8] = Vector(-296.894, 4.556, 11.893);
		Global.PortalDestinations[9] = Vector(-267.493, -5.113, -4.489);
		Global.PortalDestinations[10] = Vector(0, 0, 0);
		Global.PortalDestinations[11] = Vector(0, 0, 0);
		Global.PortalDestinations[12] = Vector(0, 0, 0);
		Global.PortalDestinations[13] = Vector(0, 0, 0);
	}
}

規則("Portal Unlock Defaults")
{
	事件
	{
		Ongoing - Global;
	}

	動作
	{
		"True = Usable from Start | False = Locked until destination is reached"
		Global.PortalUnlockDefaults[0] = False;
		Global.PortalUnlockDefaults[1] = False;
		Global.PortalUnlockDefaults[2] = False;
		Global.PortalUnlockDefaults[3] = False;
		Global.PortalUnlockDefaults[4] = False;
		Global.PortalUnlockDefaults[5] = False;
		Global.PortalUnlockDefaults[6] = True;
		Global.PortalUnlockDefaults[7] = True;
		Global.PortalUnlockDefaults[8] = True;
		Global.PortalUnlockDefaults[9] = True;
		Global.PortalUnlockDefaults[10] = False;
		Global.PortalUnlockDefaults[11] = False;
		Global.PortalUnlockDefaults[12] = False;
		Global.PortalUnlockDefaults[13] = False;
	}
}

規則("Portal Text")
{
	事件
	{
		Ongoing - Global;
	}

	動作
	{
		Global.PortalText[0] = Custom String("{0}", Global.ZoneText[2]);
		Global.PortalText[1] = Custom String("{0}", Global.ZoneText[3]);
		Global.PortalText[2] = Custom String("{0}", Global.ZoneText[4]);
		Global.PortalText[3] = Custom String("{0}", Global.ZoneText[1]);
		Global.PortalText[4] = Custom String("{0}", Global.ZoneText[1]);
		Global.PortalText[5] = Custom String("{0}", Global.ZoneText[1]);
		Global.PortalText[6] = Custom String("");
		Global.PortalText[7] = Custom String("");
		Global.PortalText[8] = Custom String("");
		Global.PortalText[9] = Custom String("");
		Global.PortalText[10] = Custom String("");
		Global.PortalText[11] = Custom String("");
		Global.PortalText[12] = Custom String("");
		Global.PortalText[13] = Custom String("");
		Global.PortalText[14] = Custom String("");
		Global.PortalText[15] = Custom String("");
	}
}

規則("Hero Locations")
{
	事件
	{
		Ongoing - Global;
	}

	動作
	{
		"Starting Hero - Yellow"
		Global.HeroLocations[0] = Vector(341.020, -17.341, -20.993);
		"Unlockable Hero 1 - Green"
		Global.HeroLocations[1] = Vector(349.048, -17.341, -24.656);
		"Unlockable Hero 2 - Blue"
		Global.HeroLocations[2] = Vector(346.984, -16.757, -20.102);
		"Unlockable Hero 3 - Purple"
		Global.HeroLocations[3] = Vector(346.310, -17.341, -28.313);
		"Unlockable Hero 4 - Red"
		Global.HeroLocations[4] = Vector(339.145, -16.670, -28.180);
		"Secret Hero - White"
		Global.HeroLocations[5] = Vector(350.814, -18.961, 54.442);
	}
}

規則("Unlock Locations")
{
	事件
	{
		Ongoing - Global;
	}

	動作
	{
		"Unlockable Hero 1 - Green"
		Global.UnlockLocations[0] = Vector(309.753, -15.370, -17.756);
		"Unlockable Hero 2 - Blue"
		Global.UnlockLocations[1] = Vector(-247.035, 3.574, -4.412);
		"Unlockable Hero 3 - Purple"
		Global.UnlockLocations[2] = Vector(11.419, 62.650, -139.442);
		"Unlockable Hero 4 - Red"
		Global.UnlockLocations[3] = Vector(147.121, 74.433, -160.329);
	}
}

規則("Speedrun Location")
{
	事件
	{
		Ongoing - Global;
	}

	動作
	{
		Global.SpeedrunLocation = Global.ZoneLocations[1] + Vector(2, 1.500, -2);
	}
}

規則("Bouncepad Locations")
{
	事件
	{
		Ongoing - Global;
	}

	動作
	{
		Global.BouncepadLocations[0] = Vector(331.005, -21.305, 46.292);
		Global.BouncepadLocations[1] = Vector(326.625, -21.906, 38.900);
		Global.BouncepadLocations[2] = Vector(315.791, -17.294, -15.666);
		Global.BouncepadLocations[3] = Vector(320.734, -15.938, -93.704);
		Global.BouncepadLocations[4] = Vector(311.191, -24.341, -99.265);
		Global.BouncepadLocations[5] = Vector(293.034, -19.470, -102.252);
		Global.BouncepadLocations[6] = Vector(288.146, -17.930, -104.447);
		Global.BouncepadLocations[7] = Vector(-27.665, 63.973, -179.223);
		Global.BouncepadLocations[8] = Vector(28.285, 62.828, -177.366);
		Global.BouncepadLocations[9] = Vector(68.234, 65.150, -147.466);
		Global.BouncepadLocations[10] = Vector(78.743, 66.902, -172.657);
		Global.BouncepadLocations[11] = Vector(122.858, 62.096, -152.754);
		Global.BouncepadLocations[12] = Vector(-226.366, 9.992, 16.704);
		Global.BouncepadLocations[13] = Vector(0, 0, 0);
		Global.BouncepadLocations[14] = Vector(0, 0, 0);
		Global.BouncepadLocations[15] = Vector(0, 0, 0);
		Global.BouncepadLocations[16] = Vector(0, 0, 0);
		Global.BouncepadLocations[17] = Vector(0, 0, 0);
		Global.BouncepadLocations[18] = Vector(0, 0, 0);
		Global.BouncepadLocations[19] = Vector(0, 0, 0);
	}
}

規則("Bouncepad Strengths")
{
	事件
	{
		Ongoing - Global;
	}

	動作
	{
		Global.BouncepadStrength[0] = 5;
		Global.BouncepadStrength[1] = 7;
		Global.BouncepadStrength[2] = 10;
		Global.BouncepadStrength[3] = 10;
		Global.BouncepadStrength[4] = 10;
		Global.BouncepadStrength[5] = 10;
		Global.BouncepadStrength[6] = 10;
		Global.BouncepadStrength[7] = 7;
		Global.BouncepadStrength[8] = 18;
		Global.BouncepadStrength[9] = 13;
		Global.BouncepadStrength[10] = 8;
		Global.BouncepadStrength[11] = 10;
		Global.BouncepadStrength[12] = 14;
		Global.BouncepadStrength[13] = 10;
		Global.BouncepadStrength[14] = 10;
		Global.BouncepadStrength[15] = 10;
		Global.BouncepadStrength[16] = 10;
		Global.BouncepadStrength[17] = 10;
		Global.BouncepadStrength[18] = 10;
		Global.BouncepadStrength[19] = 10;
	}
}

規則("Spawn Face Direction")
{
	事件
	{
		Ongoing - Global;
	}

	動作
	{
		"First time spawn direction"
		Global.SpawnFaceDirection = Vector(1000, 0, 0);
	}
}

規則("Effect Colors")
{
	事件
	{
		Ongoing - Global;
	}

	動作
	{
		"Lava"
		Global.EffectColors[0] = Color(Violet);
		"Checkpoints"
		Global.EffectColors[1] = Color(White);
		"Zones"
		Global.EffectColors[2] = Color(White);
		"Portals"
		Global.EffectColors[3] = Color(White);
		"Bouncepads"
		Global.EffectColors[4] = Color(Green);
		"Starting Hero"
		Global.EffectColors[5] = Color(Yellow);
		"Unlockable Hero 1"
		Global.EffectColors[6] = Color(Green);
		"Unlockable Hero 2"
		Global.EffectColors[7] = Color(Blue);
		"Unlockable Hero 3"
		Global.EffectColors[8] = Color(Purple);
		"Unlockable Hero 4"
		Global.EffectColors[9] = Color(Red);
		"Secret Hero"
		Global.EffectColors[10] = Color(Black);
	}
}

規則("Effect Behaviors")
{
	事件
	{
		Ongoing - Global;
	}

	動作
	{
		"Portals are visible when locked"
		Global.EffectBehaviors[0] = True;
	}
}

規則("Player Behaviors")
{
	事件
	{
		Ongoing - Global;
	}

	動作
	{
		"Player Phasing\r\n0 = Players can collide with other players and explosions.\r\n1 = Players cannot collide with other players but can interact with explosions.\r\n2 = Players cannot collide with other players nor explosions."
		Global.PlayerBehaviors[0] = 1;
	}
}

規則("---------- EXTRA DATA ----------")
{
	事件
	{
		Ongoing - Global;
	}
}

規則("In World Text Locations")
{
	事件
	{
		Ongoing - Global;
	}

	動作
	{
		"\"Heroes\" Text"
		Global.InWorldText[0] = Vector(0, 0, 0);
	}
}

規則("Tutorial Mode Tip Messages")
{
	事件
	{
		Ongoing - Each Player;
		All;
		All;
	}

	條件
	{
		Event Player.TutorialMode == True;
		Is Button Held(Event Player, Button(Melee)) == True;
	}

	動作
	{
		Wait(0.500, Abort When False);
		Small Message(Event Player, Custom String("Tips have not been set up on this map."));
		Abort;
		停用 If(Event Player.ZonesReached[0] == False);
		停用 Small Message(Event Player, Custom String("Tip: Use {0} to reach the Starting Zone", Hero Icon String(Hero(源氏))));
		停用 Else If(Event Player.ZonesReached[1] == False);
		停用 Small Message(Event Player, Custom String("Tip: Use {0} to reach the Capture Zone", Hero Icon String(Hero(源氏))));
		停用 Else If(Event Player.HeroesUnlocked[0] == False);
		停用 Small Message(Event Player, Custom String("Tip: Find {0} near capture zone", Hero Icon String(Hero(巴帝斯特))));
		停用 Else If(Event Player.HeroesUnlocked[1] == False);
		停用 Small Message(Event Player, Custom String("Tip: Find {0} between capture zone and escort zone", Hero Icon String(Hero(毀滅拳王))));
		停用 Else If(Event Player.ZonesReached[2] == False);
		停用 Small Message(Event Player, Custom String("Tip: Use {0} to reach Escort Zone", Hero Icon String(Hero(毀滅拳王))));
		停用 Else If(Event Player.HeroesUnlocked[2] == False);
		停用 Small Message(Event Player, Custom String("Tip: Find {0} between escort zone and final zone", Hero Icon String(Hero(路西歐))));
		停用 Else If(Event Player.ZonesReached[3] == False);
		停用 Small Message(Event Player, Custom String("Tip: Use {0} to reach Final Zone", Hero Icon String(Hero(路西歐))));
		停用 Else If(Event Player.HeroesUnlocked[3] == False);
		停用 Small Message(Event Player, Custom String("Tip: Use {0} to reach {1} near final zone", Hero Icon String(Hero(巴帝斯特)),
			Hero Icon String(Hero(駭影))));
		停用 Else If(Event Player.FoundSecretHero == False);
		停用 Small Message(Event Player, Custom String("Tip: Find the secret character hidden somewhere in this map!"));
		停用 Else;
		停用 Small Message(Event Player, Custom String("Tip: Join discord.me/lavaparkour for more maps!"));
		停用 End;
	}
}

規則("---------- EFFECTS ----------")
{
	事件
	{
		Ongoing - Global;
	}
}

規則("Loading Data")
{
	事件
	{
		Ongoing - Global;
	}

	動作
	{
		"Get Max Objective Index Values"
		If(Global.MaxObjectIndex == Null);
			Wait(0.500, Ignore Condition);
			"Lava Max"
			Global.LavaLocations = Filtered Array(Global.LavaLocations, Current Array Element != Null && Current Array Element != Vector(0, 0,
				0));
			Global.LavaRadius = Filtered Array(Global.LavaRadius, Current Array Element != Null && Current Array Element != 0);
			Global.MaxObjectIndex[0] = Count Of(Global.LavaLocations) - 1;
			"Checkpoint Max"
			Global.MaxObjectIndex[1] = Count Of(Global.CheckpointLocations) - 1;
			"Zone Max"
			Global.MaxObjectIndex[2] = Count Of(Global.ZoneLocations) - 1;
			"Portals Max"
			Global.MaxObjectIndex[3] = Count Of(Global.PortalLocations) - 1;
			"Heroes Max"
			Global.MaxObjectIndex[4] = Count Of(Global.HeroLocations) - 1;
			"Unlocks Max"
			Global.MaxObjectIndex[5] = Count Of(Global.UnlockLocations) - 1;
			"Speedrun Max"
			Global.MaxObjectIndex[6] = 0;
			"Bouncepads Max"
			Global.MaxObjectIndex[7] = Count Of(Global.BouncepadLocations) - 1;
		End;
		"Move to next Object Type if end index reached"
		If(Global.LoadingElementIndex > Global.MaxObjectIndex[Global.LoadingObjectIndex]);
			Global.LoadingObjectIndex += 1;
			Global.LoadingElementIndex = 0;
		End;
		"Load Lava"
		If(Global.LoadingObjectIndex == 0);
			Create Effect(All Players(All Teams), Sphere, Global.EffectColors[0], Global.LavaLocations[Global.LoadingElementIndex],
				Global.LavaRadius[Global.LoadingElementIndex], Visible To);
			Wait(0.030, Ignore Condition);
			Global.LoadingElementIndex += 1;
			Loop;
		"Load Checkpoints"
		Else If(Global.LoadingObjectIndex == 1);
			If(Global.CheckpointLocations[Global.LoadingElementIndex] != Vector(0, 0, 0)
				&& Global.CheckpointLocations[Global.LoadingElementIndex] != Null);
				Create Effect(All Players(All Teams), Light Shaft, Global.EffectColors[1], Global.CheckpointLocations[Global.LoadingElementIndex],
					1, Visible To);
			End;
			Wait(0.030, Ignore Condition);
			Global.LoadingElementIndex += 1;
			Loop;
		"Load Zones"
		Else If(Global.LoadingObjectIndex == 2);
			If(Global.ZoneLocations[Global.LoadingElementIndex] != Vector(0, 0, 0)
				&& Global.ZoneLocations[Global.LoadingElementIndex] != Null);
				"Zones"
				If(Global.LoadingElementIndex > 0);
					Create In-World Text(All Players(All Teams), Global.ZoneText[Global.LoadingElementIndex],
						Global.ZoneLocations[Global.LoadingElementIndex] + Vector(0, 3, 0), 3, Clip Against Surfaces, Visible To, Color(White),
						Default Visibility);
					Wait(0.030, Ignore Condition);
					Create Effect(All Players(All Teams), Light Shaft, Global.EffectColors[2], Global.ZoneLocations[Global.LoadingElementIndex], 2,
						Visible To);
				End;
			End;
			Wait(0.030, Ignore Condition);
			Global.LoadingElementIndex += 1;
			Loop;
		"Load Portals"
		Else If(Global.LoadingObjectIndex == 3);
			If(Global.PortalLocations[Global.LoadingElementIndex] != Vector(0, 0, 0)
				&& Global.PortalLocations[Global.LoadingElementIndex] != Null);
				If(Global.EffectBehaviors[0] == False);
					Create In-World Text(Filtered Array(All Players(All Teams), Current Array Element.PortalUnlocked[Evaluate Once(
						Global.LoadingElementIndex)] == True), Global.PortalText[Evaluate Once(Global.LoadingElementIndex)],
						Global.PortalLocations[Evaluate Once(Global.LoadingElementIndex)], 1.500, Clip Against Surfaces, Visible To, Color(White),
						Default Visibility);
					Wait(0.030, Ignore Condition);
					Create Effect(Filtered Array(All Players(All Teams), Current Array Element.PortalUnlocked[Evaluate Once(Global.LoadingElementIndex)
						] == True), Good Aura, Global.EffectColors[3], Global.PortalLocations[Evaluate Once(Global.LoadingElementIndex)], 1,
						Visible To);
				Else;
					Create In-World Text(All Players(All Teams), Global.PortalText[Evaluate Once(Global.LoadingElementIndex)],
						Global.PortalLocations[Evaluate Once(Global.LoadingElementIndex)], 1.500, Clip Against Surfaces, Visible To, Color(White),
						Default Visibility);
					Wait(0.030, Ignore Condition);
					Create In-World Text(Filtered Array(All Players(All Teams), Current Array Element.PortalUnlocked[Evaluate Once(
						Global.LoadingElementIndex)] == False), Custom String("L O C K E D"), Global.PortalLocations[Evaluate Once(
						Global.LoadingElementIndex)] + Vector(0, -0.500, 0), 1.250, Clip Against Surfaces, Visible To, Color(Orange),
						Default Visibility);
					Wait(0.030, Ignore Condition);
					Create Effect(All Players(All Teams), Good Aura, Global.EffectColors[3], Global.PortalLocations[Evaluate Once(
						Global.LoadingElementIndex)], 1, Visible To);
				End;
			End;
			Wait(0.030, Ignore Condition);
			Global.LoadingElementIndex += 1;
			Loop;
		"Load Heroes"
		Else If(Global.LoadingObjectIndex == 4);
			If(Global.HeroLocations[Global.LoadingElementIndex] != Vector(0, 0, 0)
				&& Global.HeroLocations[Global.LoadingElementIndex] != Null);
				Wait(0.030, Ignore Condition);
				If(Global.LoadingElementIndex == 0);
					Create In-World Text(All Players(All Teams), Hero Icon String(Global.HeroRoster[0]), Global.HeroLocations[0], 2,
						Clip Against Surfaces, Visible To, Color(White), Default Visibility);
					Create Effect(All Players(All Teams), Bad Aura, Global.EffectColors[5], Global.HeroLocations[0], 1, Visible To);
				Else If(Global.LoadingElementIndex == 1);
					Create In-World Text(Filtered Array(All Players(All Teams), Current Array Element.HeroesUnlocked[0] == True), Hero Icon String(
						Global.HeroRoster[1]), Global.HeroLocations[1], 2, Clip Against Surfaces, Visible To, Color(White), Default Visibility);
					Create In-World Text(Filtered Array(All Players(All Teams), Current Array Element.HeroesUnlocked[0] == False), Custom String(
						"{0} - {1}", Hero Icon String(Global.HeroRoster[1]), String("受到鎖定")), Global.HeroLocations[1], 2, Clip Against Surfaces,
						Visible To, Color(White), Default Visibility);
					Create Effect(All Players(All Teams), Bad Aura, Global.EffectColors[6], Global.HeroLocations[1], 1, Visible To);
				Else If(Global.LoadingElementIndex == 2);
					Create In-World Text(Filtered Array(All Players(All Teams), Current Array Element.HeroesUnlocked[1] == True), Hero Icon String(
						Global.HeroRoster[2]), Global.HeroLocations[2], 2, Clip Against Surfaces, Visible To, Color(White), Default Visibility);
					Create In-World Text(Filtered Array(All Players(All Teams), Current Array Element.HeroesUnlocked[1] == False), Custom String(
						"{0} - {1}", Hero Icon String(Global.HeroRoster[2]), String("受到鎖定")), Global.HeroLocations[2], 2, Clip Against Surfaces,
						Visible To, Color(White), Default Visibility);
					Create Effect(All Players(All Teams), Bad Aura, Global.EffectColors[7], Global.HeroLocations[2], 1, Visible To);
				Else If(Global.LoadingElementIndex == 3);
					Create In-World Text(Filtered Array(All Players(All Teams), Current Array Element.HeroesUnlocked[2] == True), Hero Icon String(
						Global.HeroRoster[3]), Global.HeroLocations[3], 2, Clip Against Surfaces, Visible To, Color(White), Default Visibility);
					Create In-World Text(Filtered Array(All Players(All Teams), Current Array Element.HeroesUnlocked[2] == False), Custom String(
						"{0} - {1}", Hero Icon String(Global.HeroRoster[3]), String("受到鎖定")), Global.HeroLocations[3], 2, Clip Against Surfaces,
						Visible To, Color(White), Default Visibility);
					Create Effect(All Players(All Teams), Bad Aura, Global.EffectColors[8], Global.HeroLocations[3], 1, Visible To);
				Else If(Global.LoadingElementIndex == 4);
					Create In-World Text(Filtered Array(All Players(All Teams), Current Array Element.HeroesUnlocked[3] == True), Hero Icon String(
						Global.HeroRoster[4]), Global.HeroLocations[4], 2, Clip Against Surfaces, Visible To, Color(White), Default Visibility);
					Create In-World Text(Filtered Array(All Players(All Teams), Current Array Element.HeroesUnlocked[3] == False), Custom String(
						"{0} - {1}", Hero Icon String(Global.HeroRoster[4]), String("受到鎖定")), Global.HeroLocations[4], 2, Clip Against Surfaces,
						Visible To, Color(White), Default Visibility);
					Create Effect(All Players(All Teams), Bad Aura, Global.EffectColors[9], Global.HeroLocations[4], 1, Visible To);
				Else If(Global.LoadingElementIndex == 5);
					Create Effect(Players On Hero(Hero(安娜), All Teams), Bad Aura, Global.EffectColors[10], Global.HeroLocations[5], 1, Visible To);
				End;
			End;
			Wait(0.030, Ignore Condition);
			Global.LoadingElementIndex += 1;
			Loop;
		"Load Unlocks"
		Else If(Global.LoadingObjectIndex == 5);
			If(Global.UnlockLocations[Global.LoadingElementIndex] != Vector(0, 0, 0)
				&& Global.UnlockLocations[Global.LoadingElementIndex] != Null);
				Create In-World Text(All Players(All Teams), Hero Icon String(Global.HeroRoster[Global.LoadingElementIndex + 1]),
					Global.UnlockLocations[Global.LoadingElementIndex], 2, Clip Against Surfaces, Visible To, Color(White), Default Visibility);
				Wait(0.030, Ignore Condition);
				If(Global.LoadingElementIndex == 0);
					Create Effect(All Players(All Teams), Sparkles, Global.EffectColors[6], Global.UnlockLocations[0], 1, Visible To);
				Else If(Global.LoadingElementIndex == 1);
					Create Effect(All Players(All Teams), Sparkles, Global.EffectColors[7], Global.UnlockLocations[1], 1, Visible To);
				Else If(Global.LoadingElementIndex == 2);
					Create Effect(All Players(All Teams), Sparkles, Global.EffectColors[8], Global.UnlockLocations[2], 1, Visible To);
				Else If(Global.LoadingElementIndex == 3);
					Create Effect(All Players(All Teams), Sparkles, Global.EffectColors[9], Global.UnlockLocations[3], 1, Visible To);
				End;
			End;
			Wait(0.030, Ignore Condition);
			Global.LoadingElementIndex += 1;
			Loop;
		"Load Speedrun"
		Else If(Global.LoadingObjectIndex == 6);
			If(Global.SpeedrunLocation != Vector(0, 0, 0) && Global.SpeedrunLocation != Null);
				Create In-World Text(Filtered Array(All Players(All Teams), Current Array Element.SpeedRunMode == False), Custom String(
					"Speedrun Mode"), Global.SpeedrunLocation, 1, Clip Against Surfaces, Visible To, Color(Red), Default Visibility);
				Wait(0.030, Ignore Condition);
				Create Effect(Filtered Array(All Players(All Teams), Current Array Element.SpeedRunMode == False), Good Aura, Color(Red),
					Global.SpeedrunLocation, 1, Visible To);
				Wait(0.030, Ignore Condition);
				Create In-World Text(Filtered Array(All Players(All Teams), Current Array Element.SpeedRunMode == True), Custom String(
					"Speedrun Mode"), Global.SpeedrunLocation, 1, Clip Against Surfaces, Visible To, Color(Green), Default Visibility);
				Wait(0.030, Ignore Condition);
				Create Effect(Filtered Array(All Players(All Teams), Current Array Element.SpeedRunMode == True), Good Aura, Color(Green),
					Global.SpeedrunLocation, 1, Visible To);
			End;
			Wait(0.030, Ignore Condition);
			Global.LoadingElementIndex += 1;
			Loop;
		"Load Bouncepads"
		Else If(Global.LoadingObjectIndex == 7);
			If(Global.BouncepadLocations[Global.LoadingElementIndex] != Vector(0, 0, 0)
				&& Global.BouncepadLocations[Global.LoadingElementIndex] != Null);
				Create Effect(All Players(All Teams), Orb, Global.EffectColors[4], Global.BouncepadLocations[Global.LoadingElementIndex], 1,
					Visible To);
			End;
			Wait(0.030, Ignore Condition);
			Global.LoadingElementIndex += 1;
			Loop;
		End;
	}
}

規則("In World Text Effects")
{
	事件
	{
		Ongoing - Global;
	}

	動作
	{
		"\"Heroes\" Text"
		If(Global.InWorldText[0] != Vector(0, 0, 0));
			Create In-World Text(All Players(All Teams), String("英雄"), Global.InWorldText[0], 3, Clip Against Surfaces, Visible To and String,
				Color(White), Default Visibility);
		End;
	}
}

規則("---------- FUNCTIONALITY ----------")
{
	事件
	{
		Ongoing - Global;
	}
}

規則("t1 Lava Death")
{
	事件
	{
		Ongoing - Each Player;
		All;
		All;
	}

	條件
	{
		Has Spawned(Event Player) == True;
		Is Alive(Event Player) == True;
		Hero Of(Event Player) != Global.HeroRoster[5];
		Event Player.CanDie == True;
		Hero Of(Event Player) != Global.EasterEggHeroes[Global.EasterEggMaxCount];
		Is Button Held(Event Player, Button(Interact)) != True;
	}

	動作
	{
		Wait(0.050 + Global.MaxObjectIndex[0] * 0.001, Ignore Condition);
		If(Hero Of(Event Player) == Hero(莫伊拉) && Is Using Ability 1(Event Player));
			Loop If Condition Is True;
		Else If(Hero Of(Event Player) == Hero(死神) && Is Using Ability 1(Event Player));
			Loop If Condition Is True;
		Else If(Hero Of(Event Player) == Hero(小美) && Is Using Ability 1(Event Player));
			Loop If Condition Is True;
		End;
		If(Is True For Any(Global.LavaLocations, Magnitude Of((Position Of(Event Player) + Vector(0, 0.300, 0) - Current Array Element)
			/ Vector(0.985, 0.999, 0.985)) < Global.LavaRadius[Current Array Index]));
			Kill(Event Player, Null);
		End;
		Loop If Condition Is True;
	}
}

規則("Respawning")
{
	事件
	{
		Player Died;
		All;
		All;
	}

	動作
	{
		If(Event Player.Victory == False);
			Event Player.Deaths += 1;
		End;
		Wait(0.400, Ignore Condition);
		Teleport(Event Player, Event Player.Respawn);
		Wait(0.400, Ignore Condition);
		Resurrect(Event Player);
		Clear Status(Event Player, Phased Out);
		If(Global.PlayerBehaviors[0] == 2);
			Set Status(Event Player, Null, Phased Out, 9999);
		End;
		If(Event Player.Respawn == Global.ZoneLocations[0]);
			If(Count Of(Filtered Array(Event Player.HeroesUnlocked, Current Array Element == True)) == 0);
				Event Player.Timer = 0;
				Event Player.Deaths = 0;
			End;
		End;
		Set Ability Cooldown(Event Player, Button(Ability 1), 0);
		Set Ability Cooldown(Event Player, Button(Ability 2), 0);
		Set Ability Cooldown(Event Player, Button(Secondary Fire), 0);
	}
}

規則("Checkpoint")
{
	事件
	{
		Ongoing - Each Player;
		All;
		All;
	}

	條件
	{
		Has Spawned(Event Player) == True;
		Hero Of(Event Player) != Global.HeroRoster[5];
		Event Player.CanDie == True;
		Is True For Any(Filtered Array(Global.CheckpointLocations, Current Array Element != Vector(0, 0, 0)), Distance Between(Position Of(
			Event Player), Current Array Element) < 1) == True;
		Hero Of(Event Player) != Global.EasterEggHeroes[Global.EasterEggMaxCount];
	}

	動作
	{
		For Player Variable(Event Player, LoopCounter, 0, Global.MaxObjectIndex[1] + 1, 1);
			If(Global.CheckpointLocations[Event Player.LoopCounter] != Vector(0, 0, 0)
				&& Global.CheckpointLocations[Event Player.LoopCounter] != 0);
				If(Event Player.Respawn != Global.CheckpointLocations[Event Player.LoopCounter]);
					If(Distance Between(Position Of(Event Player), Global.CheckpointLocations[Event Player.LoopCounter]) <= 1);
						Event Player.Respawn = Global.CheckpointLocations[Event Player.LoopCounter];
						Event Player.AlternativeRespawn = Global.CheckpointLocations[Event Player.LoopCounter];
						Play Effect(All Players(All Teams), Buff Explosion Sound, Color(White), Position Of(Event Player), 100);
						Small Message(Event Player, Custom String("Checkpoint!"));
						Break;
					End;
				End;
			End;
		End;
	}
}

規則("Zones")
{
	事件
	{
		Ongoing - Each Player;
		All;
		All;
	}

	條件
	{
		Has Spawned(Event Player) == True;
		Hero Of(Event Player) != Global.HeroRoster[5];
		Event Player.CanDie == True;
		Hero Of(Event Player) != Global.EasterEggHeroes[Global.EasterEggMaxCount];
	}

	動作
	{
		If(Global.ZoneLocations[1] != Vector(0, 0, 0));
			If(Event Player.Respawn != Global.ZoneLocations[1] && Distance Between(Position Of(Event Player), Global.ZoneLocations[1]) <= 2);
				Event Player.Respawn = Global.ZoneLocations[1];
				Small Message(Event Player, Custom String("{0}!", String("檢查點")));
				Play Effect(All Players(All Teams), Buff Explosion Sound, Color(White), Position Of(Event Player), 100);
				If(Event Player.ZonesReached[0] == False);
					Event Player.ZonesReached[0] = True;
					Big Message(All Players(All Teams), Custom String(" \r\n{0} {1} {2}", Event Player, String("抵達"), Global.ZoneText[1]));
					Call Subroutine(UpdateCount);
				End;
			End;
		End;
		If(Global.ZoneLocations[2] != Vector(0, 0, 0));
			If(Event Player.Respawn != Global.ZoneLocations[2] && Distance Between(Position Of(Event Player), Global.ZoneLocations[2]) <= 2);
				Event Player.Respawn = Global.ZoneLocations[2];
				Event Player.AlternativeRespawn = Global.ZoneLocations[2];
				Small Message(Event Player, Custom String("{0}!", String("檢查點")));
				Play Effect(All Players(All Teams), Buff Explosion Sound, Color(White), Position Of(Event Player), 100);
				If(Event Player.ZonesReached[1] == False);
					Event Player.ZonesReached[1] = True;
					Big Message(All Players(All Teams), Custom String(" \r\n{0} {1} {2}", Event Player, String("抵達"), Global.ZoneText[2]));
					Call Subroutine(UpdateCount);
				End;
			End;
		End;
		If(Global.ZoneLocations[3] != Vector(0, 0, 0));
			If(Event Player.Respawn != Global.ZoneLocations[3] && Distance Between(Position Of(Event Player), Global.ZoneLocations[3]) <= 2);
				Event Player.Respawn = Global.ZoneLocations[3];
				Event Player.AlternativeRespawn = Global.ZoneLocations[3];
				Small Message(Event Player, Custom String("{0}!", String("檢查點")));
				Play Effect(All Players(All Teams), Buff Explosion Sound, Color(White), Position Of(Event Player), 100);
				If(Event Player.ZonesReached[2] == False);
					Event Player.ZonesReached[2] = True;
					Big Message(All Players(All Teams), Custom String(" \r\n{0} {1} {2}", Event Player, String("抵達"), Global.ZoneText[3]));
					Call Subroutine(UpdateCount);
				End;
			End;
		End;
		If(Global.ZoneLocations[4] != Vector(0, 0, 0));
			If(Event Player.Respawn != Global.ZoneLocations[4] && Distance Between(Position Of(Event Player), Global.ZoneLocations[4]) <= 2);
				Event Player.Respawn = Global.ZoneLocations[4];
				Event Player.AlternativeRespawn = Global.ZoneLocations[4];
				Small Message(Event Player, Custom String("{0}!", String("檢查點")));
				Play Effect(All Players(All Teams), Buff Explosion Sound, Color(White), Position Of(Event Player), 100);
				If(Event Player.ZonesReached[3] == False);
					Event Player.ZonesReached[3] = True;
					Big Message(All Players(All Teams), Custom String(" \r\n{0} {1} {2}", Event Player, String("抵達"), Global.ZoneText[4]));
					Call Subroutine(UpdateCount);
				End;
			End;
		End;
		Wait(0.100, Ignore Condition);
		Loop If Condition Is True;
	}
}

規則("Hero Swap")
{
	事件
	{
		Ongoing - Each Player;
		All;
		All;
	}

	條件
	{
		Is Button Held(Event Player, Button(Interact)) == True;
		Is True For Any(Filtered Array(Global.HeroLocations, Current Array Element != Vector(0, 0, 0)), Distance Between(Eye Position(
			Event Player), Current Array Element) < 1.500) == True;
	}

	動作
	{
		For Player Variable(Event Player, LoopCounter, 0, Global.MaxObjectIndex[4] + 1, 1);
			If(Global.HeroLocations[Event Player.LoopCounter] != Vector(0, 0, 0) && Global.HeroLocations[Event Player.LoopCounter] != 0);
				If(Event Player.HeroesUnlocked[Event Player.LoopCounter - 1] == True || Event Player.LoopCounter == 0);
					If(Distance Between(Eye Position(Event Player), Global.HeroLocations[Event Player.LoopCounter]) <= 1.500);
						Start Forcing Player To Be Hero(Event Player, Global.HeroRoster[Event Player.LoopCounter]);
						If(Event Player.Respawn == Global.ZoneLocations[1]);
							Event Player.AlternativeRespawn = Null;
						End;
						Break;
					End;
				End;
			End;
		End;
	}
}

規則("Hero Swap Tip")
{
	事件
	{
		Ongoing - Each Player;
		All;
		All;
	}

	條件
	{
		Has Spawned(Event Player) == True;
		Is True For Any(Filtered Array(Global.HeroLocations, Current Array Element != Vector(0, 0, 0)), Distance Between(Eye Position(
			Event Player), Current Array Element) < 1.500) == True;
	}

	動作
	{
		Wait(2, Abort When False);
		Small Message(Event Player, Custom String("Press [Interact]"));
	}
}

規則("Hero Unlock")
{
	事件
	{
		Ongoing - Each Player;
		All;
		All;
	}

	條件
	{
		Has Spawned(Event Player) == True;
		Event Player.HeroCount < Global.MaxHeroes;
		Hero Of(Event Player) != Global.HeroRoster[5];
		Is True For Any(Filtered Array(Global.UnlockLocations, Current Array Element != Vector(0, 0, 0)), Distance Between(Eye Position(
			Event Player), Current Array Element) < 1.500) == True;
		Hero Of(Event Player) != Global.EasterEggHeroes[Global.EasterEggMaxCount];
	}

	動作
	{
		For Player Variable(Event Player, LoopCounter, 0, Global.MaxObjectIndex[5] + 1, 1);
			If(Global.UnlockLocations[Event Player.LoopCounter] != Vector(0, 0, 0) && Global.UnlockLocations[Event Player.LoopCounter] != 0);
				If(Event Player.HeroesUnlocked[Event Player.LoopCounter] == False);
					If(Distance Between(Eye Position(Event Player), Global.UnlockLocations[Event Player.LoopCounter]) <= 1.500);
						Big Message(All Players(All Teams), Custom String(" \r\n{0} {1} {2}", Event Player, String("得到解鎖"), Hero Icon String(
							Global.HeroRoster[Event Player.LoopCounter + 1])));
						Event Player.HeroesUnlocked[Event Player.LoopCounter] = True;
						Play Effect(All Players(All Teams), Buff Explosion Sound, Color(White), Position Of(Event Player), 100);
						Call Subroutine(UpdateCount);
						Break;
					End;
				End;
			End;
		End;
	}
}

規則("Portal Usage")
{
	事件
	{
		Ongoing - Each Player;
		All;
		All;
	}

	條件
	{
		Is Button Held(Event Player, Button(Interact)) == True;
		Is True For Any(Filtered Array(Global.PortalLocations, Current Array Element != Vector(0, 0, 0)), Distance Between(Eye Position(
			Event Player), Current Array Element) < 1.500) == True;
	}

	動作
	{
		For Player Variable(Event Player, LoopCounter, 0, Global.MaxObjectIndex[3] + 1, 1);
			If(Event Player.PortalUnlocked[Event Player.LoopCounter] == True);
				If(Global.PortalLocations[Event Player.LoopCounter] != Vector(0, 0, 0) && Global.PortalLocations[Event Player.LoopCounter] != 0);
					If(Global.PortalDestinations[Event Player.LoopCounter] != Vector(0, 0, 0)
						&& Global.PortalDestinations[Event Player.LoopCounter] != 0);
						If(Distance Between(Eye Position(Event Player), Global.PortalLocations[Event Player.LoopCounter]) <= 1.500);
							Teleport(Event Player, Global.PortalDestinations[Event Player.LoopCounter]);
							Break;
						End;
					End;
				End;
			End;
		End;
	}
}

規則("Unlocking a Portal (reach the destination)")
{
	事件
	{
		Ongoing - Each Player;
		All;
		All;
	}

	條件
	{
		Hero Of(Event Player) != Global.HeroRoster[5];
		Is True For Any(Filtered Array(Global.PortalDestinations, Current Array Element != Vector(0, 0, 0)), Distance Between(
			Current Array Element, Position Of(Event Player)) < 2) == True;
		Hero Of(Event Player) != Global.EasterEggHeroes[Global.EasterEggMaxCount];
	}

	動作
	{
		For Player Variable(Event Player, LoopCounter, 0, Global.MaxObjectIndex[3] + 1, 1);
			If(Global.PortalDestinations[Event Player.LoopCounter] != Vector(0, 0, 0)
				&& Global.PortalDestinations[Event Player.LoopCounter] != 0);
				If(Event Player.PortalUnlocked[Event Player.LoopCounter] == False);
					If(Distance Between(Position Of(Event Player), Global.PortalDestinations[Event Player.LoopCounter]) <= 2);
						Event Player.PortalUnlocked[Event Player.LoopCounter] = True;
					End;
				End;
			End;
		End;
	}
}

規則("Teleport Back to a Spawn Point")
{
	事件
	{
		Ongoing - Each Player;
		All;
		All;
	}

	條件
	{
		Is Button Held(Event Player, Button(Ultimate)) == True;
		Hero Of(Event Player) != Global.HeroRoster[5];
		Hero Of(Event Player) != Global.EasterEggHeroes[Global.EasterEggMaxCount];
	}

	動作
	{
		If(Distance Between(Position Of(Event Player), Event Player.Respawn) > 1);
			Teleport(Event Player, Event Player.Respawn);
			Wait(0.050, Ignore Condition);
			Play Effect(All Players(All Teams), Buff Explosion Sound, Color(White), Position Of(Event Player), 100);
		Else;
			If(Event Player.AlternativeRespawn != Null);
				If(Distance Between(Position Of(Event Player), Event Player.AlternativeRespawn) > 1);
					Teleport(Event Player, Event Player.AlternativeRespawn);
					Event Player.Respawn = Event Player.AlternativeRespawn;
				Else;
					If(Event Player.ZonesReached[0] == True);
						Teleport(Event Player, Global.ZoneLocations[1]);
					End;
				End;
			End;
		End;
	}
}

規則("Bouncepad Interaction")
{
	事件
	{
		Ongoing - Each Player;
		All;
		All;
	}

	條件
	{
		Is True For Any(Filtered Array(Global.BouncepadLocations, Current Array Element != Vector(0, 0, 0)), Distance Between(Position Of(
			Event Player), Current Array Element) < 1.500) == True;
	}

	動作
	{
		For Player Variable(Event Player, LoopCounter, 0, Global.MaxObjectIndex[7] + 1, 1);
			If(Global.BouncepadLocations[Event Player.LoopCounter] != Vector(0, 0, 0)
				&& Global.BouncepadLocations[Event Player.LoopCounter] != 0);
				If(Distance Between(Position Of(Event Player), Global.BouncepadLocations[Event Player.LoopCounter]) <= 1.500);
					Apply Impulse(Event Player, Vector(0, 1, 0), Global.BouncepadStrength[Event Player.LoopCounter], To World, Cancel Contrary Motion);
					Play Effect(All Players(All Teams), Debuff Impact Sound, Color(White), Event Player, 75);
					Break;
				End;
			End;
		End;
	}
}

規則("Victory")
{
	事件
	{
		Ongoing - Each Player;
		All;
		All;
	}

	條件
	{
		Event Player.Victory == False;
		Event Player.ZoneCount == Global.MaxZones;
		Event Player.HeroCount == Global.MaxHeroes;
	}

	動作
	{
		Event Player.Victory = True;
		If(Event Player.SpeedRunMode == True);
			Destroy HUD Text(Event Player.MyHUD[1]);
			Create HUD Text(Event Player, Custom String("Finished"), Custom String("Deaths: {0}", Event Player.Deaths), Custom String(
				"Time: {0}:{1}", Round To Integer(Event Player.Timer / 60, Down), Round To Integer(Event Player.Timer % 60, Down)), Top, 1,
				Color(Purple), Color(Green), Color(Green), Visible To and String, Default Visibility);
			Event Player.MyHUD[0] = Last Text ID;
			Big Message(All Players(All Teams), Custom String(" \r\n{0} FINISHED IN {1}:{2}!", Event Player, Round To Integer(
				Event Player.Timer / 60, Down), Round To Integer(Event Player.Timer % 60, Down)));
		Else;
			Big Message(All Players(All Teams), Custom String(" \r\n{0} {1}!", Event Player, String("已完成")));
		End;
	}
}

規則("Secret Hero")
{
	事件
	{
		Ongoing - Each Player;
		All;
		All;
	}

	條件
	{
		Has Spawned(Event Player) == True;
		Global.HeroLocations[5] != Vector(0, 0, 0);
		Distance Between(Eye Position(Event Player), Global.HeroLocations[5]) <= 1.500;
		Hero Of(Event Player) != Global.HeroRoster[5];
		Hero Of(Event Player) != Global.EasterEggHeroes[Global.EasterEggMaxCount];
	}

	動作
	{
		Start Forcing Player To Be Hero(Event Player, Global.HeroRoster[5]);
		If(Event Player.FoundSecretHero == False);
			Big Message(All Players(All Teams), Custom String(" \r\n{0} {1} {2}", Event Player, String("被發現"), Hero Icon String(
				Global.HeroRoster[5])));
		End;
		Wait(0.250, Ignore Condition);
		Teleport(Event Player, Global.ZoneLocations[1]);
		Event Player.FoundSecretHero = True;
	}
}

規則("Secret Hero Jump")
{
	事件
	{
		Ongoing - Each Player;
		All;
		All;
	}

	條件
	{
		Is Button Held(Event Player, Button(Jump)) == True;
		Hero Of(Event Player) == Global.HeroRoster[5];
	}

	動作
	{
		Apply Impulse(Event Player, Vector(0, 1, 0), 30, To World, Cancel Contrary Motion);
		Play Effect(All Players(All Teams), Debuff Impact Sound, Color(White), Event Player, 75);
	}
}

規則("Secret Hero Speed")
{
	事件
	{
		Ongoing - Each Player;
		All;
		All;
	}

	條件
	{
		Hero Of(Event Player) == Global.HeroRoster[5];
	}

	動作
	{
		Set Move Speed(Event Player, 400);
		Wait(0.250, Ignore Condition);
		Loop If Condition Is True;
		Set Move Speed(Event Player, 100);
	}
}

規則("Self-Restart")
{
	事件
	{
		Ongoing - Each Player;
		All;
		All;
	}

	條件
	{
		Is Button Held(Event Player, Button(Ultimate)) == True;
		Hero Of(Event Player) != Global.EasterEggHeroes[Global.EasterEggMaxCount];
	}

	動作
	{
		Wait(0.750, Abort When False);
		Small Message(Event Player, Custom String("Resetting Progress... 3"));
		Wait(0.750, Abort When False);
		Small Message(Event Player, Custom String("Resetting Progress... 2"));
		Wait(0.750, Abort When False);
		Small Message(Event Player, Custom String("Resetting Progress... 1"));
		Wait(0.750, Abort When False);
		Small Message(Event Player, Custom String("Progress Reset!"));
		Wait(0.050, Ignore Condition);
		Call Subroutine(ResetProgress);
	}
}

規則("Speed Run Toggle")
{
	事件
	{
		Ongoing - Each Player;
		All;
		All;
	}

	條件
	{
		Is Button Held(Event Player, Button(Interact)) == True;
		Global.SpeedrunLocation != Vector(0, 0, 0);
		Distance Between(Eye Position(Event Player), Global.SpeedrunLocation) < 1.500;
	}

	動作
	{
		If(Event Player.SpeedRunMode == False);
			Wait(0.250, Ignore Condition);
			If(!Is Button Held(Event Player, Button(Interact)));
				Small Message(Event Player, Custom String(
					"WARNING: Enabling speed run will reset all progress\r\n        Hold [Interact] to enable speed run mode"));
			End;
			Wait(1, Abort When False);
			Event Player.SpeedRunMode = True;
			Event Player.Victory = False;
			Call Subroutine(ResetProgress);
			Create HUD Text(Event Player, Custom String("Speed Run"), Custom String("Deaths: {0}", Event Player.Deaths), Custom String(
				"Time: {0}:{1}", Round To Integer(Event Player.Timer / 60, Down), Round To Integer(Event Player.Timer % 60, Down)), Top, 1,
				Color(Orange), Color(Red), Color(Orange), Visible To and String, Default Visibility);
			Event Player.MyHUD[1] = Last Text ID;
			Small Message(Event Player, Custom String("Speed Run Mode Activated"));
		Else;
			Destroy HUD Text(Event Player.MyHUD[0]);
			Destroy HUD Text(Event Player.MyHUD[1]);
			Event Player.SpeedRunMode = False;
			Small Message(Event Player, Custom String("Speed Run Mode Disabled"));
		End;
	}
}

規則("Speed Run Timer Increase")
{
	事件
	{
		Ongoing - Each Player;
		All;
		All;
	}

	條件
	{
		Event Player.SpeedRunMode == True;
		Event Player.Victory == False;
		Distance Between(Position Of(Event Player), Global.ZoneLocations[0]) > 1;
	}

	動作
	{
		Wait(0.992, Abort When False);
		Event Player.Timer += 1;
		Loop;
	}
}

規則("Tutorial Mode Toggle")
{
	事件
	{
		Ongoing - Each Player;
		All;
		All;
	}

	條件
	{
		Event Player.TutorialMode == False;
		Is Button Held(Event Player, Button(Reload)) == True;
	}

	動作
	{
		Wait(0.250, Abort When False);
		Small Message(Event Player, Custom String("Starting Tutorial Mode... 3"));
		Wait(0.750, Abort When False);
		Small Message(Event Player, Custom String("Starting Tutorial Mode... 2"));
		Wait(0.750, Abort When False);
		Small Message(Event Player, Custom String("Starting Tutorial Mode... 1"));
		Wait(0.750, Abort When False);
		Small Message(Event Player, Custom String("Tutorial Mode Activated!"));
		Event Player.TutorialMode = True;
		If(Is Button Held(Event Player, Button(Interact)));
			Event Player.HeroesUnlocked = Array(True, True, True, True);
			Event Player.ZonesReached = Array(True, True, True, True);
			Event Player.PortalUnlocked = Array(True, True, True, True, True, True, True, True, True, True, True, True, True, True, True);
			Event Player.ZoneCount = 4;
			Event Player.HeroCount = 4;
		End;
	}
}

規則("Tutorial Mode Set Checkpoint")
{
	事件
	{
		Ongoing - Each Player;
		All;
		All;
	}

	條件
	{
		Event Player.TutorialMode == True;
		Is Button Held(Event Player, Button(Reload)) == True;
		Distance Between(Position Of(Event Player), Event Player.Respawn) > 2;
		Vertical Speed Of(Event Player) == 0;
		Horizontal Speed Of(Event Player) == 0;
	}

	動作
	{
		Wait(0.500, Abort When False);
		Small Message(Event Player, Custom String("Checkpoint Set!"));
		Event Player.Respawn = Position Of(Event Player);
		Event Player.AlternativeRespawn = Position Of(Event Player);
		Play Effect(All Players(All Teams), Buff Explosion Sound, Color(White), Position Of(Event Player), 100);
	}
}

規則("Reset Progress | Subroutine")
{
	事件
	{
		Subroutine;
		ResetProgress;
	}

	動作
	{
		Set Facing(Event Player, Global.SpawnFaceDirection, To World);
		Start Forcing Player To Be Hero(Event Player, Global.HeroRoster[0]);
		If(Event Player.SpeedRunMode == True && Event Player.Victory == True);
			Create HUD Text(Event Player, Custom String("Speed Run"), Custom String("Deaths: {0}", Event Player.Deaths), Custom String(
				"Time: {0}:{1}", Round To Integer(Event Player.Timer / 60, Down), Round To Integer(Event Player.Timer % 60, Down)), Top, 1,
				Color(Orange), Color(Red), Color(Orange), Visible To and String, Default Visibility);
			Event Player.MyHUD[1] = Last Text ID;
		End;
		Destroy HUD Text(Event Player.MyHUD[0]);
		Event Player.PortalUnlocked = Global.PortalUnlockDefaults;
		Event Player.Victory = False;
		Event Player.ZonesReached[0] = False;
		Event Player.ZonesReached[1] = False;
		Event Player.ZonesReached[2] = False;
		Event Player.ZonesReached[3] = False;
		Event Player.HeroesUnlocked[0] = False;
		Event Player.HeroesUnlocked[1] = False;
		Event Player.HeroesUnlocked[2] = False;
		Event Player.HeroesUnlocked[3] = False;
		If(Global.ZoneLocations[0] != Vector(0, 0, 0));
			Event Player.Respawn = Global.ZoneLocations[0];
		End;
		Event Player.Deaths = 0;
		Event Player.Timer = 0;
		Event Player.ZoneCount = 0;
		Event Player.HeroCount = 0;
		Event Player.AlternativeRespawn = Null;
		Teleport(Event Player, Event Player.Respawn);
		Wait(0.100, Ignore Condition);
		Play Effect(All Players(All Teams), Ring Explosion Sound, Color(White), Position Of(Event Player), 100);
		Event Player.TutorialMode = False;
		Event Player.FoundSecretHero = False;
		Event Player.EasterEggsFound = Empty Array;
		Event Player.EasterEggsFound[Global.EasterEggMaxCount] = False;
		Event Player.EasterEggCount = False;
	}
}

規則("Update Count | Subroutine")
{
	事件
	{
		Subroutine;
		UpdateCount;
	}

	動作
	{
		Event Player.ZoneCount = Count Of(Filtered Array(Event Player.ZonesReached, Current Array Element == True));
		Event Player.HeroCount = Count Of(Filtered Array(Event Player.HeroesUnlocked, Current Array Element == True));
		If(Event Player.HeroCount > Global.MaxHeroes);
			Event Player.HeroCount = Global.MaxHeroes;
		End;
	}
}

規則("Match Time Initiation")
{
	事件
	{
		Ongoing - Global;
	}

	條件
	{
		Is Game In Progress == True;
		Is Assembling Heroes == False;
	}

	動作
	{
		Create HUD Text(All Players(All Teams), Null, Null, Custom String("Match Time - {0}:{1}", Round To Integer(Global.MatchTime / 60,
			Down), Round To Integer(Global.MatchTime % 60, Down)), Top, -10, Color(White), Color(White), Color(White),
			Visible To and String, Default Visibility);
		Set Match Time(3599);
		Wait(5, Ignore Condition);
		Pause Match Time;
	}
}

規則("Match Time Warning")
{
	事件
	{
		Ongoing - Global;
	}

	條件
	{
		"10 Min Warning"
		Global.MatchTime < 600;
	}

	動作
	{
		Big Message(All Players(All Teams), Custom String("10 Minute Warning"));
		Wait(300, Ignore Condition);
		Big Message(All Players(All Teams), Custom String("5 Minute Warning"));
		Wait(240, Ignore Condition);
		Big Message(All Players(All Teams), Custom String("1 Minute Warning"));
		Wait(60, Ignore Condition);
		Big Message(All Players(All Teams), Custom String("Match Time Is Up!"));
		Enable Built-In Game Mode Completion;
		Enable Game Mode In-World UI(All Players(All Teams));
		Enable Game Mode HUD(All Players(All Teams));
		Set Match Time(0);
		Wait(0.250, Ignore Condition);
		Unpause Match Time;
	}
}

規則("Match Time")
{
	事件
	{
		Ongoing - Global;
	}

	動作
	{
		Wait(0.998, Ignore Condition);
		Global.MatchTime -= 1;
		If(Global.MatchTime <= 0);
			Abort;
		End;
		Loop;
	}
}

規則("Skip Assembling Heroes")
{
	事件
	{
		Ongoing - Global;
	}

	條件
	{
		Is Assembling Heroes == True;
	}

	動作
	{
		Set Match Time(1);
	}
}

規則("Anti Crash Activation")
{
	事件
	{
		Ongoing - Global;
	}

	條件
	{
		Global.AntiCrash == False;
		Server Load > 200;
	}

	動作
	{
		Wait(1, Abort When False);
		Small Message(All Players(All Teams), Custom String("Anti crash system activated"));
		Set Slow Motion(10);
		Global.AntiCrash = True;
	}
}

規則("Anti Crash Deactivation")
{
	事件
	{
		Ongoing - Global;
	}

	條件
	{
		Global.AntiCrash == True;
		Server Load < 175;
	}

	動作
	{
		Set Slow Motion(100);
		Global.AntiCrash = False;
	}
}

規則("Zenyatta Parkour")
{
	事件
	{
		Ongoing - Each Player;
		All;
		禪亞塔;
	}

	條件
	{
		Is Meleeing(Event Player) == True;
	}

	動作
	{
		Set Ability Cooldown(Event Player, Button(Melee), 0.600);
		Wait Until(!Is In Line of Sight(Eye Position(Event Player), Eye Position(Event Player) + 2 * Facing Direction Of(Event Player),
			Barriers Do Not Block LOS), 0.160);
		Abort If(Is In Line of Sight(Eye Position(Event Player), Eye Position(Event Player) + 2 * Facing Direction Of(Event Player),
			Barriers Do Not Block LOS));
		Apply Impulse(Event Player, Velocity Of(Event Player), -0.001, To World, Cancel Contrary Motion XYZ);
		Apply Impulse(Event Player, Vector(0, 0.870, 0) + Direction From Angles(Horizontal Facing Angle Of(Event Player) + 180,
			Vertical Angle From Direction(Ray Cast Hit Normal(Eye Position(Event Player), Eye Position(Event Player)
			+ 2.100 * Facing Direction Of(Event Player), Null, Null, False))), 12, To World, Cancel Contrary Motion XYZ);
		Play Effect(All Players(All Teams), Ring Explosion, Random Value In Array(Array(Color(Red), Color(Orange), Color(Yellow), Color(
			Turquoise), Color(Blue), Color(Violet))), Ray Cast Hit Position(Eye Position(Event Player), Eye Position(Event Player)
			+ 2 * Facing Direction Of(Event Player), Null, Null, False) - 0.100 * Facing Direction Of(Event Player), 1);
	}
}

規則("Primary Pulse")
{
	事件
	{
		Ongoing - Each Player;
		All;
		安娜;
	}

	條件
	{
		(Is Firing Primary(Event Player) == True && Is Firing Secondary(Event Player) == True) == True;
		Has Status(Event Player, Rooted) == False;
	}

	動作
	{
		Set Gravity(Event Player, 0);
		Apply Impulse(Event Player, Facing Direction Of(Event Player), 13, To World, Cancel Contrary Motion);
		Wait(0.060, Ignore Condition);
		Set Gravity(Event Player, 100);
	}
}

規則("No Collision")
{
	事件
	{
		Ongoing - Each Player;
		All;
		All;
	}

	條件
	{
		Distance Between(Position Of(Event Player), Vector(-272.900, 2.600, 52.400)) <= 1.700;
	}

	動作
	{
		Disable Movement Collision With Environment(Event Player, False);
		Wait(0.032, Ignore Condition);
		Loop If Condition Is True;
		Enable Movement Collision With Environment(Event Player);
	}
}

規則("Text^")
{
	事件
	{
		Ongoing - Global;
	}

	動作
	{
		Create In-World Text(All Players(All Teams), Custom String("You can go through here"), Vector(-272.970, 2.630, 52.440), 1.500,
			Clip Against Surfaces, Visible To Position and String, Color(White), Default Visibility);
	}
}

規則("Mercy")
{
	事件
	{
		Ongoing - Each Player;
		All;
		慈悲;
	}

	條件
	{
		Is Button Held(Event Player, Button(Ability 2)) == True;
	}

	動作
	{
		Disable Movement Collision With Environment(Event Player, False);
		Wait(0.032, Ignore Condition);
		Loop If Condition Is True;
		Enable Movement Collision With Environment(Event Player);
	}
}

規則("Perma Mercy Flying")
{
	事件
	{
		Ongoing - Each Player;
		All;
		All;
	}

	條件
	{
		Hero Of(Event Player) == Hero(慈悲);
		Is Using Ultimate(Event Player) == False;
	}

	動作
	{
		Set Ultimate Charge(Event Player, 100);
		Press Button(Event Player, Button(Ultimate));
		Wait(0.016, Ignore Condition);
		Loop If Condition Is True;
	}
}

規則("Text")
{
	事件
	{
		Ongoing - Global;
	}

	動作
	{
		Create In-World Text(Players On Hero(Hero(慈悲), All Teams), Custom String(
			"Thanks for Playing this and other map that i made\r\nIt's been a fun 9 months in the community"), Vector(406, 35, -64.500),
			1.500, Clip Against Surfaces, Visible To Position and String, Color(Gray), Default Visibility);
		Create In-World Text(Players On Hero(Hero(慈悲), All Teams), Custom String(
			"I found joy in making maps, but i'm afraid\r\nthis might be the last one"), Vector(406, 32, -64.500), 1.500,
			Clip Against Surfaces, Visible To Position and String, Color(Gray), Default Visibility);
		Create In-World Text(Players On Hero(Hero(慈悲), All Teams), Custom String(
			"I dont know wether or not im still gonna be able/allowed\r\nto play, but incase of not"), Vector(406, 29, -64.500), 1.500,
			Clip Against Surfaces, Visible To Position and String, Color(Gray), Default Visibility);
		Create In-World Text(Players On Hero(Hero(慈悲), All Teams), Custom String(
			"I left my Ideas and Concept in My Gdocs\r\n pinned in my channel"), Vector(406, 26, -64.500), 1.500, Clip Against Surfaces,
			Visible To Position and String, Color(Sky Blue), Default Visibility);
	}
}

規則("---------- ABILITY UNLOCK ----------")
{
	事件
	{
		Ongoing - Global;
	}
}

規則("[DATA] Default Abilities")
{
	事件
	{
		Ongoing - Each Player;
		All;
		All;
	}

	條件
	{
		Event Player.Respawn == Global.ZoneLocations[False];
	}

	動作
	{
		Abort If(Event Player.ZoneCount);
		"Unlocked abilities for each hero corresponding to HeroRoster.  \r\n Order is: {Primary Fire, Secondary Fire, Ability 1, Ability 2, Jump, Crouch}"
		Event Player.EnabledAbilities[0] = Array(True, False, False, False, True, True);
		Event Player.EnabledAbilities[1] = Array(True, True, False, False, True, False);
		Event Player.EnabledAbilities[2] = Array(True, True, False, False, True, True);
		Event Player.EnabledAbilities[3] = Array(True, False, True, False, True, True);
		Event Player.EnabledAbilities[4] = Array(True, False, False, False, True, True);
		Event Player.EnabledAbilities[5] = Array(True, True, True, False, True, True);
		Event Player.EnabledAbilities[6] = Array(True, True, True, False, True, True);
		"////////////////////////////////"
		Call Subroutine(UpdateUnlockedAbilities);
		Wait(0.016, Ignore Condition);
		Event Player.Respawn += Vector(False, 0.001, False);
	}
}

規則("[DATA] Ability Unlock Data")
{
	事件
	{
		Ongoing - Global;
	}

	動作
	{
		"Data for each ability unlock.\r\n Data order is: {Location, HeroRoster Index, Ability Index}\r\n  Ability order is: {Primary Fire, Secondary Fire, Ability 1, Ability 2, Jump, Crouch}"
		停用 Continue;
		Global.AbilityUnlockData[0] = Array(Vector(309.952, -14.513, 15.423), 0, 1);
		Global.AbilityUnlockData[1] = Array(Vector(346, -23, -23.800), 1, 5);
		Global.AbilityUnlockData[2] = Array(Vector(-26.470, 68.524, -179.800), 3, 3);
		Global.AbilityUnlockData[4] = Array(Vector(120.900, 61.950, -143.200), 4, 1);
	}
}

規則("Effect Creation")
{
	事件
	{
		Ongoing - Global;
	}

	條件
	{
		Global.LoadingObjectIndex == 8;
	}

	動作
	{
		Create Effect(Filtered Array(Append To Array(Players On Hero(Evaluate Once(
			Global.HeroRoster[Global.AbilityUnlockData[Global.LoadingElementIndex][True]]), All Teams), Null),
			!Current Array Element.EnabledAbilities[Evaluate Once(Global.AbilityUnlockData[Global.LoadingElementIndex][True])
			][Evaluate Once(Last Of(Global.AbilityUnlockData[Global.LoadingElementIndex]))]), Sparkles, Color(White), First Of(
			Global.AbilityUnlockData[Global.LoadingElementIndex]), 1, Visible To);
		Create In-World Text(Filtered Array(Append To Array(Players On Hero(Evaluate Once(
			Global.HeroRoster[Global.AbilityUnlockData[Global.LoadingElementIndex][True]]), All Teams), Null),
			!Current Array Element.EnabledAbilities[Evaluate Once(Global.AbilityUnlockData[Global.LoadingElementIndex][True])
			][Evaluate Once(Last Of(Global.AbilityUnlockData[Global.LoadingElementIndex]))]), Ability Icon String(
			Global.HeroRoster[Global.AbilityUnlockData[Global.LoadingElementIndex][True]], Array(Button(Primary Fire), Button(
			Secondary Fire), Button(Ability 1), Button(Ability 2), Button(Jump), Button(Crouch))[Last Of(
			Global.AbilityUnlockData[Global.LoadingElementIndex])]), First Of(Global.AbilityUnlockData[Global.LoadingElementIndex]), 2,
			Clip Against Surfaces, Visible To, Color(White), Default Visibility);
		Wait(0.016, Ignore Condition);
		Global.LoadingElementIndex += True;
		Loop If(Global.LoadingElementIndex < Count Of(Global.AbilityUnlockData));
	}
}

規則("Ability Unlock")
{
	事件
	{
		Ongoing - Each Player;
		All;
		All;
	}

	條件
	{
		Has Spawned(Event Player) == True;
		Is True For Any(Global.AbilityUnlockData, Distance Between(Eye Position(Event Player), First Of(Current Array Element))
			<= 1.500 && Hero Of(Event Player)
			== Global.HeroRoster[Current Array Element[True]] && !Event Player.EnabledAbilities[Current Array Element[True]][Last Of(
			Current Array Element)]) == True;
	}

	動作
	{
		Event Player.LoopCounter = First Of(Filtered Array(Global.AbilityUnlockData, Distance Between(Eye Position(Event Player), First Of(
			Current Array Element)) <= 1.500 && Hero Of(Event Player)
			== Global.HeroRoster[Current Array Element[True]] && !Event Player.EnabledAbilities[Current Array Element[True]][Last Of(
			Current Array Element)]));
		Event Player.EnabledAbilities[Event Player.LoopCounter[True]] = Append To Array(Append To Array(Array Slice(
			Event Player.EnabledAbilities[Event Player.LoopCounter[True]], 0, Last Of(Event Player.LoopCounter)), True), Array Slice(
			Event Player.EnabledAbilities[Event Player.LoopCounter[True]], Last Of(Event Player.LoopCounter) + True, 6));
		Play Effect(All Players(All Teams), Buff Explosion Sound, Color(White), Position Of(Event Player), 100);
		Small Message(Event Player, Custom String("{0} {1}!", Ability Icon String(Global.HeroRoster[Event Player.LoopCounter[True]], Array(
			Button(Primary Fire), Button(Secondary Fire), Button(Ability 1), Button(Ability 2), Button(Jump), Button(Crouch))[Last Of(
			Event Player.LoopCounter)]), String("得到解鎖")));
		Wait(0.016, Ignore Condition);
		Call Subroutine(UpdateUnlockedAbilities);
	}
}

規則("Changed Hero")
{
	事件
	{
		Ongoing - Each Player;
		All;
		All;
	}

	條件
	{
		Event Player.Respawn == Global.ZoneLocations[False];
	}

	動作
	{
		Call Subroutine(UpdateUnlockedAbilities);
		Wait Until(Hero Of(Event Player) != Evaluate Once(Hero Of(Event Player)), 99999);
		Loop;
	}
}

規則("Update Unlocked Abilities | Subroutine")
{
	事件
	{
		Subroutine;
		UpdateUnlockedAbilities;
	}

	動作
	{
		Event Player.LoopCounter = Event Player.EnabledAbilities[Index Of Array Value(Global.HeroRoster, Hero Of(Event Player))];
		Set Primary Fire Enabled(Event Player, First Of(Event Player.LoopCounter));
		Set Secondary Fire Enabled(Event Player, Event Player.LoopCounter[True]);
		Set Ability 1 Enabled(Event Player, Event Player.LoopCounter[2]);
		Set Ability 2 Enabled(Event Player, Event Player.LoopCounter[3]);
		Set Jump Enabled(Event Player, Event Player.LoopCounter[4]);
		Set Crouch Enabled(Event Player, Last Of(Event Player.LoopCounter));
	}
}

規則("---------- EASTER EGGS ----------")
{
	事件
	{
		Ongoing - Global;
	}
}

規則("Data")
{
	事件
	{
		Ongoing - Global;
	}

	動作
	{
		"Total Number of Easter Eggs"
		Global.EasterEggMaxCount = 5;
		"Easter Egg Hero"
		Global.EasterEggHeroes[Global.EasterEggMaxCount] = Hero(慈悲);
		"Hero Swap Location"
		Global.EasterEggLocations[Global.EasterEggMaxCount] = Vector(358.690, 24.349, -51.654);
		"Hero Swap Color"
		Global.EasterEggColors[Global.EasterEggMaxCount] = Global.EffectColors[10];
		"Heroes Used to Find Easter Eggs"
		Global.EasterEggHeroes[0] = Global.HeroRoster[0];
		Global.EasterEggHeroes[1] = Global.HeroRoster[1];
		Global.EasterEggHeroes[2] = Global.HeroRoster[2];
		Global.EasterEggHeroes[3] = Global.HeroRoster[3];
		Global.EasterEggHeroes[4] = Global.HeroRoster[4];
		"Easter Egg Locations"
		Global.EasterEggLocations[0] = Vector(351.734, -23.272, 20.770);
		Global.EasterEggLocations[1] = Vector(311.501, -18.517, -99.444);
		Global.EasterEggLocations[2] = Vector(157.323, 61.388, -115.497);
		Global.EasterEggLocations[3] = Vector(-153.043, 6.433, -69.303);
		Global.EasterEggLocations[4] = Vector(28.095, 60.264, -132.706);
		"Easter Egg Colors"
		Global.EasterEggColors[0] = Global.EffectColors[5];
		Global.EasterEggColors[1] = Global.EffectColors[6];
		Global.EasterEggColors[2] = Global.EffectColors[7];
		Global.EasterEggColors[3] = Global.EffectColors[8];
		Global.EasterEggColors[4] = Global.EffectColors[9];
	}
}

規則("Effects")
{
	事件
	{
		Ongoing - Global;
	}

	動作
	{
		"Player Hud Text"
		Create HUD Text(Local Player.EasterEggCount >= True ? Local Player : Null, Null, Null, Custom String(
			"Easter Eggs Found\r\n{0} / {1}", Local Player.EasterEggCount, Global.EasterEggMaxCount), Left, 3, Color(Aqua), Color(Aqua),
			Color(Blue), Visible To and String, Default Visibility);
		"Easter Egg Effects"
		For Global Variable(ForLoop, False, Global.EasterEggMaxCount, True);
			Create Effect(Filtered Array(Append To Array(Players On Hero(Evaluate Once(Global.EasterEggHeroes[Global.ForLoop]), All Teams),
				Null), !Current Array Element.EasterEggsFound[Evaluate Once(Global.ForLoop)] && Current Array Element.Victory), Sparkles,
				Global.EasterEggColors[Evaluate Once(Global.ForLoop)], Global.EasterEggLocations[Evaluate Once(Global.ForLoop)], True,
				Visible To);
			Wait(0.032, Ignore Condition);
		End;
		"Hero Swap"
		Create Effect(Filtered Array(All Players(All Teams), Current Array Element.EasterEggCount >= Global.EasterEggMaxCount), Bad Aura,
			Global.EasterEggColors[Global.EasterEggMaxCount], Global.EasterEggLocations[Global.EasterEggMaxCount], True, Visible To);
		Create In-World Text(Filtered Array(All Players(All Teams), Current Array Element.EasterEggCount >= Global.EasterEggMaxCount),
			Hero Icon String(Global.EasterEggHeroes[Global.EasterEggMaxCount]),
			Global.EasterEggLocations[Global.EasterEggMaxCount] + Vector(False, -0.300, False), 2, Clip Against Surfaces, Visible To,
			Color(White), Default Visibility);
	}
}

規則("Pickup")
{
	事件
	{
		Ongoing - Each Player;
		All;
		All;
	}

	條件
	{
		Has Spawned(Event Player) == True;
		Event Player.Victory == True;
		Event Player.EasterEggCount < Global.EasterEggMaxCount;
		Is True For Any(Global.EasterEggLocations, Distance Between(Eye Position(Event Player), Current Array Element) < 1.500) == True;
	}

	動作
	{
		For Player Variable(Event Player, LoopCounter, False, Global.EasterEggMaxCount, True);
			If(!Event Player.EasterEggsFound[Event Player.LoopCounter]);
				If(Hero Of(Event Player) == Global.EasterEggHeroes[Event Player.LoopCounter]);
					If(Distance Between(Eye Position(Event Player), Global.EasterEggLocations[Event Player.LoopCounter]) <= 1.500);
						Event Player.EasterEggsFound[Event Player.LoopCounter] = True;
						Event Player.EasterEggCount += True;
						Play Effect(All Players(All Teams), Buff Explosion Sound, Color(White), Position Of(Event Player), 100);
						Small Message(Event Player, Custom String("You Found An Easter Egg!"));
						Break;
					End;
				End;
			End;
		End;
	}
}

規則("Hero Swap")
{
	事件
	{
		Ongoing - Each Player;
		All;
		All;
	}

	條件
	{
		Is Button Held(Event Player, Button(Interact)) == True;
		Distance Between(Eye Position(Event Player), Global.EasterEggLocations[Global.EasterEggMaxCount]) < 1.500;
		Hero Of(Event Player) != Global.EasterEggHeroes[Global.EasterEggMaxCount];
	}

	動作
	{
		If(Event Player.EasterEggCount >= Global.EasterEggMaxCount);
			Start Forcing Player To Be Hero(Event Player, Global.EasterEggHeroes[Global.EasterEggMaxCount]);
			If(Event Player.Respawn == Global.ZoneLocations[True]);
				Event Player.AlternativeRespawn = Null;
			End;
			If(!Event Player.EasterEggsFound[Global.EasterEggMaxCount]);
				Big Message(All Players(All Teams), Custom String(" \r\n{0} {1} {2}", Event Player, String("被發現"), Hero Icon String(
					Global.EasterEggHeroes[Global.EasterEggMaxCount])));
				Event Player.EasterEggsFound[Global.EasterEggMaxCount] = True;
			End;
		End;
	}
}

停用 規則("Easter Egg Jump")
{
	事件
	{
		Ongoing - Each Player;
		All;
		All;
	}

	條件
	{
		Is Button Held(Event Player, Button(Jump)) == True;
		Hero Of(Event Player) == Global.EasterEggHeroes[Global.EasterEggMaxCount];
	}

	動作
	{
		Apply Impulse(Event Player, Up, 30, To World, Cancel Contrary Motion);
		Play Effect(All Players(All Teams), Debuff Impact Sound, Color(White), Event Player, 75);
	}
}

規則("Easter Egg Speed")
{
	事件
	{
		Ongoing - Each Player;
		All;
		All;
	}

	條件
	{
		Hero Of(Event Player) == Global.EasterEggHeroes[Global.EasterEggMaxCount];
	}

	動作
	{
		Set Move Speed(Event Player, 400);
		Wait(0.250, Ignore Condition);
		Loop If Condition Is True;
		Set Move Speed(Event Player, 100);
	}
}

規則("Skill HUD")
{
	事件
	{
		Ongoing - Global;
	}

	動作
	{
		"Brigs Ability"
		Create HUD Text(Players On Hero(Global.HeroRoster[0], All Teams), Null, Null, Custom String(
			"If Shield Bash is locked, find the ability {0}", Ability Icon String(Global.HeroRoster[0], Button(Secondary Fire))), Left, 5,
			Color(White), Color(White), Color(White), Visible To and String, Default Visibility);
		"Baps Exo"
		Create HUD Text(Players On Hero(Global.HeroRoster[1], All Teams), Null, Null, Custom String(
			"Wear your Exo Boots {0} before exploring, find it under Zone 1", Ability Icon String(Global.HeroRoster[1], Button(Crouch))),
			Left, 5, Color(White), Color(White), Color(White), Visible To and String, Default Visibility);
		"Zen Mega Kick"
		Create HUD Text(Players On Hero(Global.HeroRoster[2], All Teams), Null, Null, Custom String(
			"The Monks never skipped a leg days, his kicks will be strong enough to lift you up {0}", Ability Icon String(
			Global.HeroRoster[2], Button(Melee))), Left, 5, Color(White), Color(White), Color(White), Visible To and String,
			Default Visibility);
		"Lucio Speaker"
		Create HUD Text(Players On Hero(Global.HeroRoster[3], All Teams), Null, Null, Custom String(
			"You can do it without, but an {0} Speaker is surely helpful if you struggling", Ability Icon String(Global.HeroRoster[3],
			Button(Ability 2))), Left, 5, Color(White), Color(White), Color(White), Visible To and String, Default Visibility);
		"Ana Scoped"
		Create HUD Text(Players On Hero(Global.HeroRoster[4], All Teams), Null, Null, Custom String(
			"A {0} has more fire power when fired while Scoped,\r\n but {1} lost her Scope in the last map", Ability Icon String(
			Global.HeroRoster[4], Button(Primary Fire)), Hero Icon String(Hero(安娜))), Left, 5, Color(White), Color(White), Color(White),
			Visible To and String, Default Visibility);
	}
}

停用 規則("Rule 83")
{
	事件
	{
		Ongoing - Each Player;
		All;
		All;
	}

	條件
	{
		Event Player.TutorialMode == True;
		Is Button Held(Event Player, Button(Interact)) == True;
	}

	動作
	{
		Wait(0.250, Abort When False);
		Set Gravity(Event Player, 50);
		Loop If Condition Is True;
		Set Gravity(Event Player, 100);
	}
}