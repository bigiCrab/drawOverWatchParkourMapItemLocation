變數
{
	全域:
		0: EditorVersion
		1: ShareCode
		2: Version
		3: Author
		4: MaxZones
		5: MaxHeroes
		6: HeroRoster
		7: LavaLocations
		8: LavaRadius
		9: CheckpointLocations
		10: ZoneLocations
		11: ZoneText
		12: PortalLocations
		13: PortalDestinations
		14: PortalUnlockDefaults
		15: PortalText
		16: HeroLocations
		17: UnlockLocations
		18: SpeedrunLocation
		19: BouncepadLocations
		20: BouncepadStrength
		21: EffectColors
		22: EffectBehaviors
		23: PlayerBehaviors
		24: SpawnFaceDirection
		25: MaxObjectIndex
		26: LoadingObjectIndex
		27: LoadingElementIndex
		28: InWorldText
		29: MatchTime
		30: AntiCrash
		31: EasterEggLocations
		32: EasterEggHeroes
		33: EasterEggColors
		34: EasterEggMaxCount
		35: ForLoop

	玩家:
		0: Victory
		1: TutorialMode
		2: ZonesReached
		3: HeroesUnlocked
		4: ZoneCount
		5: HeroCount
		6: FoundSecretHero
		7: Respawn
		8: AlternativeRespawn
		9: SpeedRunMode
		10: Timer
		11: Deaths
		12: MyHUD
		13: CanDie
		14: LoopCounter
		15: PortalUnlocked
		31: EasterEggsFound
		32: EasterEggCount
}

subroutines
{
	0: ResetProgress
	1: UpdateCount
}

規則("----- DATA -----")
{
	事件
	{
		Ongoing - Global;
	}
}

規則("Release Information")
{
	事件
	{
		Ongoing - Global;
	}

	動作
	{
		Global.EditorVersion = Custom String("V 1.2");
		Global.ShareCode = Custom String("tx2kj");
		Global.Version = Custom String("1.1.0");
		Global.Author = Custom String("UnLyokoGuy");
	}
}

規則("Goal Counts")
{
	事件
	{
		Ongoing - Global;
	}

	動作
	{
		Global.MaxZones = 4;
		Global.MaxHeroes = 4;
	}
}

規則("Hero Roster")
{
	事件
	{
		Ongoing - Global;
	}

	動作
	{
		"Spawning Hero - Yellow"
		Global.HeroRoster[0] = Hero(慈悲);
		"Unlockable Hero 1 - Green"
		Global.HeroRoster[1] = Hero(卡西迪);
		"Unlockable Hero 2 - Blue"
		Global.HeroRoster[2] = Hero(源氏);
		"Unlockable Hero 3 - Purple"
		Global.HeroRoster[3] = Hero(路西歐);
		"Unlockable Hero 4 - Red"
		Global.HeroRoster[4] = Hero(D.Va);
		"Secret Hero - White"
		Global.HeroRoster[5] = Hero(托比昂);
	}
}

規則("Lava Locations")
{
	事件
	{
		Ongoing - Global;
	}

	動作
	{
		Global.LavaLocations[0] = Vector(18.551, 6.453, -27.322);
		Global.LavaLocations[1] = Vector(-13.386, 2.036, -45.107);
		Global.LavaLocations[2] = Vector(-42.368, -4.683, -13.856);
		Global.LavaLocations[3] = Vector(-54.295, 9, -15.056);
		Global.LavaLocations[4] = Vector(-111.878, -46.938, -52.978);
		Global.LavaLocations[5] = Vector(4.534, -30.638, 38.490);
		Global.LavaLocations[6] = Vector(-15.306, 8.249, 54.992);
		Global.LavaLocations[7] = Vector(-17.115, 8.249, 46.253);
		Global.LavaLocations[8] = Vector(-19.220, 6.971, 31.254);
		Global.LavaLocations[9] = Vector(-2.273, 1.700, 25.673);
		Global.LavaLocations[10] = Vector(8.921, -69.913, -18.596);
		Global.LavaLocations[11] = Vector(-3.171, 0.970, -43.006);
		Global.LavaLocations[12] = Vector(0, 1, 0);
		Global.LavaLocations[13] = Vector(-28.895, 10.500, -17.133);
		Global.LavaLocations[14] = Vector(-58.952, 6.469, -11.742);
		Global.LavaLocations[15] = Vector(-81.330, 4.500, -6.113);
		Global.LavaLocations[16] = Vector(-85.086, 8.631, -16.351);
		Global.LavaLocations[17] = Vector(3.037, -74.409, 8.562);
		Global.LavaLocations[18] = Vector(6.409, -2.700, -5.423);
		Global.LavaLocations[19] = Vector(21.859, 6.464, -4.810);
		Global.LavaLocations[20] = Vector(-22.344, -153.561, 1.490);
		Global.LavaLocations[21] = Vector(-26.263, 7.150, 2.425);
		Global.LavaLocations[22] = Vector(-1.821, 3.760, -12.273);
		Global.LavaLocations[23] = Vector(1.679, 6.300, -10.496);
		Global.LavaLocations[24] = Vector(-17.345, -198.430, -32.870);
		Global.LavaLocations[25] = Vector(10.471, 8.421, -35.057);
		Global.LavaLocations[26] = Vector(10.222, 8.361, -38.399);
		Global.LavaLocations[27] = Vector(-6.795, 7.254, -49.572);
		Global.LavaLocations[28] = Vector(-22.334, 1.850, -46.343);
		Global.LavaLocations[29] = Vector(-16.205, 7.384, 14.768);
		Global.LavaLocations[30] = Vector(-30.430, 2.368, -29.917);
		Global.LavaLocations[31] = Vector(-35.003, 3.700, -28.064);
		Global.LavaLocations[32] = Vector(-36.220, 3.700, -19.400);
		Global.LavaLocations[33] = Vector(0, 1, 0);
		Global.LavaLocations[34] = Vector(-75.215, 7.647, -14.641);
		Global.LavaLocations[35] = Vector(-46.002, -71.889, -35.103);
		Global.LavaLocations[36] = Vector(0, 1, 0);
		Global.LavaLocations[37] = Vector(0, 1, 0);
		Global.LavaLocations[38] = Vector(-57.707, 0.076, -45.742);
		Global.LavaLocations[39] = Vector(-75.528, 4.591, -42.277);
		Global.LavaLocations[40] = Vector(-83.362, 7.028, -40.590);
		Global.LavaLocations[41] = Vector(-60.448, 6.443, -32.323);
		Global.LavaLocations[42] = Vector(-77.818, 5.832, -23.816);
		Global.LavaLocations[43] = Vector(-94.680, 6.169, -6.920);
		Global.LavaLocations[44] = Vector(-105.102, -59.890, 3.255);
		Global.LavaLocations[45] = Vector(-104.959, 3.938, 14.141);
		Global.LavaLocations[46] = Vector(-110.797, 6.851, -5.415);
		Global.LavaLocations[47] = Vector(-124.362, -29.816, 3.394);
		Global.LavaLocations[48] = Vector(-123.307, 4.600, 14.030);
		Global.LavaLocations[49] = Vector(-138.952, 7.071, 9.684);
		Global.LavaLocations[50] = Vector(-136.222, 4.022, 23.595);
		Global.LavaLocations[51] = Vector(-124.410, 2.760, 26.523);
		Global.LavaLocations[52] = Vector(-116.939, 2.695, 23.481);
		Global.LavaLocations[53] = Vector(-114.135, -48.602, 40.058);
		Global.LavaLocations[54] = Vector(-140.117, 2.851, 40.672);
		Global.LavaLocations[55] = Vector(-153.038, 0.487, 11.206);
		Global.LavaLocations[56] = Vector(-164.332, -29.603, 43.886);
		Global.LavaLocations[57] = Vector(-178.001, 7.215, 37.328);
		Global.LavaLocations[58] = Vector(-182.258, -14.411, 36.131);
		Global.LavaLocations[59] = Vector(-166.589, -27.619, 25.599);
		Global.LavaLocations[60] = Vector(-132.435, 2.626, -15.807);
		Global.LavaLocations[61] = Vector(-119.999, 1.725, -8.245);
		Global.LavaLocations[62] = Vector(-71.860, 4.909, 2.256);
		Global.LavaLocations[63] = Vector(-65.806, -52.439, -21.686);
		Global.LavaLocations[64] = Vector(-37.395, 9, -49.078);
		Global.LavaLocations[65] = Vector(-91.632, -0.004, -55.317);
		Global.LavaLocations[66] = Vector(-109.537, -2.694, 9.141);
		Global.LavaLocations[67] = Vector(-99.258, -30.548, 8.978);
		Global.LavaLocations[68] = Vector(-138.477, -50.130, 7.887);
		Global.LavaLocations[69] = Vector(-130.756, 5.746, 4.465);
		Global.LavaLocations[70] = Vector(-111.279, -3.306, 23.671);
		Global.LavaLocations[71] = Vector(-156.265, -15.736, 39.276);
		Global.LavaLocations[72] = Vector(-171.472, 2.074, 36.065);
		Global.LavaLocations[73] = Vector(-166.753, -40.378, 12.555);
		Global.LavaLocations[74] = Vector(-167.417, -43.084, -6.702);
		Global.LavaLocations[75] = Vector(-169.786, 1.439, 26.937);
		Global.LavaLocations[76] = Vector(-163.188, 1.992, 16.264);
		Global.LavaLocations[77] = Vector(-95.019, -4.740, -30.147);
		Global.LavaLocations[78] = Vector(-99.569, -5.041, -37.176);
		Global.LavaLocations[79] = Vector(0, 0, 0);
		Global.LavaLocations[80] = Vector(0, 0, 0);
		Global.LavaLocations[81] = Vector(0, 0, 0);
		Global.LavaLocations[82] = Vector(0, 0, 0);
		Global.LavaLocations[83] = Vector(0, 0, 0);
		Global.LavaLocations[84] = Vector(0, 0, 0);
		Global.LavaLocations[85] = Vector(0, 0, 0);
		Global.LavaLocations[86] = Vector(0, 0, 0);
		Global.LavaLocations[87] = Vector(0, 0, 0);
		Global.LavaLocations[88] = Vector(0, 0, 0);
		Global.LavaLocations[89] = Vector(0, 0, 0);
		Global.LavaLocations[90] = Vector(0, 0, 0);
		Global.LavaLocations[91] = Vector(0, 0, 0);
		Global.LavaLocations[92] = Vector(0, 0, 0);
		Global.LavaLocations[93] = Vector(0, 0, 0);
		Global.LavaLocations[94] = Vector(0, 0, 0);
		Global.LavaLocations[95] = Vector(0, 0, 0);
		Global.LavaLocations[96] = Vector(0, 0, 0);
		Global.LavaLocations[97] = Vector(0, 0, 0);
		Global.LavaLocations[98] = Vector(0, 0, 0);
		Global.LavaLocations[99] = Vector(0, 0, 0);
		Global.LavaLocations[100] = Vector(0, 0, 0);
		Global.LavaLocations[101] = Vector(0, 0, 0);
		Global.LavaLocations[102] = Vector(0, 0, 0);
		Global.LavaLocations[103] = Vector(0, 0, 0);
		Global.LavaLocations[104] = Vector(0, 0, 0);
		Global.LavaLocations[105] = Vector(0, 0, 0);
		Global.LavaLocations[106] = Vector(0, 0, 0);
		Global.LavaLocations[107] = Vector(0, 0, 0);
		Global.LavaLocations[108] = Vector(0, 0, 0);
		Global.LavaLocations[109] = Vector(0, 0, 0);
		Global.LavaLocations[110] = Vector(0, 0, 0);
		Global.LavaLocations[111] = Vector(0, 0, 0);
		Global.LavaLocations[112] = Vector(0, 0, 0);
		Global.LavaLocations[113] = Vector(0, 0, 0);
		Global.LavaLocations[114] = Vector(0, 0, 0);
		Global.LavaLocations[115] = Vector(0, 0, 0);
		Global.LavaLocations[116] = Vector(0, 0, 0);
		Global.LavaLocations[117] = Vector(0, 0, 0);
		Global.LavaLocations[118] = Vector(0, 0, 0);
		Global.LavaLocations[119] = Vector(0, 0, 0);
		Global.LavaLocations[120] = Vector(0, 0, 0);
		Global.LavaLocations[121] = Vector(0, 0, 0);
		Global.LavaLocations[122] = Vector(0, 0, 0);
		Global.LavaLocations[123] = Vector(0, 0, 0);
		Global.LavaLocations[124] = Vector(0, 0, 0);
		Global.LavaLocations[125] = Vector(0, 0, 0);
		Global.LavaLocations[126] = Vector(0, 0, 0);
		Global.LavaLocations[127] = Vector(0, 0, 0);
		Global.LavaLocations[128] = Vector(0, 0, 0);
		Global.LavaLocations[129] = Vector(0, 0, 0);
		Global.LavaLocations[130] = Vector(0, 0, 0);
		Global.LavaLocations[131] = Vector(0, 0, 0);
		Global.LavaLocations[132] = Vector(0, 0, 0);
		Global.LavaLocations[133] = Vector(0, 0, 0);
		Global.LavaLocations[134] = Vector(0, 0, 0);
		Global.LavaLocations[135] = Vector(0, 0, 0);
		Global.LavaLocations[136] = Vector(0, 0, 0);
		Global.LavaLocations[137] = Vector(0, 0, 0);
		Global.LavaLocations[138] = Vector(0, 0, 0);
		Global.LavaLocations[139] = Vector(0, 0, 0);
		Global.LavaLocations[140] = Vector(0, 0, 0);
		Global.LavaLocations[141] = Vector(0, 0, 0);
		Global.LavaLocations[142] = Vector(0, 0, 0);
		Global.LavaLocations[143] = Vector(0, 0, 0);
		Global.LavaLocations[144] = Vector(0, 0, 0);
		Global.LavaLocations[145] = Vector(0, 0, 0);
		Global.LavaLocations[146] = Vector(0, 0, 0);
		Global.LavaLocations[147] = Vector(0, 0, 0);
		Global.LavaLocations[148] = Vector(0, 0, 0);
		Global.LavaLocations[149] = Vector(0, 0, 0);
		Global.LavaLocations[150] = Vector(0, 0, 0);
		Global.LavaLocations[151] = Vector(0, 0, 0);
		Global.LavaLocations[152] = Vector(0, 0, 0);
		Global.LavaLocations[153] = Vector(0, 0, 0);
		Global.LavaLocations[154] = Vector(0, 0, 0);
		Global.LavaLocations[155] = Vector(0, 0, 0);
		Global.LavaLocations[156] = Vector(0, 0, 0);
		Global.LavaLocations[157] = Vector(0, 0, 0);
		Global.LavaLocations[158] = Vector(0, 0, 0);
		Global.LavaLocations[159] = Vector(0, 0, 0);
	}
}

規則("Lava Radius")
{
	事件
	{
		Ongoing - Global;
	}

	動作
	{
		Global.LavaRadius[0] = 3.700;
		Global.LavaRadius[1] = 4.900;
		Global.LavaRadius[2] = 13.400;
		Global.LavaRadius[3] = 3.600;
		Global.LavaRadius[4] = 45.800;
		Global.LavaRadius[5] = 35.500;
		Global.LavaRadius[6] = 11.600;
		Global.LavaRadius[7] = 11.600;
		Global.LavaRadius[8] = 11.600;
		Global.LavaRadius[9] = 7.100;
		Global.LavaRadius[10] = 72.299;
		Global.LavaRadius[11] = 6;
		Global.LavaRadius[12] = 1;
		Global.LavaRadius[13] = 1.900;
		Global.LavaRadius[14] = 3.800;
		Global.LavaRadius[15] = 5.900;
		Global.LavaRadius[16] = 2.500;
		Global.LavaRadius[17] = 76.899;
		Global.LavaRadius[18] = 4;
		Global.LavaRadius[19] = 4.800;
		Global.LavaRadius[20] = 156.100;
		Global.LavaRadius[21] = 5.900;
		Global.LavaRadius[22] = 4;
		Global.LavaRadius[23] = 1.800;
		Global.LavaRadius[24] = 200;
		Global.LavaRadius[25] = 2.700;
		Global.LavaRadius[26] = 2.800;
		Global.LavaRadius[27] = 4.600;
		Global.LavaRadius[28] = 4.900;
		Global.LavaRadius[29] = 8.500;
		Global.LavaRadius[30] = 2.400;
		Global.LavaRadius[31] = 6.200;
		Global.LavaRadius[32] = 6.200;
		Global.LavaRadius[33] = 1;
		Global.LavaRadius[34] = 1.600;
		Global.LavaRadius[35] = 73.099;
		Global.LavaRadius[36] = 1;
		Global.LavaRadius[37] = 1;
		Global.LavaRadius[38] = 8.800;
		Global.LavaRadius[39] = 7.100;
		Global.LavaRadius[40] = 11.200;
		Global.LavaRadius[41] = 8;
		Global.LavaRadius[42] = 7.800;
		Global.LavaRadius[43] = 10.900;
		Global.LavaRadius[44] = 61.600;
		Global.LavaRadius[45] = 6.700;
		Global.LavaRadius[46] = 8.200;
		Global.LavaRadius[47] = 31.900;
		Global.LavaRadius[48] = 9.100;
		Global.LavaRadius[49] = 4.300;
		Global.LavaRadius[50] = 8.800;
		Global.LavaRadius[51] = 4.700;
		Global.LavaRadius[52] = 4.300;
		Global.LavaRadius[53] = 51.800;
		Global.LavaRadius[54] = 9.100;
		Global.LavaRadius[55] = 10.300;
		Global.LavaRadius[56] = 30.800;
		Global.LavaRadius[57] = 7.700;
		Global.LavaRadius[58] = 18;
		Global.LavaRadius[59] = 28.800;
		Global.LavaRadius[60] = 11.900;
		Global.LavaRadius[61] = 9.100;
		Global.LavaRadius[62] = 14.400;
		Global.LavaRadius[63] = 54;
		Global.LavaRadius[64] = 9.200;
		Global.LavaRadius[65] = 3.200;
		Global.LavaRadius[66] = 5.700;
		Global.LavaRadius[67] = 31.900;
		Global.LavaRadius[68] = 50.100;
		Global.LavaRadius[69] = 4.900;
		Global.LavaRadius[70] = 5;
		Global.LavaRadius[71] = 17.700;
		Global.LavaRadius[72] = 3;
		Global.LavaRadius[73] = 41.100;
		Global.LavaRadius[74] = 45.600;
		Global.LavaRadius[75] = 4.300;
		Global.LavaRadius[76] = 2.600;
		Global.LavaRadius[77] = 6.700;
		Global.LavaRadius[78] = 5.200;
		Global.LavaRadius[79] = 0;
		Global.LavaRadius[80] = 0;
		Global.LavaRadius[81] = 0;
		Global.LavaRadius[82] = 0;
		Global.LavaRadius[83] = 0;
		Global.LavaRadius[84] = 0;
		Global.LavaRadius[85] = 0;
		Global.LavaRadius[86] = 0;
		Global.LavaRadius[87] = 0;
		Global.LavaRadius[88] = 0;
		Global.LavaRadius[89] = 0;
		Global.LavaRadius[90] = 0;
		Global.LavaRadius[91] = 0;
		Global.LavaRadius[92] = 0;
		Global.LavaRadius[93] = 0;
		Global.LavaRadius[94] = 0;
		Global.LavaRadius[95] = 0;
		Global.LavaRadius[96] = 0;
		Global.LavaRadius[97] = 0;
		Global.LavaRadius[98] = 0;
		Global.LavaRadius[99] = 0;
		Global.LavaRadius[100] = 0;
		Global.LavaRadius[101] = 0;
		Global.LavaRadius[102] = 0;
		Global.LavaRadius[103] = 0;
		Global.LavaRadius[104] = 0;
		Global.LavaRadius[105] = 0;
		Global.LavaRadius[106] = 0;
		Global.LavaRadius[107] = 0;
		Global.LavaRadius[108] = 0;
		Global.LavaRadius[109] = 0;
		Global.LavaRadius[110] = 0;
		Global.LavaRadius[111] = 0;
		Global.LavaRadius[112] = 0;
		Global.LavaRadius[113] = 0;
		Global.LavaRadius[114] = 0;
		Global.LavaRadius[115] = 0;
		Global.LavaRadius[116] = 0;
		Global.LavaRadius[117] = 0;
		Global.LavaRadius[118] = 0;
		Global.LavaRadius[119] = 0;
		Global.LavaRadius[120] = 0;
		Global.LavaRadius[121] = 0;
		Global.LavaRadius[122] = 0;
		Global.LavaRadius[123] = 0;
		Global.LavaRadius[124] = 0;
		Global.LavaRadius[125] = 0;
		Global.LavaRadius[126] = 0;
		Global.LavaRadius[127] = 0;
		Global.LavaRadius[128] = 0;
		Global.LavaRadius[129] = 0;
		Global.LavaRadius[130] = 0;
		Global.LavaRadius[131] = 0;
		Global.LavaRadius[132] = 0;
		Global.LavaRadius[133] = 0;
		Global.LavaRadius[134] = 0;
		Global.LavaRadius[135] = 0;
		Global.LavaRadius[136] = 0;
		Global.LavaRadius[137] = 0;
		Global.LavaRadius[138] = 0;
		Global.LavaRadius[139] = 0;
		Global.LavaRadius[140] = 0;
		Global.LavaRadius[141] = 0;
		Global.LavaRadius[142] = 0;
		Global.LavaRadius[143] = 0;
		Global.LavaRadius[144] = 0;
		Global.LavaRadius[145] = 0;
		Global.LavaRadius[146] = 0;
		Global.LavaRadius[147] = 0;
		Global.LavaRadius[148] = 0;
		Global.LavaRadius[149] = 0;
		Global.LavaRadius[150] = 0;
		Global.LavaRadius[151] = 0;
		Global.LavaRadius[152] = 0;
		Global.LavaRadius[153] = 0;
		Global.LavaRadius[154] = 0;
		Global.LavaRadius[155] = 0;
		Global.LavaRadius[156] = 0;
		Global.LavaRadius[157] = 0;
		Global.LavaRadius[158] = 0;
		Global.LavaRadius[159] = 0;
	}
}

規則("Checkpoint Locations")
{
	事件
	{
		Ongoing - Global;
	}

	動作
	{
		Global.CheckpointLocations[0] = Vector(20.848, 6.026, -37.449);
		Global.CheckpointLocations[1] = Vector(-26.329, 6, -49.015);
		Global.CheckpointLocations[2] = Vector(-48.713, 9.123, -37.623);
		Global.CheckpointLocations[3] = Vector(-114.316, 6.071, 4.948);
		Global.CheckpointLocations[4] = Vector(-116.727, -1.278, 18.673);
		Global.CheckpointLocations[5] = Vector(-172.549, 4.494, 31.465);
		Global.CheckpointLocations[6] = Vector(-98.187, -2.496, -47.732);
		Global.CheckpointLocations[7] = Vector(0, 0, 0);
		Global.CheckpointLocations[8] = Vector(0, 0, 0);
		Global.CheckpointLocations[9] = Vector(0, 0, 0);
	}
}

規則("Zone Locations")
{
	事件
	{
		Ongoing - Global;
	}

	動作
	{
		"Spawn"
		Global.ZoneLocations[0] = Vector(8.675, 2, 54.164);
		"Zone 1"
		Global.ZoneLocations[1] = Vector(8.449, 6, -4.624);
		"Zone 2"
		Global.ZoneLocations[2] = Vector(-31.283, 9, -13.348);
		"Zone 3"
		Global.ZoneLocations[3] = Vector(-94.447, 7.484, -30.419);
		"Zone 4"
		Global.ZoneLocations[4] = Vector(-149.174, -2.748, 24.492);
	}
}

規則("Zone Text")
{
	事件
	{
		Ongoing - Global;
	}

	動作
	{
		"Spawn"
		Global.ZoneText[0] = 0;
		"Zone 1"
		Global.ZoneText[1] = Custom String("Cinema");
		"Zone 2"
		Global.ZoneText[2] = Custom String("Hotel");
		"Zone 3"
		Global.ZoneText[3] = Custom String("Subway");
		"Zone 4"
		Global.ZoneText[4] = Custom String("Factory");
	}
}

規則("Portal Locations")
{
	事件
	{
		Ongoing - Global;
	}

	動作
	{
		Global.PortalLocations[0] = Vector(4.935, 7.243, -8.067);
		Global.PortalLocations[1] = Vector(4.578, 7.243, -5.154);
		Global.PortalLocations[2] = Vector(4.094, 7.243, -2.488);
		Global.PortalLocations[3] = Vector(-30.691, 10.900, -10.596);
		Global.PortalLocations[4] = Vector(-97.572, 8.780, -28.814);
		Global.PortalLocations[5] = Vector(-151.141, -1.353, 27.066);
		Global.PortalLocations[6] = Vector(0, 0, 0);
		Global.PortalLocations[7] = Vector(0, 0, 0);
		Global.PortalLocations[8] = Vector(0, 0, 0);
		Global.PortalLocations[9] = Vector(0, 0, 0);
		Global.PortalLocations[10] = Vector(0, 0, 0);
		Global.PortalLocations[11] = Vector(0, 0, 0);
		Global.PortalLocations[12] = Vector(0, 0, 0);
		Global.PortalLocations[13] = Vector(0, 0, 0);
		Global.PortalLocations[14] = Vector(0, 0, 0);
	}
}

規則("Portal Destinations")
{
	事件
	{
		Ongoing - Global;
	}

	動作
	{
		Global.PortalDestinations[0] = Position Of(Global.ZoneLocations[2]);
		Global.PortalDestinations[1] = Position Of(Global.ZoneLocations[3]);
		Global.PortalDestinations[2] = Position Of(Global.ZoneLocations[4]);
		Global.PortalDestinations[3] = Position Of(Global.ZoneLocations[1]);
		Global.PortalDestinations[4] = Position Of(Global.ZoneLocations[1]);
		Global.PortalDestinations[5] = Position Of(Global.ZoneLocations[1]);
		Global.PortalDestinations[6] = Vector(0, 0, 0);
		Global.PortalDestinations[7] = Vector(0, 0, 0);
		Global.PortalDestinations[8] = Vector(0, 0, 0);
		Global.PortalDestinations[9] = Vector(0, 0, 0);
		Global.PortalDestinations[10] = Vector(0, 0, 0);
		Global.PortalDestinations[11] = Vector(0, 0, 0);
		Global.PortalDestinations[12] = Vector(0, 0, 0);
		Global.PortalDestinations[13] = Vector(0, 0, 0);
		Global.PortalDestinations[14] = Vector(0, 0, 0);
		停用 Global.PortalDestinations[15] = Vector(50.003, -0.896, 25.190);
	}
}

規則("Portal Unlock Defaults")
{
	事件
	{
		Ongoing - Global;
	}

	動作
	{
		"True = Usable from Start | False = Locked until destination is reached"
		Global.PortalUnlockDefaults[0] = False;
		Global.PortalUnlockDefaults[1] = False;
		Global.PortalUnlockDefaults[2] = False;
		Global.PortalUnlockDefaults[3] = False;
		Global.PortalUnlockDefaults[4] = False;
		Global.PortalUnlockDefaults[5] = False;
		Global.PortalUnlockDefaults[6] = False;
		Global.PortalUnlockDefaults[7] = False;
		Global.PortalUnlockDefaults[8] = False;
		Global.PortalUnlockDefaults[9] = False;
		Global.PortalUnlockDefaults[10] = False;
		Global.PortalUnlockDefaults[11] = False;
		Global.PortalUnlockDefaults[12] = False;
		Global.PortalUnlockDefaults[13] = False;
		Global.PortalUnlockDefaults[14] = False;
		Global.PortalUnlockDefaults[15] = False;
	}
}

規則("Portal Text")
{
	事件
	{
		Ongoing - Global;
	}

	動作
	{
		Global.PortalText[0] = Custom String("{0}", Global.ZoneText[2]);
		Global.PortalText[1] = Custom String("{0}", Global.ZoneText[3]);
		Global.PortalText[2] = Custom String("{0}", Global.ZoneText[4]);
		Global.PortalText[3] = Custom String("{0}", Global.ZoneText[1]);
		Global.PortalText[4] = Custom String("{0}", Global.ZoneText[1]);
		Global.PortalText[5] = Custom String("{0}", Global.ZoneText[1]);
		Global.PortalText[6] = Custom String("");
		Global.PortalText[7] = Custom String("");
		Global.PortalText[8] = Custom String("");
		Global.PortalText[9] = Custom String("");
		Global.PortalText[10] = Custom String("");
		Global.PortalText[11] = Custom String("");
		Global.PortalText[12] = Custom String("");
		Global.PortalText[13] = Custom String("");
		Global.PortalText[14] = Custom String("");
		Global.PortalText[15] = Custom String("");
	}
}

規則("Hero Locations")
{
	事件
	{
		Ongoing - Global;
	}

	動作
	{
		"Starting Hero - Yellow"
		Global.HeroLocations[0] = Vector(14.176, 7.559, -9.012);
		"Unlockable Hero 1 - Green"
		Global.HeroLocations[1] = Vector(15.913, 7.300, -6.503);
		"Unlockable Hero 2 - Blue"
		Global.HeroLocations[2] = Vector(15.656, 7.300, -3.572);
		"Unlockable Hero 3 - Purple"
		Global.HeroLocations[3] = Vector(14.732, 7.300, -1.535);
		"Unlockable Hero 4 - Red"
		Global.HeroLocations[4] = Vector(12.574, 7.300, 0.087);
		"Secret Hero - White"
		Global.HeroLocations[5] = Vector(16.454, 2.300, -2.061);
	}
}

規則("Unlock Locations")
{
	事件
	{
		Ongoing - Global;
	}

	動作
	{
		"Unlockable Hero 1 - Green"
		Global.UnlockLocations[0] = Vector(-3.114, 15.148, -23.764);
		"Unlockable Hero 2 - Blue"
		Global.UnlockLocations[1] = Vector(-81.668, 11.587, -6.757);
		"Unlockable Hero 3 - Purple"
		Global.UnlockLocations[2] = Vector(-116.372, -3.743, -33.140);
		"Unlockable Hero 4 - Red"
		Global.UnlockLocations[3] = Vector(-167.738, 2.507, 4.322);
	}
}

規則("Speedrun Location")
{
	事件
	{
		Ongoing - Global;
	}

	動作
	{
		Global.SpeedrunLocation = Vector(13.017, 7.300, -4.176);
	}
}

規則("Bouncepad Locations")
{
	事件
	{
		Ongoing - Global;
	}

	動作
	{
		Global.BouncepadLocations[0] = Vector(-27.728, 1.041, -24.209);
		Global.BouncepadLocations[1] = Vector(-81.074, 9.704, -10.174);
		Global.BouncepadLocations[2] = Vector(17.298, 7.722, -31.326);
		Global.BouncepadLocations[3] = Vector(18.268, 7.517, -23.332);
		Global.BouncepadLocations[4] = Vector(-107.569, 1.511, 2.986);
		Global.BouncepadLocations[5] = Vector(-166.130, 1.382, 18.543);
		Global.BouncepadLocations[6] = Vector(0, 0, 0);
		Global.BouncepadLocations[7] = Vector(0, 0, 0);
		Global.BouncepadLocations[8] = Vector(0, 0, 0);
		Global.BouncepadLocations[9] = Vector(0, 0, 0);
		Global.BouncepadLocations[10] = Vector(0, 0, 0);
		Global.BouncepadLocations[11] = Vector(0, 0, 0);
		Global.BouncepadLocations[12] = Vector(0, 0, 0);
		Global.BouncepadLocations[13] = Vector(0, 0, 0);
		Global.BouncepadLocations[14] = Vector(0, 0, 0);
		Global.BouncepadLocations[15] = Vector(0, 0, 0);
		Global.BouncepadLocations[16] = Vector(0, 0, 0);
		Global.BouncepadLocations[17] = Vector(0, 0, 0);
		Global.BouncepadLocations[18] = Vector(14.131, 3.817, 15.414);
		Global.BouncepadLocations[19] = Vector(-28.252, 5.963, -34.686);
	}
}

規則("Bouncepad Strengths")
{
	事件
	{
		Ongoing - Global;
	}

	動作
	{
		Global.BouncepadStrength[0] = 10;
		Global.BouncepadStrength[1] = 10;
		Global.BouncepadStrength[2] = 10;
		Global.BouncepadStrength[3] = 10;
		Global.BouncepadStrength[4] = 10;
		Global.BouncepadStrength[5] = 10;
		Global.BouncepadStrength[6] = 10;
		Global.BouncepadStrength[7] = 10;
		Global.BouncepadStrength[8] = 10;
		Global.BouncepadStrength[9] = 10;
		Global.BouncepadStrength[10] = 10;
		Global.BouncepadStrength[11] = 10;
		Global.BouncepadStrength[12] = 10;
		Global.BouncepadStrength[13] = 10;
		Global.BouncepadStrength[14] = 10;
		Global.BouncepadStrength[15] = 10;
		Global.BouncepadStrength[16] = 10;
		Global.BouncepadStrength[17] = 10;
		Global.BouncepadStrength[18] = 10;
		Global.BouncepadStrength[19] = 10;
	}
}

規則("Spawn Face Direction")
{
	事件
	{
		Ongoing - Global;
	}

	動作
	{
		"First time spawn direction"
		Global.SpawnFaceDirection = Vector(1000, 0, 0);
	}
}

規則("Effect Colors")
{
	事件
	{
		Ongoing - Global;
	}

	動作
	{
		"Lava"
		Global.EffectColors[0] = Color(Turquoise);
		"Checkpoints"
		Global.EffectColors[1] = Color(White);
		"Zones"
		Global.EffectColors[2] = Color(White);
		"Portals"
		Global.EffectColors[3] = Color(White);
		"Bouncepads"
		Global.EffectColors[4] = Color(Green);
		"Starting Hero"
		Global.EffectColors[5] = Color(Yellow);
		"Unlockable Hero 1"
		Global.EffectColors[6] = Color(Green);
		"Unlockable Hero 2"
		Global.EffectColors[7] = Color(Blue);
		"Unlockable Hero 3"
		Global.EffectColors[8] = Color(Purple);
		"Unlockable Hero 4"
		Global.EffectColors[9] = Color(Red);
		"Secret Hero"
		Global.EffectColors[10] = Color(White);
	}
}

規則("Effect Behaviors")
{
	事件
	{
		Ongoing - Global;
	}

	動作
	{
		"Portals are visible when locked"
		Global.EffectBehaviors[0] = False;
	}
}

規則("Player Behaviors")
{
	事件
	{
		Ongoing - Global;
	}

	動作
	{
		"Player Phasing\r\n0 = Players can collide with other players and explosions.\r\n1 = Players cannot collide with other players but can interact with explosions.\r\n2 = Players cannot collide with other players nor explosions."
		Global.PlayerBehaviors[0] = 1;
	}
}

規則("---------- INITIALIZATION ----------")
{
	事件
	{
		Ongoing - Global;
	}
}

規則("Global")
{
	事件
	{
		Ongoing - Global;
	}

	動作
	{
		Disable Inspector Recording;
		Global.MatchTime = 60 * 180;
		Disable Built-In Game Mode Scoring;
		Disable Built-In Game Mode Completion;
		"Center HUD"
		Create HUD Text(All Players(All Teams), Null, Null, Custom String("||        discord.me/lavaparkour        ||"), Top, -2, Color(
			White), Color(White), Color(Orange), Visible To and String, Default Visibility);
		Create HUD Text(Filtered Array(All Players(All Teams),
			Current Array Element.Victory == True && Current Array Element.SpeedRunMode == False), String("已完成"), Null, Null, Top, 1,
			Color(Purple), Color(Purple), Color(Purple), Visible To and String, Default Visibility);
		Create HUD Text(Filtered Array(All Players(All Teams), Current Array Element.TutorialMode == False), Null, Null, Custom String(
			"Hold [{0}] To Start Tutorial Mode", Input Binding String(Button(Reload))), Top, 2, Color(White), Color(White), Color(Yellow),
			Visible To and String, Default Visibility);
		Create HUD Text(Filtered Array(All Players(All Teams), Current Array Element.TutorialMode == True), Custom String("TUTORIAL MODE"),
			Null, Null, Top, 2, Color(Yellow), Color(Yellow), Color(Yellow), Visible To and String, Default Visibility);
		Create HUD Text(Filtered Array(All Players(All Teams), Current Array Element.TutorialMode == True), Null, Null, Custom String(
			"Press [{0}] to use portals/hero swaps\r\n       Hold [{1}] to place checkpoint\r\n                   Hold [{2}] for a tip",
			Input Binding String(Button(Interact)), Input Binding String(Button(Reload)), Input Binding String(Button(Melee))), Top, 3,
			Color(Yellow), Color(Yellow), Color(Yellow), Visible To and String, Default Visibility);
		Create HUD Text(Filtered Array(All Players(All Teams), Current Array Element.TutorialMode == False), Null, Null, Custom String(
			"Press [{0}] To Respawn\r\n     Press [{1}] To Use", Input Binding String(Button(Ultimate)), Input Binding String(Button(
			Interact))), Top, 3, Color(White), Color(White), Color(White), Visible To and String, Default Visibility);
		Wait(1, Ignore Condition);
		"Left-Side HUD"
		Create HUD Text(Filtered Array(All Players(All Teams), Current Array Element.TutorialMode == False), Null, Custom String(
			"Hold [{0}] to restart", Input Binding String(Button(Ultimate))), Null, Left, 0, Color(White), Color(Purple), Color(White),
			Visible To and String, Default Visibility);
		Create HUD Text(Filtered Array(All Players(All Teams), Current Array Element.TutorialMode == True), Null, Custom String(
			"Hold [{0}] to exit tutorial mode (resets progress)", Input Binding String(Button(Ultimate))), Null, Left, 0, Color(Yellow),
			Color(Yellow), Color(Yellow), Visible To and String, Default Visibility);
		Create HUD Text(All Players(All Teams), Custom String("PROGRESS:"), Null, Null, Left, 1, Color(Purple), Color(White), Color(White),
			Visible To and String, Default Visibility);
		Wait(1, Ignore Condition);
		"Right-Side HUD"
		Create HUD Text(All Players(All Teams), Custom String("Share Code: {0} ", Global.ShareCode), Null, Null, Right, -3, Color(White),
			Color(White), Color(White), Visible To and String, Default Visibility);
		Create HUD Text(All Players(All Teams), Null, Null, Custom String("Created By: {0}", Global.Author), Right, -2, Color(White),
			Color(White), Color(White), Visible To and String, Default Visibility);
		Create HUD Text(All Players(All Teams), Null, Null, Custom String("version {0}", Global.Version), Right, -1, Color(White), Color(
			White), Color(White), Visible To and String, Default Visibility);
		"Player Progress"
		Create HUD Text(All Players(All Teams), Null, Null, Custom String("Zones Reached\r\n{0}\r\nHeroes Unlocked\r\n{1}", Custom String(
			"{0} / {1}", Local Player.ZoneCount, Global.MaxZones), Custom String("{0} / {1}", Local Player.HeroCount, Global.MaxHeroes)),
			Left, 2, Color(Aqua), Color(Aqua), Color(Blue), Visible To and String, Default Visibility);
	}
}

規則("Player")
{
	事件
	{
		Ongoing - Each Player;
		All;
		All;
	}

	條件
	{
		Is Dummy Bot(Event Player) != True;
	}

	動作
	{
		Event Player.CanDie = False;
		Start Forcing Player To Be Hero(Event Player, Global.HeroRoster[0]);
		While(Has Spawned(Event Player) == False);
			Wait(0.025, Ignore Condition);
		End;
		Disable Game Mode In-World UI(Event Player);
		Disable Game Mode HUD(Event Player);
		If(Global.PlayerBehaviors[0] == 1);
			Disable Movement Collision With Players(Event Player);
		Else If(Global.PlayerBehaviors[0] == 2);
			Set Status(Event Player, Null, Phased Out, 9999);
		End;
		Set Status(Event Player, Null, Invincible, 9999);
		Event Player.SpeedRunMode = False;
		Set Damage Dealt(Event Player, 0);
		Call Subroutine(ResetProgress);
		Wait(0.300, Ignore Condition);
		Set Objective Description(Event Player, Custom String("Find All Zones and Heroes"), String);
		Event Player.CanDie = True;
		Wait(2, Ignore Condition);
		Set Facing(Event Player, Global.SpawnFaceDirection, To World);
	}
}

規則("---------- EXTRA DATA ----------")
{
	事件
	{
		Ongoing - Global;
	}
}

規則("In World Text Locations")
{
	事件
	{
		Ongoing - Global;
	}

	動作
	{
		"\"Heroes\" Text"
		Global.InWorldText[0] = Vector(0, 0, 0);
	}
}

規則("Tutorial Mode Tip Messages")
{
	事件
	{
		Ongoing - Each Player;
		All;
		All;
	}

	條件
	{
		Event Player.TutorialMode == True;
		Is Button Held(Event Player, Button(Melee)) == True;
	}

	動作
	{
		Wait(0.500, Abort When False);
		Small Message(Event Player, Custom String("Tips have not been set up on this map."));
		Abort;
		停用 If(Event Player.ZonesReached[0] == False);
		停用 Small Message(Event Player, Custom String("Tip: Use {0} to reach the Starting Zone", Hero Icon String(Hero(源氏))));
		停用 Else If(Event Player.ZonesReached[1] == False);
		停用 Small Message(Event Player, Custom String("Tip: Use {0} to reach the Capture Zone", Hero Icon String(Hero(源氏))));
		停用 Else If(Event Player.HeroesUnlocked[0] == False);
		停用 Small Message(Event Player, Custom String("Tip: Find {0} near capture zone", Hero Icon String(Hero(巴帝斯特))));
		停用 Else If(Event Player.HeroesUnlocked[1] == False);
		停用 Small Message(Event Player, Custom String("Tip: Find {0} between capture zone and escort zone", Hero Icon String(Hero(毀滅拳王))));
		停用 Else If(Event Player.ZonesReached[2] == False);
		停用 Small Message(Event Player, Custom String("Tip: Use {0} to reach Escort Zone", Hero Icon String(Hero(毀滅拳王))));
		停用 Else If(Event Player.HeroesUnlocked[2] == False);
		停用 Small Message(Event Player, Custom String("Tip: Find {0} between escort zone and final zone", Hero Icon String(Hero(路西歐))));
		停用 Else If(Event Player.ZonesReached[3] == False);
		停用 Small Message(Event Player, Custom String("Tip: Use {0} to reach Final Zone", Hero Icon String(Hero(路西歐))));
		停用 Else If(Event Player.HeroesUnlocked[3] == False);
		停用 Small Message(Event Player, Custom String("Tip: Use {0} to reach {1} near final zone", Hero Icon String(Hero(巴帝斯特)),
			Hero Icon String(Hero(駭影))));
		停用 Else If(Event Player.FoundSecretHero == False);
		停用 Small Message(Event Player, Custom String("Tip: Find the secret character hidden somewhere in this map!"));
		停用 Else;
		停用 Small Message(Event Player, Custom String("Tip: Join discord.me/lavaparkour for more maps!"));
		停用 End;
	}
}

規則("---------- EFFECTS ----------")
{
	事件
	{
		Ongoing - Global;
	}
}

規則("Loading Data")
{
	事件
	{
		Ongoing - Global;
	}

	動作
	{
		"Get Max Objective Index Values"
		If(Global.MaxObjectIndex == Null);
			Wait(0.500, Ignore Condition);
			"Lava Max"
			Global.LavaLocations = Filtered Array(Global.LavaLocations, Current Array Element != Null && Current Array Element != Vector(0, 0,
				0));
			Global.LavaRadius = Filtered Array(Global.LavaRadius, Current Array Element != Null && Current Array Element != 0);
			Global.MaxObjectIndex[0] = Count Of(Global.LavaLocations) - 1;
			"Checkpoint Max"
			Global.MaxObjectIndex[1] = Count Of(Global.CheckpointLocations) - 1;
			"Zone Max"
			Global.MaxObjectIndex[2] = Count Of(Global.ZoneLocations) - 1;
			"Portals Max"
			Global.MaxObjectIndex[3] = Count Of(Global.PortalLocations) - 1;
			"Heroes Max"
			Global.MaxObjectIndex[4] = Count Of(Global.HeroLocations) - 1;
			"Unlocks Max"
			Global.MaxObjectIndex[5] = Count Of(Global.UnlockLocations) - 1;
			"Speedrun Max"
			Global.MaxObjectIndex[6] = 0;
			"Bouncepads Max"
			Global.MaxObjectIndex[7] = Count Of(Global.BouncepadLocations) - 1;
		End;
		"Move to next Object Type if end index reached"
		If(Global.LoadingElementIndex > Global.MaxObjectIndex[Global.LoadingObjectIndex]);
			Global.LoadingObjectIndex += 1;
			Global.LoadingElementIndex = 0;
		End;
		"Load Lava"
		If(Global.LoadingObjectIndex == 0);
			Create Effect(All Players(All Teams), Sphere, Global.EffectColors[0], Global.LavaLocations[Global.LoadingElementIndex],
				Global.LavaRadius[Global.LoadingElementIndex], Visible To);
			Wait(0.030, Ignore Condition);
			Global.LoadingElementIndex += 1;
			Loop;
		"Load Checkpoints"
		Else If(Global.LoadingObjectIndex == 1);
			If(Global.CheckpointLocations[Global.LoadingElementIndex] != Vector(0, 0, 0)
				&& Global.CheckpointLocations[Global.LoadingElementIndex] != Null);
				Create Effect(All Players(All Teams), Light Shaft, Global.EffectColors[1], Global.CheckpointLocations[Global.LoadingElementIndex],
					1, Visible To);
			End;
			Wait(0.030, Ignore Condition);
			Global.LoadingElementIndex += 1;
			Loop;
		"Load Zones"
		Else If(Global.LoadingObjectIndex == 2);
			If(Global.ZoneLocations[Global.LoadingElementIndex] != Vector(0, 0, 0)
				&& Global.ZoneLocations[Global.LoadingElementIndex] != Null);
				"Zones"
				If(Global.LoadingElementIndex > 0);
					Create In-World Text(All Players(All Teams), Global.ZoneText[Global.LoadingElementIndex],
						Global.ZoneLocations[Global.LoadingElementIndex] + Vector(0, 3, 0), 3, Clip Against Surfaces, Visible To, Color(White),
						Default Visibility);
					Wait(0.030, Ignore Condition);
					Create Effect(All Players(All Teams), Light Shaft, Global.EffectColors[2], Global.ZoneLocations[Global.LoadingElementIndex], 2,
						Visible To);
				End;
			End;
			Wait(0.030, Ignore Condition);
			Global.LoadingElementIndex += 1;
			Loop;
		"Load Portals"
		Else If(Global.LoadingObjectIndex == 3);
			If(Global.PortalLocations[Global.LoadingElementIndex] != Vector(0, 0, 0)
				&& Global.PortalLocations[Global.LoadingElementIndex] != Null);
				If(Global.EffectBehaviors[0] == False);
					Create In-World Text(Filtered Array(All Players(All Teams), Current Array Element.PortalUnlocked[Evaluate Once(
						Global.LoadingElementIndex)] == True), Global.PortalText[Evaluate Once(Global.LoadingElementIndex)],
						Global.PortalLocations[Evaluate Once(Global.LoadingElementIndex)], 1.500, Clip Against Surfaces, Visible To, Color(White),
						Default Visibility);
					Wait(0.030, Ignore Condition);
					Create Effect(Filtered Array(All Players(All Teams), Current Array Element.PortalUnlocked[Evaluate Once(Global.LoadingElementIndex)
						] == True), Good Aura, Global.EffectColors[3], Global.PortalLocations[Evaluate Once(Global.LoadingElementIndex)], 1,
						Visible To);
				Else;
					Create In-World Text(All Players(All Teams), Global.PortalText[Evaluate Once(Global.LoadingElementIndex)],
						Global.PortalLocations[Evaluate Once(Global.LoadingElementIndex)], 1.500, Clip Against Surfaces, Visible To, Color(White),
						Default Visibility);
					Wait(0.030, Ignore Condition);
					Create In-World Text(Filtered Array(All Players(All Teams), Current Array Element.PortalUnlocked[Evaluate Once(
						Global.LoadingElementIndex)] == False), Custom String("L O C K E D"), Global.PortalLocations[Evaluate Once(
						Global.LoadingElementIndex)] + Vector(0, -0.500, 0), 1.250, Clip Against Surfaces, Visible To, Color(Orange),
						Default Visibility);
					Wait(0.030, Ignore Condition);
					Create Effect(All Players(All Teams), Good Aura, Global.EffectColors[3], Global.PortalLocations[Evaluate Once(
						Global.LoadingElementIndex)], 1, Visible To);
				End;
			End;
			Wait(0.030, Ignore Condition);
			Global.LoadingElementIndex += 1;
			Loop;
		"Load Heroes"
		Else If(Global.LoadingObjectIndex == 4);
			If(Global.HeroLocations[Global.LoadingElementIndex] != Vector(0, 0, 0)
				&& Global.HeroLocations[Global.LoadingElementIndex] != Null);
				Wait(0.030, Ignore Condition);
				If(Global.LoadingElementIndex == 0);
					Create In-World Text(All Players(All Teams), Hero Icon String(Global.HeroRoster[0]), Global.HeroLocations[0], 2,
						Clip Against Surfaces, Visible To, Color(White), Default Visibility);
					Create Effect(All Players(All Teams), Bad Aura, Global.EffectColors[5], Global.HeroLocations[0], 1, Visible To);
				Else If(Global.LoadingElementIndex == 1);
					Create In-World Text(Filtered Array(All Players(All Teams), Current Array Element.HeroesUnlocked[0] == True), Hero Icon String(
						Global.HeroRoster[1]), Global.HeroLocations[1], 2, Clip Against Surfaces, Visible To, Color(White), Default Visibility);
					Create In-World Text(Filtered Array(All Players(All Teams), Current Array Element.HeroesUnlocked[0] == False), Custom String(
						"{0} - {1}", Hero Icon String(Global.HeroRoster[1]), String("受到鎖定")), Global.HeroLocations[1], 2, Clip Against Surfaces,
						Visible To, Color(White), Default Visibility);
					Create Effect(All Players(All Teams), Bad Aura, Global.EffectColors[6], Global.HeroLocations[1], 1, Visible To);
				Else If(Global.LoadingElementIndex == 2);
					Create In-World Text(Filtered Array(All Players(All Teams), Current Array Element.HeroesUnlocked[1] == True), Hero Icon String(
						Global.HeroRoster[2]), Global.HeroLocations[2], 2, Clip Against Surfaces, Visible To, Color(White), Default Visibility);
					Create In-World Text(Filtered Array(All Players(All Teams), Current Array Element.HeroesUnlocked[1] == False), Custom String(
						"{0} - {1}", Hero Icon String(Global.HeroRoster[2]), String("受到鎖定")), Global.HeroLocations[2], 2, Clip Against Surfaces,
						Visible To, Color(White), Default Visibility);
					Create Effect(All Players(All Teams), Bad Aura, Global.EffectColors[7], Global.HeroLocations[2], 1, Visible To);
				Else If(Global.LoadingElementIndex == 3);
					Create In-World Text(Filtered Array(All Players(All Teams), Current Array Element.HeroesUnlocked[2] == True), Hero Icon String(
						Global.HeroRoster[3]), Global.HeroLocations[3], 2, Clip Against Surfaces, Visible To, Color(White), Default Visibility);
					Create In-World Text(Filtered Array(All Players(All Teams), Current Array Element.HeroesUnlocked[2] == False), Custom String(
						"{0} - {1}", Hero Icon String(Global.HeroRoster[3]), String("受到鎖定")), Global.HeroLocations[3], 2, Clip Against Surfaces,
						Visible To, Color(White), Default Visibility);
					Create Effect(All Players(All Teams), Bad Aura, Global.EffectColors[8], Global.HeroLocations[3], 1, Visible To);
				Else If(Global.LoadingElementIndex == 4);
					Create In-World Text(Filtered Array(All Players(All Teams), Current Array Element.HeroesUnlocked[3] == True), Hero Icon String(
						Global.HeroRoster[4]), Global.HeroLocations[4], 2, Clip Against Surfaces, Visible To, Color(White), Default Visibility);
					Create In-World Text(Filtered Array(All Players(All Teams), Current Array Element.HeroesUnlocked[3] == False), Custom String(
						"{0} - {1}", Hero Icon String(Global.HeroRoster[4]), String("受到鎖定")), Global.HeroLocations[4], 2, Clip Against Surfaces,
						Visible To, Color(White), Default Visibility);
					Create Effect(All Players(All Teams), Bad Aura, Global.EffectColors[9], Global.HeroLocations[4], 1, Visible To);
				Else If(Global.LoadingElementIndex == 5);
					Create Effect(Filtered Array(Local Player, Local Player.Victory == True && Hero Of(Local Player) == Hero(卡西迪)), Bad Aura,
						Global.EffectColors[10], Global.HeroLocations[5], 1, Visible To);
				End;
			End;
			Wait(0.030, Ignore Condition);
			Global.LoadingElementIndex += 1;
			Loop;
		"Load Unlocks"
		Else If(Global.LoadingObjectIndex == 5);
			If(Global.UnlockLocations[Global.LoadingElementIndex] != Vector(0, 0, 0)
				&& Global.UnlockLocations[Global.LoadingElementIndex] != Null);
				Create In-World Text(All Players(All Teams), Hero Icon String(Global.HeroRoster[Global.LoadingElementIndex + 1]),
					Global.UnlockLocations[Global.LoadingElementIndex], 2, Clip Against Surfaces, Visible To, Color(White), Default Visibility);
				Wait(0.030, Ignore Condition);
				If(Global.LoadingElementIndex == 0);
					Create Effect(All Players(All Teams), Sparkles, Global.EffectColors[6], Global.UnlockLocations[0], 1, Visible To);
				Else If(Global.LoadingElementIndex == 1);
					Create Effect(All Players(All Teams), Sparkles, Global.EffectColors[7], Global.UnlockLocations[1], 1, Visible To);
				Else If(Global.LoadingElementIndex == 2);
					Create Effect(All Players(All Teams), Sparkles, Global.EffectColors[8], Global.UnlockLocations[2], 1, Visible To);
				Else If(Global.LoadingElementIndex == 3);
					Create Effect(All Players(All Teams), Sparkles, Global.EffectColors[9], Global.UnlockLocations[3], 1, Visible To);
				End;
			End;
			Wait(0.030, Ignore Condition);
			Global.LoadingElementIndex += 1;
			Loop;
		"Load Speedrun"
		Else If(Global.LoadingObjectIndex == 6);
			If(Global.SpeedrunLocation != Vector(0, 0, 0) && Global.SpeedrunLocation != Null);
				Create In-World Text(Filtered Array(All Players(All Teams), Current Array Element.SpeedRunMode == False), Custom String(
					"Speedrun Mode"), Global.SpeedrunLocation, 1, Clip Against Surfaces, Visible To, Color(Red), Default Visibility);
				Wait(0.030, Ignore Condition);
				Create Effect(Filtered Array(All Players(All Teams), Current Array Element.SpeedRunMode == False), Good Aura, Color(Red),
					Global.SpeedrunLocation, 1, Visible To);
				Wait(0.030, Ignore Condition);
				Create In-World Text(Filtered Array(All Players(All Teams), Current Array Element.SpeedRunMode == True), Custom String(
					"Speedrun Mode"), Global.SpeedrunLocation, 1, Clip Against Surfaces, Visible To, Color(Green), Default Visibility);
				Wait(0.030, Ignore Condition);
				Create Effect(Filtered Array(All Players(All Teams), Current Array Element.SpeedRunMode == True), Good Aura, Color(Green),
					Global.SpeedrunLocation, 1, Visible To);
			End;
			Wait(0.030, Ignore Condition);
			Global.LoadingElementIndex += 1;
			Loop;
		"Load Bouncepads"
		Else If(Global.LoadingObjectIndex == 7);
			If(Global.BouncepadLocations[Global.LoadingElementIndex] != Vector(0, 0, 0)
				&& Global.BouncepadLocations[Global.LoadingElementIndex] != Null);
				Create Effect(All Players(All Teams), Orb, Global.EffectColors[4], Global.BouncepadLocations[Global.LoadingElementIndex], 1,
					Visible To);
			End;
			Wait(0.030, Ignore Condition);
			Global.LoadingElementIndex += 1;
			Loop;
		End;
		Create Effect(All Players(All Teams), Sphere, First Of(Global.EffectColors), Direction Towards(Evaluate Once(
			Global.LavaLocations[Global.LoadingElementIndex]), Eye Position(Local Player)) * Evaluate Once(
			Global.LavaRadius[Global.LoadingElementIndex] * Vector(0.015, 0.001, 0.015)) + Evaluate Once(
			Global.LavaLocations[Global.LoadingElementIndex]), Evaluate Once(Global.LavaRadius[Global.LoadingElementIndex]),
			Visible To Position and Radius);
	}
}

規則("In World Text Effects")
{
	事件
	{
		Ongoing - Global;
	}

	動作
	{
		"\"Heroes\" Text"
		If(Global.InWorldText[0] != Vector(0, 0, 0));
			Create In-World Text(All Players(All Teams), String("英雄"), Global.InWorldText[0], 3, Clip Against Surfaces, Visible To and String,
				Color(White), Default Visibility);
		End;
	}
}

規則("---------- FUNCTIONALITY ----------")
{
	事件
	{
		Ongoing - Global;
	}
}

規則("Spawn Room Move for Dva")
{
	事件
	{
		Ongoing - Each Player;
		All;
		All;
	}

	條件
	{
		Is In Spawn Room(Event Player) == True;
		Hero Of(Event Player) == Hero(D.Va);
	}

	動作
	{
		Teleport(Event Player, Event Player.Respawn);
		Wait(0.025, Ignore Condition);
		Set Facing(Event Player, Global.SpawnFaceDirection, To World);
	}
}

規則("Lava Death by T1m")
{
	事件
	{
		Ongoing - Each Player;
		All;
		All;
	}

	條件
	{
		Has Spawned(Event Player) == True;
		Is Alive(Event Player) == True;
		Hero Of(Event Player) != Global.HeroRoster[5];
		Event Player.CanDie == True;
		Is Dummy Bot(Event Player) != True;
		Hero Of(Event Player) != Global.EasterEggHeroes[Global.EasterEggMaxCount];
	}

	動作
	{
		Wait(0.050 + Global.MaxObjectIndex[0] * 0.001, Ignore Condition);
		If(Hero Of(Event Player) == Hero(莫伊拉) && Is Using Ability 1(Event Player));
			Loop If Condition Is True;
		Else If(Hero Of(Event Player) == Hero(死神) && Is Using Ability 1(Event Player));
			Loop If Condition Is True;
		Else If(Hero Of(Event Player) == Hero(小美) && Is Using Ability 1(Event Player));
			Loop If Condition Is True;
		End;
		If(Is True For Any(Global.LavaLocations, Magnitude Of((Position Of(Event Player) + Vector(0, 0.300, 0) - Current Array Element)
			/ Vector(0.985, 0.999, 0.985)) < Global.LavaRadius[Current Array Index]));
			Kill(Event Player, Null);
		End;
		Loop If Condition Is True;
	}
}

規則("Respawning")
{
	事件
	{
		Player Died;
		All;
		All;
	}

	條件
	{
		Is Dummy Bot(Event Player) != True;
	}

	動作
	{
		If(Event Player.Victory == False);
			Event Player.Deaths += 1;
		End;
		Wait(0.400, Ignore Condition);
		Teleport(Event Player, Event Player.Respawn);
		Wait(0.400, Ignore Condition);
		If(Hero Of(Event Player) == Hero(D.Va));
			Wait(0.400, Ignore Condition);
		End;
		Resurrect(Event Player);
		Clear Status(Event Player, Phased Out);
		If(Global.PlayerBehaviors[0] == 2);
			Set Status(Event Player, Null, Phased Out, 9999);
		End;
		If(Event Player.Respawn == Global.ZoneLocations[0]);
			If(Count Of(Filtered Array(Event Player.HeroesUnlocked, Current Array Element == True)) == 0);
				Event Player.Timer = 0;
				Event Player.Deaths = 0;
			End;
		End;
		Set Ability Cooldown(Event Player, Button(Ability 1), 0);
		Set Ability Cooldown(Event Player, Button(Ability 2), 0);
		Set Ability Cooldown(Event Player, Button(Secondary Fire), 0);
	}
}

規則("Checkpoint")
{
	事件
	{
		Ongoing - Each Player;
		All;
		All;
	}

	條件
	{
		Has Spawned(Event Player) == True;
		Hero Of(Event Player) != Global.HeroRoster[5];
		Event Player.CanDie == True;
		Is True For Any(Filtered Array(Global.CheckpointLocations, Current Array Element != Vector(0, 0, 0)), Distance Between(Position Of(
			Event Player), Current Array Element) < 1) == True;
		Hero Of(Event Player) != Global.EasterEggHeroes[Global.EasterEggMaxCount];
	}

	動作
	{
		For Player Variable(Event Player, LoopCounter, 0, Global.MaxObjectIndex[1] + 1, 1);
			If(Global.CheckpointLocations[Event Player.LoopCounter] != Vector(0, 0, 0)
				&& Global.CheckpointLocations[Event Player.LoopCounter] != 0);
				If(Event Player.Respawn != Global.CheckpointLocations[Event Player.LoopCounter]);
					If(Distance Between(Position Of(Event Player), Global.CheckpointLocations[Event Player.LoopCounter]) <= 1);
						Event Player.Respawn = Global.CheckpointLocations[Event Player.LoopCounter];
						Event Player.AlternativeRespawn = Global.CheckpointLocations[Event Player.LoopCounter];
						Play Effect(All Players(All Teams), Buff Explosion Sound, Color(White), Position Of(Event Player), 100);
						Small Message(Event Player, Custom String("Checkpoint!"));
						Break;
					End;
				End;
			End;
		End;
	}
}

規則("Zones")
{
	事件
	{
		Ongoing - Each Player;
		All;
		All;
	}

	條件
	{
		Has Spawned(Event Player) == True;
		Hero Of(Event Player) != Global.HeroRoster[5];
		Event Player.CanDie == True;
		Hero Of(Event Player) != Global.EasterEggHeroes[Global.EasterEggMaxCount];
	}

	動作
	{
		If(Global.ZoneLocations[1] != Vector(0, 0, 0));
			If(Event Player.Respawn != Global.ZoneLocations[1] && Distance Between(Position Of(Event Player), Global.ZoneLocations[1]) <= 2);
				Event Player.Respawn = Global.ZoneLocations[1];
				Small Message(Event Player, Custom String("{0}!", String("檢查點")));
				Play Effect(All Players(All Teams), Buff Explosion Sound, Color(White), Position Of(Event Player), 100);
				If(Event Player.ZonesReached[0] == False);
					Event Player.ZonesReached[0] = True;
					Big Message(All Players(All Teams), Custom String(" \r\n{0} {1} {2}", Event Player, String("抵達"), Global.ZoneText[1]));
					Call Subroutine(UpdateCount);
				End;
			End;
		End;
		If(Global.ZoneLocations[2] != Vector(0, 0, 0));
			If(Event Player.Respawn != Global.ZoneLocations[2] && Distance Between(Position Of(Event Player), Global.ZoneLocations[2]) <= 2);
				Event Player.Respawn = Global.ZoneLocations[2];
				Event Player.AlternativeRespawn = Global.ZoneLocations[2];
				Small Message(Event Player, Custom String("{0}!", String("檢查點")));
				Play Effect(All Players(All Teams), Buff Explosion Sound, Color(White), Position Of(Event Player), 100);
				If(Event Player.ZonesReached[1] == False);
					Event Player.ZonesReached[1] = True;
					Big Message(All Players(All Teams), Custom String(" \r\n{0} {1} {2}", Event Player, String("抵達"), Global.ZoneText[2]));
					Call Subroutine(UpdateCount);
				End;
			End;
		End;
		If(Global.ZoneLocations[3] != Vector(0, 0, 0));
			If(Event Player.Respawn != Global.ZoneLocations[3] && Distance Between(Position Of(Event Player), Global.ZoneLocations[3]) <= 2);
				Event Player.Respawn = Global.ZoneLocations[3];
				Event Player.AlternativeRespawn = Global.ZoneLocations[3];
				Small Message(Event Player, Custom String("{0}!", String("檢查點")));
				Play Effect(All Players(All Teams), Buff Explosion Sound, Color(White), Position Of(Event Player), 100);
				If(Event Player.ZonesReached[2] == False);
					Event Player.ZonesReached[2] = True;
					Big Message(All Players(All Teams), Custom String(" \r\n{0} {1} {2}", Event Player, String("抵達"), Global.ZoneText[3]));
					Call Subroutine(UpdateCount);
				End;
			End;
		End;
		If(Global.ZoneLocations[4] != Vector(0, 0, 0));
			If(Event Player.Respawn != Global.ZoneLocations[4] && Distance Between(Position Of(Event Player), Global.ZoneLocations[4]) <= 2);
				Event Player.Respawn = Global.ZoneLocations[4];
				Event Player.AlternativeRespawn = Global.ZoneLocations[4];
				Small Message(Event Player, Custom String("{0}!", String("檢查點")));
				Play Effect(All Players(All Teams), Buff Explosion Sound, Color(White), Position Of(Event Player), 100);
				If(Event Player.ZonesReached[3] == False);
					Event Player.ZonesReached[3] = True;
					Big Message(All Players(All Teams), Custom String(" \r\n{0} {1} {2}", Event Player, String("抵達"), Global.ZoneText[4]));
					Call Subroutine(UpdateCount);
				End;
			End;
		End;
		Wait(0.100, Ignore Condition);
		Loop If Condition Is True;
	}
}

規則("Hero Swap")
{
	事件
	{
		Ongoing - Each Player;
		All;
		All;
	}

	條件
	{
		Is Button Held(Event Player, Button(Interact)) == True;
		Is True For Any(Filtered Array(Global.HeroLocations, Current Array Element != Vector(0, 0, 0)), Distance Between(Eye Position(
			Event Player), Current Array Element) < 1.500) == True;
	}

	動作
	{
		For Player Variable(Event Player, LoopCounter, 0, Global.MaxObjectIndex[4] + 1, 1);
			If(Global.HeroLocations[Event Player.LoopCounter] != Vector(0, 0, 0) && Global.HeroLocations[Event Player.LoopCounter] != 0);
				If(Event Player.HeroesUnlocked[Event Player.LoopCounter - 1] == True || Event Player.LoopCounter == 0);
					If(Distance Between(Eye Position(Event Player), Global.HeroLocations[Event Player.LoopCounter]) <= 1.500);
						Start Forcing Player To Be Hero(Event Player, Global.HeroRoster[Event Player.LoopCounter]);
						If(Event Player.Respawn == Global.ZoneLocations[1]);
							Event Player.AlternativeRespawn = Null;
						End;
						Break;
					End;
				End;
			End;
		End;
	}
}

規則("Hero Swap Tip")
{
	事件
	{
		Ongoing - Each Player;
		All;
		All;
	}

	條件
	{
		Has Spawned(Event Player) == True;
		Is True For Any(Filtered Array(Global.HeroLocations, Current Array Element != Vector(0, 0, 0)), Distance Between(Eye Position(
			Event Player), Current Array Element) < 1.500) == True;
	}

	動作
	{
		Wait(2, Abort When False);
		Small Message(Event Player, Custom String("Press [Interact]"));
	}
}

規則("Hero Unlock")
{
	事件
	{
		Ongoing - Each Player;
		All;
		All;
	}

	條件
	{
		Has Spawned(Event Player) == True;
		Event Player.HeroCount < Global.MaxHeroes;
		Hero Of(Event Player) != Global.HeroRoster[5];
		Is True For Any(Filtered Array(Global.UnlockLocations, Current Array Element != Vector(0, 0, 0)), Distance Between(Eye Position(
			Event Player), Current Array Element) < 1.500) == True;
		Hero Of(Event Player) != Global.EasterEggHeroes[Global.EasterEggMaxCount];
	}

	動作
	{
		For Player Variable(Event Player, LoopCounter, 0, Global.MaxObjectIndex[5] + 1, 1);
			If(Global.UnlockLocations[Event Player.LoopCounter] != Vector(0, 0, 0) && Global.UnlockLocations[Event Player.LoopCounter] != 0);
				If(Event Player.HeroesUnlocked[Event Player.LoopCounter] == False);
					If(Distance Between(Eye Position(Event Player), Global.UnlockLocations[Event Player.LoopCounter]) <= 1.500);
						Big Message(All Players(All Teams), Custom String(" \r\n{0} {1} {2}", Event Player, String("得到解鎖"), Hero Icon String(
							Global.HeroRoster[Event Player.LoopCounter + 1])));
						Event Player.HeroesUnlocked[Event Player.LoopCounter] = True;
						Play Effect(All Players(All Teams), Buff Explosion Sound, Color(White), Position Of(Event Player), 100);
						Call Subroutine(UpdateCount);
						Break;
					End;
				End;
			End;
		End;
	}
}

規則("Portal Usage")
{
	事件
	{
		Ongoing - Each Player;
		All;
		All;
	}

	條件
	{
		Is Button Held(Event Player, Button(Interact)) == True;
		Is True For Any(Filtered Array(Global.PortalLocations, Current Array Element != Vector(0, 0, 0)), Distance Between(Eye Position(
			Event Player), Current Array Element) < 1.500) == True;
	}

	動作
	{
		For Player Variable(Event Player, LoopCounter, 0, Global.MaxObjectIndex[3] + 1, 1);
			If(Event Player.PortalUnlocked[Event Player.LoopCounter] == True);
				If(Global.PortalLocations[Event Player.LoopCounter] != Vector(0, 0, 0) && Global.PortalLocations[Event Player.LoopCounter] != 0);
					If(Global.PortalDestinations[Event Player.LoopCounter] != Vector(0, 0, 0)
						&& Global.PortalDestinations[Event Player.LoopCounter] != 0);
						If(Distance Between(Eye Position(Event Player), Global.PortalLocations[Event Player.LoopCounter]) <= 1.500);
							Teleport(Event Player, Global.PortalDestinations[Event Player.LoopCounter]);
							Break;
						End;
					End;
				End;
			End;
		End;
	}
}

規則("Unlocking a Portal (reach the destination)")
{
	事件
	{
		Ongoing - Each Player;
		All;
		All;
	}

	條件
	{
		Hero Of(Event Player) != Global.HeroRoster[5];
		Is True For Any(Filtered Array(Global.PortalDestinations, Current Array Element != Vector(0, 0, 0)), Distance Between(
			Current Array Element, Position Of(Event Player)) < 2) == True;
		Hero Of(Event Player) != Global.EasterEggHeroes[Global.EasterEggMaxCount];
	}

	動作
	{
		For Player Variable(Event Player, LoopCounter, 0, Global.MaxObjectIndex[3] + 1, 1);
			If(Global.PortalDestinations[Event Player.LoopCounter] != Vector(0, 0, 0)
				&& Global.PortalDestinations[Event Player.LoopCounter] != 0);
				If(Event Player.PortalUnlocked[Event Player.LoopCounter] == False);
					If(Distance Between(Position Of(Event Player), Global.PortalDestinations[Event Player.LoopCounter]) <= 2);
						Event Player.PortalUnlocked[Event Player.LoopCounter] = True;
					End;
				End;
			End;
		End;
	}
}

規則("Teleport Back to a Spawn Point")
{
	事件
	{
		Ongoing - Each Player;
		All;
		All;
	}

	條件
	{
		Is Button Held(Event Player, Button(Ultimate)) == True;
		Hero Of(Event Player) != Global.HeroRoster[5];
	}

	動作
	{
		If(Distance Between(Position Of(Event Player), Event Player.Respawn) > 1);
			Teleport(Event Player, Event Player.Respawn);
			Wait(0.050, Ignore Condition);
			Play Effect(All Players(All Teams), Buff Explosion Sound, Color(White), Position Of(Event Player), 100);
		Else;
			If(Event Player.AlternativeRespawn != Null);
				If(Distance Between(Position Of(Event Player), Event Player.AlternativeRespawn) > 1);
					Teleport(Event Player, Event Player.AlternativeRespawn);
					Event Player.Respawn = Event Player.AlternativeRespawn;
				Else;
					If(Event Player.ZonesReached[0] == True);
						Teleport(Event Player, Global.ZoneLocations[1]);
					End;
				End;
			End;
		End;
	}
}

規則("Bouncepad Interaction by T1m")
{
	事件
	{
		Ongoing - Each Player;
		All;
		All;
	}

	條件
	{
		Is True For Any(Filtered Array(Global.BouncepadLocations, Current Array Element != Vector(0, 0, 0)), Distance Between(Position Of(
			Event Player), Current Array Element) < 1.500) == True;
	}

	動作
	{
		Event Player.LoopCounter = Index Of Array Value(Global.BouncepadLocations, First Of(Filtered Array(Global.BouncepadLocations,
			Distance Between(Position Of(Event Player), Current Array Element)
			<= 1.500 && Current Array Element != 0 && Current Array Element != Vector(0, 0, 0))));
		Apply Impulse(Event Player, Up, Square Root(Global.BouncepadStrength[Event Player.LoopCounter] ^ 2 + 35 * (1.500 + Y Component Of(
			Global.BouncepadLocations[Event Player.LoopCounter] - Position Of(Event Player)))), To World, Cancel Contrary Motion);
		Play Effect(All Players(All Teams), Debuff Impact Sound, Color(White), Event Player, 75);
	}
}

規則("Victory")
{
	事件
	{
		Ongoing - Each Player;
		All;
		All;
	}

	條件
	{
		Event Player.Victory == False;
		Event Player.ZoneCount == Global.MaxZones;
		Event Player.HeroCount == Global.MaxHeroes;
	}

	動作
	{
		Event Player.Victory = True;
		If(Event Player.SpeedRunMode == True);
			Destroy HUD Text(Event Player.MyHUD[1]);
			Create HUD Text(Event Player, Custom String("Finished"), Custom String("Deaths: {0}", Event Player.Deaths), Custom String(
				"Time: {0}:{1}", Round To Integer(Event Player.Timer / 60, Down), Round To Integer(Event Player.Timer % 60, Down)), Top, 1,
				Color(Purple), Color(Green), Color(Green), Visible To and String, Default Visibility);
			Event Player.MyHUD[0] = Last Text ID;
			Big Message(All Players(All Teams), Custom String(" \r\n{0} FINISHED IN {1}:{2}!", Event Player, Round To Integer(
				Event Player.Timer / 60, Down), Round To Integer(Event Player.Timer % 60, Down)));
		Else;
			Big Message(All Players(All Teams), Custom String(" \r\n{0} {1}!", Event Player, String("已完成")));
		End;
	}
}

規則("Secret Hero")
{
	事件
	{
		Ongoing - Each Player;
		All;
		All;
	}

	條件
	{
		Has Spawned(Event Player) == True;
		Global.HeroLocations[5] != Vector(0, 0, 0);
		Distance Between(Eye Position(Event Player), Global.HeroLocations[5]) <= 1.500;
		Hero Of(Event Player) != Global.HeroRoster[5];
		Hero Of(Event Player) == Hero(卡西迪);
		Event Player.Victory == True;
	}

	動作
	{
		Start Forcing Player To Be Hero(Event Player, Global.HeroRoster[5]);
		If(Event Player.FoundSecretHero == False);
			Big Message(All Players(All Teams), Custom String(" \r\n{0} {1} {2}", Event Player, String("被發現"), Hero Icon String(
				Global.HeroRoster[5])));
		End;
		Wait(0.250, Ignore Condition);
		Teleport(Event Player, Global.ZoneLocations[1]);
		Event Player.FoundSecretHero = True;
	}
}

規則("Secret Hero Jump")
{
	事件
	{
		Ongoing - Each Player;
		All;
		All;
	}

	條件
	{
		Is Button Held(Event Player, Button(Jump)) == True;
		Hero Of(Event Player) == Global.HeroRoster[5];
	}

	動作
	{
		Apply Impulse(Event Player, Vector(0, 1, 0), 30, To World, Cancel Contrary Motion);
		Play Effect(All Players(All Teams), Debuff Impact Sound, Color(White), Event Player, 75);
	}
}

規則("Secret Hero Speed")
{
	事件
	{
		Ongoing - Each Player;
		All;
		All;
	}

	條件
	{
		Hero Of(Event Player) == Global.HeroRoster[5];
	}

	動作
	{
		Set Move Speed(Event Player, 250);
		Wait(0.250, Ignore Condition);
		Loop If Condition Is True;
		Set Move Speed(Event Player, 100);
	}
}

規則("Self-Restart")
{
	事件
	{
		Ongoing - Each Player;
		All;
		All;
	}

	條件
	{
		Is Button Held(Event Player, Button(Ultimate)) == True;
	}

	動作
	{
		Wait(0.750, Abort When False);
		Small Message(Event Player, Custom String("Resetting Progress... 3"));
		Wait(0.750, Abort When False);
		Small Message(Event Player, Custom String("Resetting Progress... 2"));
		Wait(0.750, Abort When False);
		Small Message(Event Player, Custom String("Resetting Progress... 1"));
		Wait(0.750, Abort When False);
		Small Message(Event Player, Custom String("Progress Reset!"));
		Wait(0.050, Ignore Condition);
		Call Subroutine(ResetProgress);
	}
}

規則("Speed Run Toggle")
{
	事件
	{
		Ongoing - Each Player;
		All;
		All;
	}

	條件
	{
		Is Button Held(Event Player, Button(Interact)) == True;
		Global.SpeedrunLocation != Vector(0, 0, 0);
		Distance Between(Eye Position(Event Player), Global.SpeedrunLocation) < 1.500;
	}

	動作
	{
		If(Event Player.SpeedRunMode == False);
			Wait(0.250, Ignore Condition);
			If(!Is Button Held(Event Player, Button(Interact)));
				Small Message(Event Player, Custom String(
					"WARNING: Enabling speed run will reset all progress\r\n        Hold [Interact] to enable speed run mode"));
			End;
			Wait(1, Abort When False);
			Event Player.SpeedRunMode = True;
			Event Player.Victory = False;
			Call Subroutine(ResetProgress);
			Create HUD Text(Event Player, Custom String("Speed Run"), Custom String("Deaths: {0}", Event Player.Deaths), Custom String(
				"Time: {0}:{1}", Round To Integer(Event Player.Timer / 60, Down), Round To Integer(Event Player.Timer % 60, Down)), Top, 1,
				Color(Orange), Color(Red), Color(Orange), Visible To and String, Default Visibility);
			Event Player.MyHUD[1] = Last Text ID;
			Small Message(Event Player, Custom String("Speed Run Mode Activated"));
		Else;
			Destroy HUD Text(Event Player.MyHUD[0]);
			Destroy HUD Text(Event Player.MyHUD[1]);
			Event Player.SpeedRunMode = False;
			Small Message(Event Player, Custom String("Speed Run Mode Disabled"));
		End;
	}
}

規則("Speed Run Timer Increase")
{
	事件
	{
		Ongoing - Each Player;
		All;
		All;
	}

	條件
	{
		Event Player.SpeedRunMode == True;
		Event Player.Victory == False;
		Distance Between(Position Of(Event Player), Global.ZoneLocations[0]) > 1;
	}

	動作
	{
		Wait(0.992, Abort When False);
		Event Player.Timer += 1;
		Loop;
	}
}

規則("Tutorial Mode Toggle")
{
	事件
	{
		Ongoing - Each Player;
		All;
		All;
	}

	條件
	{
		Event Player.TutorialMode == False;
		Is Button Held(Event Player, Button(Reload)) == True;
	}

	動作
	{
		Wait(0.250, Abort When False);
		Small Message(Event Player, Custom String("Starting Tutorial Mode... 3"));
		Wait(0.750, Abort When False);
		Small Message(Event Player, Custom String("Starting Tutorial Mode... 2"));
		Wait(0.750, Abort When False);
		Small Message(Event Player, Custom String("Starting Tutorial Mode... 1"));
		Wait(0.750, Abort When False);
		Small Message(Event Player, Custom String("Tutorial Mode Activated!"));
		Event Player.TutorialMode = True;
		If(Is Button Held(Event Player, Button(Interact)));
			Event Player.HeroesUnlocked = Array(True, True, True, True);
			Event Player.ZonesReached = Array(True, True, True, True);
			Event Player.PortalUnlocked = Array(True, True, True, True, True, True, True, True, True, True, True, True, True, True, True);
			Event Player.ZoneCount = 4;
			Event Player.HeroCount = 4;
			Teleport(Event Player, Position Of(Global.ZoneLocations[1]));
		End;
	}
}

規則("Tutorial Mode Set Checkpoint")
{
	事件
	{
		Ongoing - Each Player;
		All;
		All;
	}

	條件
	{
		Event Player.TutorialMode == True;
		Is Button Held(Event Player, Button(Reload)) == True;
		Distance Between(Position Of(Event Player), Event Player.Respawn) > 2;
		Vertical Speed Of(Event Player) == 0;
		Horizontal Speed Of(Event Player) == 0;
	}

	動作
	{
		Wait(0.500, Abort When False);
		Small Message(Event Player, Custom String("Checkpoint Set!"));
		Event Player.Respawn = Position Of(Event Player);
		Event Player.AlternativeRespawn = Position Of(Event Player);
		Play Effect(All Players(All Teams), Buff Explosion Sound, Color(White), Position Of(Event Player), 100);
	}
}

規則("Reset Progress | Subroutine")
{
	事件
	{
		Subroutine;
		ResetProgress;
	}

	動作
	{
		Set Facing(Event Player, Global.SpawnFaceDirection, To World);
		Start Forcing Player To Be Hero(Event Player, Global.HeroRoster[0]);
		If(Event Player.SpeedRunMode == True && Event Player.Victory == True);
			Create HUD Text(Event Player, Custom String("Speed Run"), Custom String("Deaths: {0}", Event Player.Deaths), Custom String(
				"Time: {0}:{1}", Round To Integer(Event Player.Timer / 60, Down), Round To Integer(Event Player.Timer % 60, Down)), Top, 1,
				Color(Orange), Color(Red), Color(Orange), Visible To and String, Default Visibility);
			Event Player.MyHUD[1] = Last Text ID;
		End;
		Destroy HUD Text(Event Player.MyHUD[0]);
		Event Player.PortalUnlocked = Global.PortalUnlockDefaults;
		Event Player.Victory = False;
		Event Player.ZonesReached[0] = False;
		Event Player.ZonesReached[1] = False;
		Event Player.ZonesReached[2] = False;
		Event Player.ZonesReached[3] = False;
		Event Player.HeroesUnlocked[0] = False;
		Event Player.HeroesUnlocked[1] = False;
		Event Player.HeroesUnlocked[2] = False;
		Event Player.HeroesUnlocked[3] = False;
		If(Global.ZoneLocations[0] != Vector(0, 0, 0));
			Event Player.Respawn = Global.ZoneLocations[0];
		End;
		Event Player.Deaths = 0;
		Event Player.Timer = 0;
		Event Player.ZoneCount = 0;
		Event Player.HeroCount = 0;
		Event Player.AlternativeRespawn = Null;
		Teleport(Event Player, Event Player.Respawn);
		Wait(0.100, Ignore Condition);
		Play Effect(All Players(All Teams), Ring Explosion Sound, Color(White), Position Of(Event Player), 100);
		Event Player.TutorialMode = False;
		Event Player.FoundSecretHero = False;
		Event Player.EasterEggsFound = Empty Array;
		Event Player.EasterEggsFound[Global.EasterEggMaxCount] = False;
		Event Player.EasterEggCount = False;
	}
}

規則("Update Count | Subroutine")
{
	事件
	{
		Subroutine;
		UpdateCount;
	}

	動作
	{
		Event Player.ZoneCount = Count Of(Filtered Array(Event Player.ZonesReached, Current Array Element == True));
		Event Player.HeroCount = Count Of(Filtered Array(Event Player.HeroesUnlocked, Current Array Element == True));
		If(Event Player.HeroCount > Global.MaxHeroes);
			Event Player.HeroCount = Global.MaxHeroes;
		End;
	}
}

規則("Match Time Initiation")
{
	事件
	{
		Ongoing - Global;
	}

	條件
	{
		Is Game In Progress == True;
		Is Assembling Heroes == False;
	}

	動作
	{
		Create HUD Text(All Players(All Teams), Null, Null, Custom String("Match Time - {0}:{1}", Round To Integer(Global.MatchTime / 60,
			Down), Round To Integer(Global.MatchTime % 60, Down)), Top, -10, Color(White), Color(White), Color(White),
			Visible To and String, Default Visibility);
		Set Match Time(3599);
		Wait(5, Ignore Condition);
		Pause Match Time;
	}
}

規則("Match Time Warning")
{
	事件
	{
		Ongoing - Global;
	}

	條件
	{
		"10 Min Warning"
		Global.MatchTime < 600;
	}

	動作
	{
		Big Message(All Players(All Teams), Custom String("10 Minute Warning"));
		Wait(300, Ignore Condition);
		Big Message(All Players(All Teams), Custom String("5 Minute Warning"));
		Wait(240, Ignore Condition);
		Big Message(All Players(All Teams), Custom String("1 Minute Warning"));
		Wait(60, Ignore Condition);
		Big Message(All Players(All Teams), Custom String("Match Time Is Up!"));
		Enable Built-In Game Mode Completion;
		Enable Game Mode In-World UI(All Players(All Teams));
		Enable Game Mode HUD(All Players(All Teams));
		Set Match Time(0);
		Wait(0.250, Ignore Condition);
		Unpause Match Time;
	}
}

規則("Match Time")
{
	事件
	{
		Ongoing - Global;
	}

	動作
	{
		Wait(0.998, Ignore Condition);
		Global.MatchTime -= 1;
		If(Global.MatchTime <= 0);
			Abort;
		End;
		Loop;
	}
}

規則("Skip Assembling Heroes")
{
	事件
	{
		Ongoing - Global;
	}

	條件
	{
		Is Assembling Heroes == True;
	}

	動作
	{
		Set Match Time(1);
	}
}

規則("Anti Crash Activation")
{
	事件
	{
		Ongoing - Global;
	}

	條件
	{
		Global.AntiCrash == False;
		Server Load > 200;
	}

	動作
	{
		Wait(1, Abort When False);
		Small Message(All Players(All Teams), Custom String("Anti crash system activated"));
		Set Slow Motion(10);
		Global.AntiCrash = True;
	}
}

規則("Anti Crash Deactivation")
{
	事件
	{
		Ongoing - Global;
	}

	條件
	{
		Global.AntiCrash == True;
		Server Load < 175;
	}

	動作
	{
		Set Slow Motion(100);
		Global.AntiCrash = False;
	}
}

規則("Bot")
{
	事件
	{
		Ongoing - Global;
	}

	動作
	{
		Create Dummy Bot(Hero(安娜), Team 1, 11, Vector(-26, 6, 11), Vector(1, 1, 1));
		Create Dummy Bot(Hero(安娜), Team 1, 12, Vector(5, 6, -11), Vector(1, 11, 1));
		Create Dummy Bot(Hero(安娜), Team 1, 13, Vector(-7, 14, 18.500), Vector(1, 1, 1));
		Create Dummy Bot(Hero(安娜), Team 1, 14, Vector(4.120, 9, 24.280), Vector(0, 0, 0));
	}
}

規則("Disable collision spawn door")
{
	事件
	{
		Ongoing - Each Player;
		All;
		All;
	}

	條件
	{
		Distance Between(Eye Position(Event Player), Vector(-3.600, 15.400, 19.200)) < 1.800;
	}

	動作
	{
		Disable Movement Collision With Environment(Event Player, False);
		Wait(0.100, Ignore Condition);
		Loop If Condition Is True;
		Enable Movement Collision With Environment(Event Player);
	}
}

規則("Disable collision spawn door")
{
	事件
	{
		Ongoing - Each Player;
		All;
		All;
	}

	條件
	{
		Distance Between(Eye Position(Event Player), Vector(-3.600, 16.800, 19.200)) < 1.800;
	}

	動作
	{
		Disable Movement Collision With Environment(Event Player, False);
		Wait(0.100, Ignore Condition);
		Loop If Condition Is True;
		Enable Movement Collision With Environment(Event Player);
	}
}

規則("Barrier")
{
	事件
	{
		Ongoing - Each Player;
		All;
		All;
	}

	條件
	{
		Distance Between(Event Player, Vector(-4.170, 9.060, 3.580)) < 12;
		Z Component Of(Position Of(Event Player)) > 2.230;
		Z Component Of(Position Of(Event Player)) < 4.530;
		Event Player.Victory != True;
		Hero Of(Event Player) == Hero(慈悲);
	}

	動作
	{
		Kill(Event Player, Null);
	}
}

規則("Beams")
{
	事件
	{
		Ongoing - Each Player;
		All;
		All;
	}

	動作
	{
		停用 Create Beam Effect(Filtered Array(Event Player, Event Player.Victory != True && Hero Of(Event Player) == Hero(慈悲)), Grapple Beam,
			Vector(-4.170, 9, 2.230), Vector(-4.170, 9, 4.530), Color(Yellow), Visible To Position and Radius);
		Create Beam Effect(Filtered Array(Event Player, Event Player.Victory != True && Hero Of(Event Player) == Hero(慈悲)), Bad Beam,
			Vector(-12, 9, 2.230), Vector(5, 9, 2.230), Color(Yellow), Visible To Position and Radius);
		Create Beam Effect(Filtered Array(Event Player, Event Player.Victory != True && Hero Of(Event Player) == Hero(慈悲)), Bad Beam,
			Vector(-12, 9, 4.530), Vector(5, 9, 4.530), Color(Green), Visible To Position and Radius);
		Create Beam Effect(Filtered Array(Event Player, Event Player.Victory != True && Hero Of(Event Player) == Hero(慈悲)), Bad Beam,
			Vector(-12, 15, 2.230), Vector(5, 15, 2.230), Color(Purple), Visible To Position and Radius);
		Create Beam Effect(Filtered Array(Event Player, Event Player.Victory != True && Hero Of(Event Player) == Hero(慈悲)), Bad Beam,
			Vector(-12, 15, 4.530), Vector(5, 15, 4.530), Color(Red), Visible To Position and Radius);
		Create Beam Effect(Filtered Array(Event Player, Event Player.Victory != True && Hero Of(Event Player) == Hero(慈悲)), Bad Beam,
			Vector(-12, 3, 2.230), Vector(5, 3, 2.230), Color(Blue), Visible To Position and Radius);
		Create Beam Effect(Filtered Array(Event Player, Event Player.Victory != True && Hero Of(Event Player) == Hero(慈悲)), Bad Beam,
			Vector(-12, 3, 4.530), Vector(5, 3, 4.530), Color(Orange), Visible To Position and Radius);
		Create Beam Effect(Filtered Array(Event Player, Event Player.Victory != True && Hero Of(Event Player) == Hero(慈悲)), Bad Beam,
			Vector(-12, 12, 2.230), Vector(5, 12, 2.230), Color(Sky Blue), Visible To Position and Radius);
		Create Beam Effect(Filtered Array(Event Player, Event Player.Victory != True && Hero Of(Event Player) == Hero(慈悲)), Bad Beam,
			Vector(-12, 12, 4.530), Vector(5, 12, 4.530), Color(Lime Green), Visible To Position and Radius);
		Create Beam Effect(Filtered Array(Event Player, Event Player.Victory != True && Hero Of(Event Player) == Hero(慈悲)), Bad Beam,
			Vector(-12, 6, 2.230), Vector(5, 6, 2.230), Color(Rose), Visible To Position and Radius);
		Create Beam Effect(Filtered Array(Event Player, Event Player.Victory != True && Hero Of(Event Player) == Hero(慈悲)), Bad Beam,
			Vector(-12, 6, 4.530), Vector(5, 6, 4.530), Color(Violet), Visible To Position and Radius);
		Create In-World Text(Filtered Array(Event Player, Hero Of(Event Player) == Hero(慈悲) && Event Player.Victory == False),
			Custom String("{0} Go around {0}", Icon String(Arrow: Left)), Vector(-5, 16, 5), 2, Clip Against Surfaces,
			Visible To Position and String, Color(White), Default Visibility);
	}
}

規則("mercy CD")
{
	事件
	{
		Ongoing - Each Player;
		All;
		All;
	}

	條件
	{
		Hero Of(Event Player) == Hero(慈悲);
		Is Standing(Event Player) == True;
		Ability Cooldown(Event Player, Button(Ability 1)) >= 2;
	}

	動作
	{
		Set Ability Cooldown(Event Player, Button(Ability 1), 1.500);
	}
}

規則("Soul orbs")
{
	事件
	{
		Ongoing - Each Player;
		All;
		All;
	}

	條件
	{
		Is Dummy Bot(Event Player) == True;
		Hero Of(Event Player) == Hero(安娜);
	}

	動作
	{
		停用 Create In-World Text(All Players(All Teams), Custom String("{0}", Position Of(Event Player)), Event Player, 1,
			Clip Against Surfaces, Visible To Position and String, Color(White), Default Visibility);
		停用 Set Gravity(Event Player, 0);
		Wait(0.250, Ignore Condition);
		Start Damage Over Time(Event Player, Null, 9999, 140);
		Set Respawn Max Time(Event Player, 9999);
	}
}

規則("Anti Mercy to Zone 2 Club")
{
	事件
	{
		Ongoing - Each Player;
		All;
		All;
	}

	條件
	{
		Distance Between(Event Player, Vector(-31.570, 10.420, -33.820)) < 2;
		Event Player.Victory != True;
		Hero Of(Event Player) == Hero(慈悲);
	}

	動作
	{
		Kill(Event Player, Null);
		Small Message(Event Player, Custom String("Use {0} to get to {1}", Hero Icon String(Hero(卡西迪)), Global.ZoneText[2]));
	}
}

規則("^Kill")
{
	事件
	{
		Ongoing - Each Player;
		All;
		All;
	}

	動作
	{
		Create Effect(Filtered Array(Event Player, Hero Of(Event Player) == Hero(慈悲) && Event Player.Victory != True), Sphere, Color(
			Yellow), Vector(-31.570, 10.430, -33.820), 2, Visible To Position and Radius);
	}
}

規則("Dva death")
{
	事件
	{
		Ongoing - Each Player;
		All;
		All;
	}

	條件
	{
		Has Spawned(Event Player) == True;
		Is Alive(Event Player) == True;
		Hero Of(Event Player) == Hero(D.Va);
		Event Player.CanDie == True;
		Is In Alternate Form(Event Player) == True;
	}

	動作
	{
		Wait(0.200, Abort When False);
		Kill(Event Player, Null);
		Loop If Condition Is True;
	}
}

規則("Fake portal effect")
{
	事件
	{
		Ongoing - Each Player;
		All;
		All;
	}

	動作
	{
		Create Effect(Filtered Array(Event Player, Hero Of(Event Player) == Hero(卡西迪) && Event Player.Victory == True), Good Aura, Color(
			White), Vector(14.870, 7.300, 17), 1, Visible To Position and Radius);
	}
}

規則("Fake portal")
{
	事件
	{
		Ongoing - Each Player;
		All;
		All;
	}

	條件
	{
		Distance Between(Position Of(Event Player), Vector(14.870, 7.300, 17)) <= 1.500;
		Event Player.Victory == True;
		Hero Of(Event Player) == Hero(卡西迪);
	}

	動作
	{
		Teleport(Event Player, Vector(50, -0.900, 25.190));
		End;
	}
}

規則("---------- EASTER EGGS ----------")
{
	事件
	{
		Ongoing - Global;
	}
}

規則("Data")
{
	事件
	{
		Ongoing - Global;
	}

	動作
	{
		"Total Number of Easter Eggs"
		Global.EasterEggMaxCount = 5;
		"Easter Egg Hero"
		Global.EasterEggHeroes[Global.EasterEggMaxCount] = Hero(安娜);
		"Hero Swap Location"
		Global.EasterEggLocations[Global.EasterEggMaxCount] = Vector(-17.640, 76.770, -45.520);
		"Hero Swap Color"
		Global.EasterEggColors[Global.EasterEggMaxCount] = Global.EffectColors[10];
		"Heroes Used to Find Easter Eggs"
		Global.EasterEggHeroes[0] = Hero(慈悲);
		Global.EasterEggHeroes[1] = Hero(卡西迪);
		Global.EasterEggHeroes[2] = Hero(源氏);
		Global.EasterEggHeroes[3] = Hero(路西歐);
		Global.EasterEggHeroes[4] = Hero(D.Va);
		"Easter Egg Locations"
		Global.EasterEggLocations[0] = Vector(3, 11.100, 52);
		Global.EasterEggLocations[1] = Vector(12.640, 2.300, -2.300);
		Global.EasterEggLocations[2] = Vector(-133, 7.600, 11.360);
		Global.EasterEggLocations[3] = Vector(-52.570, 1.240, -23.450);
		Global.EasterEggLocations[4] = Vector(-16.420, 26.380, -16.180);
		"Easter Egg Colors"
		Global.EasterEggColors[0] = Global.EffectColors[5];
		Global.EasterEggColors[1] = Global.EffectColors[6];
		Global.EasterEggColors[2] = Global.EffectColors[7];
		Global.EasterEggColors[3] = Global.EffectColors[8];
		Global.EasterEggColors[4] = Global.EffectColors[9];
	}
}

規則("Effects")
{
	事件
	{
		Ongoing - Global;
	}

	動作
	{
		"Player Hud Text"
		Create HUD Text(Local Player.EasterEggCount >= True ? Local Player : Null, Null, Null, Custom String(
			"Easter Eggs Found\r\n{0} / {1}", Local Player.EasterEggCount, Global.EasterEggMaxCount), Left, 3, Color(Aqua), Color(Aqua),
			Color(Blue), Visible To and String, Default Visibility);
		"Easter Egg Effects"
		For Global Variable(ForLoop, False, Global.EasterEggMaxCount, True);
			Create Effect(Filtered Array(Append To Array(Players On Hero(Evaluate Once(Global.EasterEggHeroes[Global.ForLoop]), All Teams),
				Null), !Current Array Element.EasterEggsFound[Evaluate Once(Global.ForLoop)] && Current Array Element.Victory), Sparkles,
				Global.EasterEggColors[Evaluate Once(Global.ForLoop)], Global.EasterEggLocations[Evaluate Once(Global.ForLoop)], True,
				Visible To);
			Wait(0.032, Ignore Condition);
		End;
		"Hero Swap"
		Create Effect(Filtered Array(All Players(All Teams), Current Array Element.EasterEggCount >= Global.EasterEggMaxCount), Bad Aura,
			Global.EasterEggColors[Global.EasterEggMaxCount], Global.EasterEggLocations[Global.EasterEggMaxCount], True, Visible To);
		Create In-World Text(Filtered Array(All Players(All Teams), Current Array Element.EasterEggCount >= Global.EasterEggMaxCount),
			Hero Icon String(Global.EasterEggHeroes[Global.EasterEggMaxCount]),
			Global.EasterEggLocations[Global.EasterEggMaxCount] + Vector(False, -0.300, False), 2, Clip Against Surfaces, Visible To,
			Color(White), Default Visibility);
	}
}

規則("Pickup")
{
	事件
	{
		Ongoing - Each Player;
		All;
		All;
	}

	條件
	{
		Has Spawned(Event Player) == True;
		Event Player.Victory == True;
		Event Player.EasterEggCount < Global.EasterEggMaxCount;
		Is True For Any(Global.EasterEggLocations, Distance Between(Eye Position(Event Player), Current Array Element) < 1.500) == True;
	}

	動作
	{
		For Player Variable(Event Player, LoopCounter, False, Global.EasterEggMaxCount, True);
			If(!Event Player.EasterEggsFound[Event Player.LoopCounter]);
				If(Hero Of(Event Player) == Global.EasterEggHeroes[Event Player.LoopCounter]);
					If(Distance Between(Eye Position(Event Player), Global.EasterEggLocations[Event Player.LoopCounter]) <= 1.500);
						Event Player.EasterEggsFound[Event Player.LoopCounter] = True;
						Event Player.EasterEggCount += True;
						Play Effect(All Players(All Teams), Buff Explosion Sound, Color(White), Position Of(Event Player), 100);
						Small Message(Event Player, Custom String("You Found An Easter Egg!"));
						Break;
					End;
				End;
			End;
		End;
	}
}

規則("Hero Swap")
{
	事件
	{
		Ongoing - Each Player;
		All;
		All;
	}

	條件
	{
		Is Button Held(Event Player, Button(Interact)) == True;
		Distance Between(Eye Position(Event Player), Global.EasterEggLocations[Global.EasterEggMaxCount]) < 1.500;
	}

	動作
	{
		If(Event Player.EasterEggCount >= Global.EasterEggMaxCount);
			Start Forcing Player To Be Hero(Event Player, Global.EasterEggHeroes[Global.EasterEggMaxCount]);
			If(Event Player.Respawn == Global.ZoneLocations[True]);
				Event Player.AlternativeRespawn = Null;
			End;
			If(!Event Player.EasterEggsFound[Global.EasterEggMaxCount]);
				Big Message(All Players(All Teams), Custom String(" \r\n{0} {1} {2}", Event Player, String("被發現"), Hero Icon String(
					Global.EasterEggHeroes[Global.EasterEggMaxCount])));
				Event Player.EasterEggsFound[Global.EasterEggMaxCount] = True;
			End;
		End;
	}
}

規則("Easter Egg Jump")
{
	事件
	{
		Ongoing - Each Player;
		All;
		All;
	}

	條件
	{
		Is Button Held(Event Player, Button(Jump)) == True;
		Hero Of(Event Player) == Global.EasterEggHeroes[Global.EasterEggMaxCount];
	}

	動作
	{
		Apply Impulse(Event Player, Up, 30, To World, Cancel Contrary Motion);
		Play Effect(All Players(All Teams), Debuff Impact Sound, Color(White), Event Player, 75);
	}
}

規則("Easter Egg Speed")
{
	事件
	{
		Ongoing - Each Player;
		All;
		All;
	}

	條件
	{
		Hero Of(Event Player) == Global.EasterEggHeroes[Global.EasterEggMaxCount];
	}

	動作
	{
		Set Move Speed(Event Player, 300);
		Wait(0.250, Ignore Condition);
		Loop If Condition Is True;
		Set Move Speed(Event Player, 100);
	}
}