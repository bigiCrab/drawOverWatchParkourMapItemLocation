變數
{
	全域:
		0: EditorVersion
		1: ShareCode
		2: Version
		3: Author
		4: MaxZones
		5: MaxHeroes
		6: HeroRoster
		7: LavaLocations
		8: LavaRadius
		9: CheckpointLocations
		10: ZoneLocations
		11: ZoneText
		12: PortalLocations
		13: PortalDestinations
		14: PortalUnlockDefaults
		15: PortalText
		16: HeroLocations
		17: UnlockLocations
		18: SpeedrunLocation
		19: BouncepadLocations
		20: BouncepadStrength
		21: EffectColors
		22: EffectBehaviors
		23: PlayerBehaviors
		24: SpawnFaceDirection
		25: MaxObjectIndex
		26: LoadingObjectIndex
		27: LoadingElementIndex
		28: InWorldText
		29: MatchTime
		30: AntiCrash

	玩家:
		0: Victory
		1: TutorialMode
		2: ZonesReached
		3: HeroesUnlocked
		4: ZoneCount
		5: HeroCount
		6: FoundSecretHero
		7: Respawn
		8: AlternativeRespawn
		9: SpeedRunMode
		10: Timer
		11: Deaths
		12: MyHUD
		13: CanDie
		14: LoopCounter
		15: PortalUnlocked
		17: Impact
		18: SymmetraPads
}

subroutines
{
	0: ResetProgress
	1: UpdateCount
}

規則("----- DATA -----")
{
	事件
	{
		Ongoing - Global;
	}
}

規則("Release Information")
{
	事件
	{
		Ongoing - Global;
	}

	動作
	{
		Global.EditorVersion = Custom String("Classic 1.2");
		Global.ShareCode = Custom String("NSFSG");
		Global.Version = Custom String("1.0.0 (new release)");
		Global.Author = Custom String("Lyoko6600");
	}
}

規則("Goal Counts")
{
	事件
	{
		Ongoing - Global;
	}

	動作
	{
		Global.MaxZones = 4;
		Global.MaxHeroes = 4;
	}
}

規則("Hero Roster")
{
	事件
	{
		Ongoing - Global;
	}

	動作
	{
		"Spawning Hero - Yellow"
		Global.HeroRoster[0] = Hero(席格馬);
		"Unlockable Hero 1 - Green"
		Global.HeroRoster[1] = Hero(艾西);
		"Unlockable Hero 2 - Blue"
		Global.HeroRoster[2] = Hero(辛梅塔);
		"Unlockable Hero 3 - Purple"
		Global.HeroRoster[3] = Hero(小美);
		"Unlockable Hero 4 - Red"
		Global.HeroRoster[4] = Hero(歐瑞莎);
		"Secret Hero - White"
		Global.HeroRoster[5] = Hero(托比昂);
	}
}

規則("Lava Locations")
{
	事件
	{
		Ongoing - Global;
	}

	動作
	{
		Global.LavaLocations[0] = Vector(-107.590, -55.542, -76.215);
		Global.LavaLocations[1] = Vector(-92.517, -176.435, -63.762);
		Global.LavaLocations[2] = Vector(-72.599, -179.351, -50.408);
		Global.LavaLocations[3] = Vector(-98.089, -1.350, -37.428);
		Global.LavaLocations[4] = Vector(-105.901, -4.899, -47.848);
		Global.LavaLocations[5] = Vector(-109.560, -6.195, -60.757);
		Global.LavaLocations[6] = Vector(-97.453, -3.550, -46.187);
		Global.LavaLocations[7] = Vector(-79.790, -5.800, -79.316);
		Global.LavaLocations[8] = Vector(-90.282, -9.100, -78.173);
		Global.LavaLocations[9] = Vector(-76.974, 9.983, -71.474);
		Global.LavaLocations[10] = Vector(-50.767, -122.600, -64.369);
		Global.LavaLocations[11] = Vector(-91.989, 1.900, -35.896);
		Global.LavaLocations[12] = Vector(-107.516, 1.350, -54.695);
		Global.LavaLocations[13] = Vector(-64.296, 0.800, -67.261);
		Global.LavaLocations[14] = Vector(-63.690, 0.200, -76.060);
		Global.LavaLocations[15] = Vector(-65.602, 3, -70.096);
		Global.LavaLocations[16] = Vector(-54.689, -23.964, -80.177);
		Global.LavaLocations[17] = Vector(-1.112, 6, -94.401);
		Global.LavaLocations[18] = Vector(-30.266, -52.233, -59.423);
		Global.LavaLocations[19] = Vector(-36.747, -52.764, -38.362);
		Global.LavaLocations[20] = Vector(-29.085, -44.036, -77.004);
		Global.LavaLocations[21] = Vector(-24.635, -24.162, -97.483);
		Global.LavaLocations[22] = Vector(-27.903, -35.722, -96.911);
		Global.LavaLocations[23] = Vector(-4.152, 3.462, -66.118);
		Global.LavaLocations[24] = Vector(-0.867, 10.434, -67.462);
		Global.LavaLocations[25] = Vector(-9.842, 13.828, -64.133);
		Global.LavaLocations[26] = Vector(-14.086, -41.050, -79.292);
		Global.LavaLocations[27] = Vector(-2.763, 13.820, -79.273);
		Global.LavaLocations[28] = Vector(8.390, -78.400, -64.800);
		Global.LavaLocations[29] = Vector(31.670, -49.600, -60.477);
		Global.LavaLocations[30] = Vector(27.142, 6.929, -101.226);
		Global.LavaLocations[31] = Vector(139.897, 6.061, -46.576);
		Global.LavaLocations[32] = Vector(108.096, 1.448, -23.834);
		Global.LavaLocations[33] = Vector(121.455, 6.886, -29.819);
		Global.LavaLocations[34] = Vector(116.446, 7.408, -35.622);
		Global.LavaLocations[35] = Vector(128.474, 9.455, -19.346);
		Global.LavaLocations[36] = Vector(-45.065, 12.011, -42.999);
		Global.LavaLocations[37] = Vector(-49.375, 11.994, -43.237);
		Global.LavaLocations[38] = Vector(-28.318, 15.176, -35.269);
		Global.LavaLocations[39] = Vector(-23.855, 14.322, -47.404);
		Global.LavaLocations[40] = Vector(-26.572, 14.313, -59.390);
		Global.LavaLocations[41] = Vector(34.149, 11.500, -59.243);
		Global.LavaLocations[42] = Vector(5.455, 10.757, -71.198);
		Global.LavaLocations[43] = Vector(15.646, 14.399, -71.209);
		Global.LavaLocations[44] = Vector(16.483, -49.613, -89.504);
		Global.LavaLocations[45] = Vector(27.627, 11.549, -88.840);
		Global.LavaLocations[46] = Vector(9.180, 6, -101.198);
		Global.LavaLocations[47] = Vector(33.234, 15.733, -78.511);
		Global.LavaLocations[48] = Vector(30.374, 12.100, -85.200);
		Global.LavaLocations[49] = Vector(28.219, 16.810, -84.484);
		Global.LavaLocations[50] = Vector(27.187, 15.422, -71.441);
		Global.LavaLocations[51] = Vector(13.331, 13.976, -79.189);
		Global.LavaLocations[52] = Vector(27.192, 10.174, -80.430);
		Global.LavaLocations[53] = Vector(31.362, 11.433, -95.252);
		Global.LavaLocations[54] = Vector(49.154, 9.900, -67.698);
		"Addition"
		Global.LavaLocations[55] = Vector(-60.860, 3.330, -56);
		Global.LavaLocations[56] = Vector(-13, 7, -68.600);
		停用 Global.LavaLocations[57] = Vector(38.996, 11.200, -66.189);
		Global.LavaLocations[58] = Vector(48.018, -24.537, -77.386);
		Global.LavaLocations[59] = Vector(57.296, -23.370, -89.965);
		Global.LavaLocations[60] = Vector(67.153, 12.254, -73.159);
		Global.LavaLocations[61] = Vector(63.473, 13.765, -83.186);
		Global.LavaLocations[62] = Vector(65.648, 8.473, -83.241);
		Global.LavaLocations[63] = Vector(65.105, 9.743, -95.534);
		Global.LavaLocations[64] = Vector(57.058, -29.435, -99.336);
		Global.LavaLocations[65] = Vector(52.261, 12.539, -99.575);
		Global.LavaLocations[66] = Vector(78.208, -40.038, -124.949);
		Global.LavaLocations[67] = Vector(71.177, -39.135, -125.042);
		Global.LavaLocations[68] = Vector(81.666, 8.025, -126.848);
		Global.LavaLocations[69] = Vector(78.188, 7.502, -124.316);
		Global.LavaLocations[70] = Vector(68.458, 8.025, -122.645);
		Global.LavaLocations[71] = Vector(68.319, 8.025, -126.662);
		Global.LavaLocations[72] = Vector(78.170, 7.502, -128.275);
		Global.LavaLocations[73] = Vector(78.412, -36.838, -118.459);
		Global.LavaLocations[74] = Vector(81.903, 8.025, -122.690);
		Global.LavaLocations[75] = Vector(81.860, 8.025, -118.734);
		Global.LavaLocations[76] = Vector(69.056, 8.522, -115.518);
		Global.LavaLocations[77] = Vector(69.394, -29.291, -79.734);
		Global.LavaLocations[78] = Vector(81.776, -13.924, -84.537);
		Global.LavaLocations[79] = Vector(99.885, -3.446, -85.357);
		Global.LavaLocations[80] = Vector(87.651, 4.294, -99.062);
		Global.LavaLocations[81] = Vector(102.389, -3.393, -81.160);
		Global.LavaLocations[82] = Vector(74.428, 6.568, -95.275);
		Global.LavaLocations[83] = Vector(103.616, 8.706, -62.189);
		Global.LavaLocations[84] = Vector(82.879, -12.006, -61.961);
		Global.LavaLocations[85] = Vector(92.172, -24.824, -47.076);
		Global.LavaLocations[86] = Vector(107.129, 5.517, -33.899);
		Global.LavaLocations[87] = Vector(109.602, 10.525, -46.488);
		Global.LavaLocations[88] = Vector(125.840, 8.379, -46.555);
		Global.LavaLocations[89] = Vector(138.614, 7.214, -25.330);
		Global.LavaLocations[90] = Vector(149.557, 12.193, -30.505);
		Global.LavaLocations[91] = Vector(129.583, 12.386, -30.453);
		Global.LavaLocations[92] = Vector(139.987, 6.361, -46.466);
		Global.LavaLocations[93] = Vector(79.152, 7.023, -40.003);
		Global.LavaLocations[94] = Vector(85.574, 9.335, -38.130);
		Global.LavaLocations[95] = Vector(77.215, 3.500, -24.962);
		Global.LavaLocations[96] = Vector(98.483, 8.659, -9.201);
		Global.LavaLocations[97] = Vector(89.654, -7.400, -17.716);
		Global.LavaLocations[98] = Vector(91.042, 13.989, -31.110);
		Global.LavaLocations[99] = Vector(118.325, 13.973, -23.799);
		Global.LavaLocations[100] = Vector(0, 0, 0);
		Global.LavaLocations[101] = Vector(0, 0, 0);
		Global.LavaLocations[102] = Vector(0, 0, 0);
		Global.LavaLocations[103] = Vector(0, 0, 0);
		Global.LavaLocations[104] = Vector(0, 0, 0);
		Global.LavaLocations[105] = Vector(0, 0, 0);
		Global.LavaLocations[106] = Vector(0, 0, 0);
		Global.LavaLocations[107] = Vector(0, 0, 0);
		Global.LavaLocations[108] = Vector(0, 0, 0);
		Global.LavaLocations[109] = Vector(0, 0, 0);
		Global.LavaLocations[110] = Vector(0, 0, 0);
		Global.LavaLocations[111] = Vector(0, 0, 0);
		Global.LavaLocations[112] = Vector(0, 0, 0);
		Global.LavaLocations[113] = Vector(0, 0, 0);
		Global.LavaLocations[114] = Vector(0, 0, 0);
		Global.LavaLocations[115] = Vector(0, 0, 0);
		Global.LavaLocations[116] = Vector(0, 0, 0);
		Global.LavaLocations[117] = Vector(0, 0, 0);
		Global.LavaLocations[118] = Vector(0, 0, 0);
		Global.LavaLocations[119] = Vector(0, 0, 0);
		Global.LavaLocations[120] = Vector(0, 0, 0);
		Global.LavaLocations[121] = Vector(0, 0, 0);
		Global.LavaLocations[122] = Vector(0, 0, 0);
		Global.LavaLocations[123] = Vector(0, 0, 0);
		Global.LavaLocations[124] = Vector(0, 0, 0);
		Global.LavaLocations[125] = Vector(0, 0, 0);
		Global.LavaLocations[126] = Vector(0, 0, 0);
		Global.LavaLocations[127] = Vector(0, 0, 0);
		Global.LavaLocations[128] = Vector(0, 0, 0);
		Global.LavaLocations[129] = Vector(0, 0, 0);
		Global.LavaLocations[130] = Vector(0, 0, 0);
		Global.LavaLocations[131] = Vector(0, 0, 0);
		Global.LavaLocations[132] = Vector(0, 0, 0);
		Global.LavaLocations[133] = Vector(0, 0, 0);
		Global.LavaLocations[134] = Vector(0, 0, 0);
		Global.LavaLocations[135] = Vector(0, 0, 0);
		Global.LavaLocations[136] = Vector(0, 0, 0);
		Global.LavaLocations[137] = Vector(0, 0, 0);
		Global.LavaLocations[138] = Vector(0, 0, 0);
		Global.LavaLocations[139] = Vector(0, 0, 0);
		Global.LavaLocations[140] = Vector(0, 0, 0);
		Global.LavaLocations[141] = Vector(0, 0, 0);
		Global.LavaLocations[142] = Vector(0, 0, 0);
		Global.LavaLocations[143] = Vector(0, 0, 0);
		Global.LavaLocations[144] = Vector(0, 0, 0);
		Global.LavaLocations[145] = Vector(0, 0, 0);
		Global.LavaLocations[146] = Vector(0, 0, 0);
		Global.LavaLocations[147] = Vector(0, 0, 0);
		Global.LavaLocations[148] = Vector(0, 0, 0);
		Global.LavaLocations[149] = Vector(0, 0, 0);
		Global.LavaLocations[150] = Vector(0, 0, 0);
		Global.LavaLocations[151] = Vector(0, 0, 0);
		Global.LavaLocations[152] = Vector(0, 0, 0);
		Global.LavaLocations[153] = Vector(0, 0, 0);
		Global.LavaLocations[154] = Vector(0, 0, 0);
		Global.LavaLocations[155] = Vector(0, 0, 0);
		Global.LavaLocations[156] = Vector(0, 0, 0);
		Global.LavaLocations[157] = Vector(0, 0, 0);
		Global.LavaLocations[158] = Vector(0, 0, 0);
		Global.LavaLocations[159] = Vector(0, 0, 0);
	}
}

規則("Lava Radius")
{
	事件
	{
		Ongoing - Global;
	}

	動作
	{
		Global.LavaRadius[0] = 60.700;
		Global.LavaRadius[1] = 181.802;
		Global.LavaRadius[2] = 185.602;
		Global.LavaRadius[3] = 6.700;
		Global.LavaRadius[4] = 9.700;
		Global.LavaRadius[5] = 11.500;
		Global.LavaRadius[6] = 9.200;
		Global.LavaRadius[7] = 11.800;
		Global.LavaRadius[8] = 14.100;
		Global.LavaRadius[9] = 7.900;
		Global.LavaRadius[10] = 129.899;
		Global.LavaRadius[11] = 3.500;
		Global.LavaRadius[12] = 4.300;
		Global.LavaRadius[13] = 6.200;
		Global.LavaRadius[14] = 7.900;
		Global.LavaRadius[15] = 4.300;
		Global.LavaRadius[16] = 30.500;
		Global.LavaRadius[17] = 9.200;
		Global.LavaRadius[18] = 60.900;
		Global.LavaRadius[19] = 60.400;
		Global.LavaRadius[20] = 52.100;
		Global.LavaRadius[21] = 34.800;
		Global.LavaRadius[22] = 46.500;
		Global.LavaRadius[23] = 9.800;
		Global.LavaRadius[24] = 6.400;
		Global.LavaRadius[25] = 5.300;
		Global.LavaRadius[26] = 49.200;
		Global.LavaRadius[27] = 2.500;
		Global.LavaRadius[28] = 87.699;
		Global.LavaRadius[29] = 58.900;
		Global.LavaRadius[30] = 3.700;
		Global.LavaRadius[31] = 15.800;
		Global.LavaRadius[32] = 9.200;
		Global.LavaRadius[33] = 3.100;
		Global.LavaRadius[34] = 7.600;
		Global.LavaRadius[35] = 9.300;
		Global.LavaRadius[36] = 2.300;
		Global.LavaRadius[37] = 2.300;
		Global.LavaRadius[38] = 3.400;
		Global.LavaRadius[39] = 3.300;
		Global.LavaRadius[40] = 3;
		Global.LavaRadius[41] = 2;
		Global.LavaRadius[42] = 2;
		Global.LavaRadius[43] = 4;
		Global.LavaRadius[44] = 57.100;
		Global.LavaRadius[45] = 2;
		Global.LavaRadius[46] = 2;
		Global.LavaRadius[47] = 4.500;
		Global.LavaRadius[48] = 4;
		Global.LavaRadius[49] = 4.300;
		Global.LavaRadius[50] = 6;
		Global.LavaRadius[51] = 3;
		Global.LavaRadius[52] = 3.400;
		Global.LavaRadius[53] = 2;
		Global.LavaRadius[54] = 2.300;
		"Addition"
		Global.LavaRadius[55] = 9.900;
		Global.LavaRadius[56] = 4.100;
		停用 Global.LavaRadius[57] = 2;
		Global.LavaRadius[58] = 34.100;
		Global.LavaRadius[59] = 32.300;
		Global.LavaRadius[60] = 2;
		Global.LavaRadius[61] = 3;
		Global.LavaRadius[62] = 5.100;
		Global.LavaRadius[63] = 3;
		Global.LavaRadius[64] = 36.600;
		Global.LavaRadius[65] = 3;
		Global.LavaRadius[66] = 47.700;
		Global.LavaRadius[67] = 47.100;
		Global.LavaRadius[68] = 1;
		Global.LavaRadius[69] = 1.500;
		Global.LavaRadius[70] = 1;
		Global.LavaRadius[71] = 1;
		Global.LavaRadius[72] = 1.500;
		Global.LavaRadius[73] = 44.400;
		Global.LavaRadius[74] = 1;
		Global.LavaRadius[75] = 1;
		Global.LavaRadius[76] = 4.100;
		Global.LavaRadius[77] = 40.100;
		Global.LavaRadius[78] = 24;
		Global.LavaRadius[79] = 10.100;
		Global.LavaRadius[80] = 4.800;
		Global.LavaRadius[81] = 9.900;
		Global.LavaRadius[82] = 2.800;
		Global.LavaRadius[83] = 10.700;
		Global.LavaRadius[84] = 21.300;
		Global.LavaRadius[85] = 36.600;
		Global.LavaRadius[86] = 8.100;
		Global.LavaRadius[87] = 9.400;
		Global.LavaRadius[88] = 8.400;
		Global.LavaRadius[89] = 6.100;
		Global.LavaRadius[90] = 6.100;
		Global.LavaRadius[91] = 3.800;
		Global.LavaRadius[92] = 3.400;
		Global.LavaRadius[93] = 6.500;
		Global.LavaRadius[94] = 2.800;
		Global.LavaRadius[95] = 5.500;
		Global.LavaRadius[96] = 8.200;
		Global.LavaRadius[97] = 18.300;
		Global.LavaRadius[98] = 7.700;
		Global.LavaRadius[99] = 4.800;
		Global.LavaRadius[100] = 0;
		Global.LavaRadius[101] = 0;
		Global.LavaRadius[102] = 0;
		Global.LavaRadius[103] = 0;
		Global.LavaRadius[104] = 0;
		Global.LavaRadius[105] = 0;
		Global.LavaRadius[106] = 0;
		Global.LavaRadius[107] = 0;
		Global.LavaRadius[108] = 0;
		Global.LavaRadius[109] = 0;
		Global.LavaRadius[110] = 0;
		Global.LavaRadius[111] = 0;
		Global.LavaRadius[112] = 0;
		Global.LavaRadius[113] = 0;
		Global.LavaRadius[114] = 0;
		Global.LavaRadius[115] = 0;
		Global.LavaRadius[116] = 0;
		Global.LavaRadius[117] = 0;
		Global.LavaRadius[118] = 0;
		Global.LavaRadius[119] = 0;
		Global.LavaRadius[120] = 0;
		Global.LavaRadius[121] = 0;
		Global.LavaRadius[122] = 0;
		Global.LavaRadius[123] = 0;
		Global.LavaRadius[124] = 0;
		Global.LavaRadius[125] = 0;
		Global.LavaRadius[126] = 0;
		Global.LavaRadius[127] = 0;
		Global.LavaRadius[128] = 0;
		Global.LavaRadius[129] = 0;
		Global.LavaRadius[130] = 0;
		Global.LavaRadius[131] = 0;
		Global.LavaRadius[132] = 0;
		Global.LavaRadius[133] = 0;
		Global.LavaRadius[134] = 0;
		Global.LavaRadius[135] = 0;
		Global.LavaRadius[136] = 0;
		Global.LavaRadius[137] = 0;
		Global.LavaRadius[138] = 0;
		Global.LavaRadius[139] = 0;
		Global.LavaRadius[140] = 0;
		Global.LavaRadius[141] = 0;
		Global.LavaRadius[142] = 0;
		Global.LavaRadius[143] = 0;
		Global.LavaRadius[144] = 0;
		Global.LavaRadius[145] = 0;
		Global.LavaRadius[146] = 0;
		Global.LavaRadius[147] = 0;
		Global.LavaRadius[148] = 0;
		Global.LavaRadius[149] = 0;
		Global.LavaRadius[150] = 0;
		Global.LavaRadius[151] = 0;
		Global.LavaRadius[152] = 0;
		Global.LavaRadius[153] = 0;
		Global.LavaRadius[154] = 0;
		Global.LavaRadius[155] = 0;
		Global.LavaRadius[156] = 0;
		Global.LavaRadius[157] = 0;
		Global.LavaRadius[158] = 0;
		Global.LavaRadius[159] = 0;
	}
}

規則("Checkpoint Locations")
{
	事件
	{
		Ongoing - Global;
	}

	動作
	{
		Global.CheckpointLocations[0] = Vector(-90.862, 6.229, -44.422);
		Global.CheckpointLocations[1] = Vector(-25.366, 14.443, -85.040);
		Global.CheckpointLocations[2] = Vector(35.191, 7.801, -46.927);
		Global.CheckpointLocations[3] = Vector(-53.682, 8.689, -65.017);
		Global.CheckpointLocations[4] = Vector(68.346, 8.025, -130.523);
		Global.CheckpointLocations[5] = Vector(97.001, 1.995, -72.373);
		Global.CheckpointLocations[6] = Vector(118.294, 5.285, -20.153);
		Global.CheckpointLocations[7] = Vector(143.627, 7.598, -30.545);
		Global.CheckpointLocations[8] = Vector(81.159, 5.200, -101.643);
		Global.CheckpointLocations[9] = Vector(64.663, 11, -66.751);
		Global.CheckpointLocations[10] = Vector(26.621, 12, -65.083);
		Global.CheckpointLocations[11] = Vector(-110.500, 5.385, -81.900);
		Global.CheckpointLocations[12] = Vector(133.630, 14, -29.570);
	}
}

規則("Zone Locations")
{
	事件
	{
		Ongoing - Global;
	}

	動作
	{
		"Spawn"
		Global.ZoneLocations[0] = Vector(-110.494, 5.385, -81.911);
		"Zone 1"
		Global.ZoneLocations[1] = Vector(186.035, 11.250, -46.889);
		"Zone 2"
		Global.ZoneLocations[2] = Vector(-99.256, 4, -90.813);
		"Zone 3"
		Global.ZoneLocations[3] = Vector(1.116, 12, -79.603);
		"Zone 4"
		Global.ZoneLocations[4] = Vector(86.114, 12.028, -47.906);
	}
}

規則("Zone Text")
{
	事件
	{
		Ongoing - Global;
	}

	動作
	{
		"Spawn"
		Global.ZoneText[0] = 0;
		"Zone 1"
		Global.ZoneText[1] = Custom String("Helipad");
		"Zone 2"
		Global.ZoneText[2] = Custom String("Sebastian's Workshop");
		"Zone 3"
		Global.ZoneText[3] = Custom String("Distillery");
		"Zone 4"
		Global.ZoneText[4] = Custom String("Broken Building");
	}
}

規則("Portal Locations")
{
	事件
	{
		Ongoing - Global;
	}

	動作
	{
		"Spawn area"
		Global.PortalLocations[0] = Vector(-88.345, 11.300, -58.835);
		Global.PortalLocations[1] = Vector(-90.180, 6.800, -75);
		Global.PortalLocations[2] = Vector(-83.898, 5.300, -89.038);
		"Sebs Portal"
		Global.PortalLocations[3] = Vector(202.830, 11.300, -33.440);
		Global.PortalLocations[4] = Vector(-113.386, 5.303, -55.155);
		Global.PortalLocations[5] = Vector(77.143, 14.662, -47.676);
		Global.PortalLocations[6] = Vector(0.521, 13.300, -74.519);
		Global.PortalLocations[7] = Vector(65.044, 12.078, -102.496);
		Global.PortalLocations[8] = Vector(81.047, 9.515, -105.111);
		"Distill"
		Global.PortalLocations[9] = Vector(198.220, 11.300, -30.900);
		"Broken Building"
		Global.PortalLocations[10] = Vector(200.560, 11.300, -32.120);
		Global.PortalLocations[11] = Vector(0, 0, 0);
		Global.PortalLocations[12] = Vector(0, 0, 0);
		Global.PortalLocations[13] = Vector(0, 0, 0);
		Global.PortalLocations[14] = Vector(0, 0, 0);
		Global.PortalLocations[15] = Vector(0, 0, 0);
	}
}

規則("Portal Destinations")
{
	事件
	{
		Ongoing - Global;
	}

	動作
	{
		Global.PortalDestinations[0] = Vector(-90.820, 6.260, -45.050);
		Global.PortalDestinations[1] = Position Of(Global.ZoneLocations[0]);
		Global.PortalDestinations[2] = Position Of(Global.ZoneLocations[1]);
		Global.PortalDestinations[3] = Position Of(Global.ZoneLocations[2]);
		Global.PortalDestinations[4] = Position Of(Global.ZoneLocations[0]);
		Global.PortalDestinations[5] = Position Of(Global.ZoneLocations[1]);
		Global.PortalDestinations[6] = Position Of(Global.ZoneLocations[1]);
		Global.PortalDestinations[7] = Vector(68.345, 8.025, -130.488);
		Global.PortalDestinations[8] = Vector(80.985, 4.993, -101.926);
		Global.PortalDestinations[9] = Position Of(Global.ZoneLocations[3]);
		Global.PortalDestinations[10] = Position Of(Global.ZoneLocations[4]);
		Global.PortalDestinations[11] = Vector(0, 0, 0);
		Global.PortalDestinations[12] = Vector(0, 0, 0);
		Global.PortalDestinations[13] = Vector(0, 0, 0);
		Global.PortalDestinations[14] = Vector(0, 0, 0);
		Global.PortalDestinations[15] = Vector(0, 0, 0);
	}
}

規則("Portal Unlock Defaults")
{
	事件
	{
		Ongoing - Global;
	}

	動作
	{
		"True = Usable from Start | False = Locked until destination is reached"
		Global.PortalUnlockDefaults[0] = True;
		Global.PortalUnlockDefaults[1] = True;
		Global.PortalUnlockDefaults[2] = True;
		Global.PortalUnlockDefaults[3] = False;
		Global.PortalUnlockDefaults[4] = True;
		Global.PortalUnlockDefaults[5] = True;
		Global.PortalUnlockDefaults[6] = True;
		Global.PortalUnlockDefaults[7] = True;
		Global.PortalUnlockDefaults[8] = True;
		Global.PortalUnlockDefaults[9] = False;
		Global.PortalUnlockDefaults[10] = False;
		Global.PortalUnlockDefaults[11] = False;
		Global.PortalUnlockDefaults[12] = False;
		Global.PortalUnlockDefaults[13] = False;
		Global.PortalUnlockDefaults[14] = False;
		Global.PortalUnlockDefaults[15] = False;
	}
}

規則("Portal Text")
{
	事件
	{
		Ongoing - Global;
	}

	動作
	{
		Global.PortalText[0] = Custom String("Exit");
		Global.PortalText[1] = Custom String("Spawn");
		Global.PortalText[2] = Custom String("Helipad");
		Global.PortalText[3] = Custom String("Sebastian's Workshop");
		Global.PortalText[4] = Custom String("Spawn");
		Global.PortalText[5] = Custom String("Helipad");
		Global.PortalText[6] = Custom String("Helipad");
		Global.PortalText[7] = Custom String("Enter");
		Global.PortalText[8] = Custom String("Exit");
		Global.PortalText[9] = Custom String("Distillery");
		Global.PortalText[10] = Custom String("Broken Building");
		Global.PortalText[11] = Custom String("");
		Global.PortalText[12] = Custom String("");
		Global.PortalText[13] = Custom String("");
		Global.PortalText[14] = Custom String("");
		Global.PortalText[15] = Custom String("");
	}
}

規則("Hero Locations")
{
	事件
	{
		Ongoing - Global;
	}

	動作
	{
		"Starting Hero - Yellow"
		Global.HeroLocations[0] = Vector(186.090, 12.550, -54.340);
		"Unlockable Hero 1 - Green"
		Global.HeroLocations[1] = Vector(192.045, 12.550, -51.734);
		"Unlockable Hero 2 - Blue"
		Global.HeroLocations[2] = Vector(194.380, 12.550, -46.440);
		"Unlockable Hero 3 - Purple"
		Global.HeroLocations[3] = Vector(191.334, 12.550, -40.952);
		"Unlockable Hero 4 - Red"
		Global.HeroLocations[4] = Vector(186.045, 12.550, -39.170);
		"Secret Hero - White"
		Global.HeroLocations[5] = Vector(166.448, 57.521, -69.723);
	}
}

規則("Unlock Locations")
{
	事件
	{
		Ongoing - Global;
	}

	動作
	{
		"Unlockable Hero 1 - Green"
		Global.UnlockLocations[0] = Vector(-104.412, 6.344, -59.557);
		"Unlockable Hero 2 - Blue"
		Global.UnlockLocations[1] = Vector(34.153, 7.981, -101.346);
		"Unlockable Hero 3 - Purple"
		Global.UnlockLocations[2] = Vector(97, 25, -13);
		"Unlockable Hero 4 - Red"
		Global.UnlockLocations[3] = Vector(139.741, 6.861, -46.512);
	}
}

規則("Speedrun Location")
{
	事件
	{
		Ongoing - Global;
	}

	動作
	{
		Global.SpeedrunLocation = Vector(0, 0, 0);
	}
}

規則("Bouncepad Locations")
{
	事件
	{
		Ongoing - Global;
	}

	動作
	{
		Global.BouncepadLocations[0] = Vector(-83.224, 9.011, -58.975);
		Global.BouncepadLocations[1] = Vector(-38, 6.800, -63.507);
		Global.BouncepadLocations[2] = Vector(-10.379, 10.727, -90.071);
		Global.BouncepadLocations[3] = Vector(104.896, 3.334, -21.178);
		Global.BouncepadLocations[4] = Vector(110.669, 3.339, -20.738);
		Global.BouncepadLocations[5] = Vector(121.121, 2.084, -29.856);
		Global.BouncepadLocations[6] = Vector(20.248, 10.600, -64.097);
		Global.BouncepadLocations[7] = Vector(98.561, 7.258, -85.701);
		Global.BouncepadLocations[8] = Vector(133.466, 12.640, -37.573);
		Global.BouncepadLocations[9] = Vector(133.343, 17.399, -43.105);
		Global.BouncepadLocations[10] = Vector(133.842, 21.876, -48.238);
		Global.BouncepadLocations[11] = Vector(142.027, 7.062, -46.507);
		Global.BouncepadLocations[12] = Vector(137.998, 7.062, -46.533);
		Global.BouncepadLocations[13] = Vector(140.027, 7.061, -48.496);
		Global.BouncepadLocations[14] = Vector(140.018, 7.061, -44.497);
		Global.BouncepadLocations[15] = Vector(88.436, 9, -21.445);
		Global.BouncepadLocations[16] = Vector(91.230, 9, -21.449);
		Global.BouncepadLocations[17] = Vector(-85, 5.500, -42.850);
		Global.BouncepadLocations[18] = Vector(-54.670, 6.800, -70.800);
		Global.BouncepadLocations[19] = Vector(10, 10, -67);
		Global.BouncepadLocations[20] = Vector(138.160, 10, -29);
		Global.BouncepadLocations[21] = Vector(185.260, 35.900, -65.570);
	}
}

規則("Bouncepad Strengths")
{
	事件
	{
		Ongoing - Global;
	}

	動作
	{
		Global.BouncepadStrength[0] = 16.001;
		Global.BouncepadStrength[1] = 7;
		Global.BouncepadStrength[2] = 10;
		Global.BouncepadStrength[3] = 10;
		Global.BouncepadStrength[4] = 10;
		Global.BouncepadStrength[5] = 12;
		Global.BouncepadStrength[6] = 12;
		Global.BouncepadStrength[7] = 12;
		Global.BouncepadStrength[8] = 12;
		Global.BouncepadStrength[9] = 12;
		Global.BouncepadStrength[10] = 12;
		Global.BouncepadStrength[11] = 11;
		Global.BouncepadStrength[12] = 11;
		Global.BouncepadStrength[13] = 11;
		Global.BouncepadStrength[14] = 11;
		Global.BouncepadStrength[15] = 10;
		Global.BouncepadStrength[16] = 10;
		Global.BouncepadStrength[17] = 8;
		Global.BouncepadStrength[18] = 10;
		Global.BouncepadStrength[19] = 7;
		Global.BouncepadStrength[20] = 12;
		Global.BouncepadStrength[21] = 12;
	}
}

規則("Spawn Face Direction")
{
	事件
	{
		Ongoing - Global;
	}

	動作
	{
		"First time spawn direction"
		Global.SpawnFaceDirection = Vector(1000, 0, 0);
	}
}

規則("Effect Colors")
{
	事件
	{
		Ongoing - Global;
	}

	動作
	{
		"Lava"
		Global.EffectColors[0] = Color(Sky Blue);
		"Checkpoints"
		Global.EffectColors[1] = Color(White);
		"Zones"
		Global.EffectColors[2] = Color(White);
		"Portals"
		Global.EffectColors[3] = Color(White);
		"Bouncepads"
		Global.EffectColors[4] = Color(Green);
		"Starting Hero"
		Global.EffectColors[5] = Color(Orange);
		"Unlockable Hero 1"
		Global.EffectColors[6] = Color(Yellow);
		"Unlockable Hero 2"
		Global.EffectColors[7] = Color(Blue);
		"Unlockable Hero 3"
		Global.EffectColors[8] = Color(Red);
		"Unlockable Hero 4"
		Global.EffectColors[9] = Color(Gray);
		"Secret Hero"
		Global.EffectColors[10] = Color(White);
	}
}

規則("Effect Behaviors")
{
	事件
	{
		Ongoing - Global;
	}

	動作
	{
		"Portals are visible when locked"
		Global.EffectBehaviors[0] = False;
	}
}

規則("Player Behaviors")
{
	事件
	{
		Ongoing - Global;
	}

	動作
	{
		"Player Phasing\r\n0 = Players can collide with other players and explosions.\r\n1 = Players cannot collide with other players but can interact with explosions.\r\n2 = Players cannot collide with other players nor explosions."
		Global.PlayerBehaviors[0] = 1;
	}
}

規則("---------- INITIALIZATION ----------")
{
	事件
	{
		Ongoing - Global;
	}
}

規則("Global")
{
	事件
	{
		Ongoing - Global;
	}

	動作
	{
		Disable Inspector Recording;
		Global.MatchTime = 60 * 180;
		Disable Built-In Game Mode Scoring;
		Disable Built-In Game Mode Completion;
		"Center HUD"
		Create HUD Text(All Players(All Teams), Null, Null, Custom String("||        discord.me/lavaparkour        ||"), Top, -2, Color(
			White), Color(White), Color(Orange), Visible To and String, Default Visibility);
		Create HUD Text(Filtered Array(All Players(All Teams),
			Current Array Element.Victory == True && Current Array Element.SpeedRunMode == False), String("已完成"), Null, Null, Top, 1,
			Color(Purple), Color(Purple), Color(Purple), Visible To and String, Default Visibility);
		Create HUD Text(Filtered Array(All Players(All Teams), Current Array Element.TutorialMode == False), Null, Null, Custom String(
			"Hold [{0}] To Start Tutorial Mode", Input Binding String(Button(Reload))), Top, 2, Color(White), Color(White), Color(Yellow),
			Visible To and String, Default Visibility);
		Create HUD Text(Filtered Array(All Players(All Teams), Current Array Element.TutorialMode == True), Custom String("TUTORIAL MODE"),
			Null, Null, Top, 2, Color(Yellow), Color(Yellow), Color(Yellow), Visible To and String, Default Visibility);
		Create HUD Text(Filtered Array(All Players(All Teams), Current Array Element.TutorialMode == True), Null, Null, Custom String(
			"Press [{0}] to use portals/hero swaps\r\n       Hold [{1}] to place checkpoint\r\n                   Hold [{2}] for a tip",
			Input Binding String(Button(Interact)), Input Binding String(Button(Reload)), Input Binding String(Button(Melee))), Top, 3,
			Color(Yellow), Color(Yellow), Color(Yellow), Visible To and String, Default Visibility);
		Create HUD Text(Filtered Array(All Players(All Teams), Current Array Element.TutorialMode == False), Null, Null, Custom String(
			"Press [{0}] To Respawn\r\n     Press [{1}] To Use", Input Binding String(Button(Ultimate)), Input Binding String(Button(
			Interact))), Top, 3, Color(White), Color(White), Color(White), Visible To and String, Default Visibility);
		Wait(1, Ignore Condition);
		"Left-Side HUD"
		Create HUD Text(Filtered Array(All Players(All Teams), Current Array Element.TutorialMode == False), Null, Custom String(
			"Hold [{0}] to restart", Input Binding String(Button(Ultimate))), Null, Left, 0, Color(White), Color(Purple), Color(White),
			Visible To and String, Default Visibility);
		Create HUD Text(Filtered Array(All Players(All Teams), Current Array Element.TutorialMode == True), Null, Custom String(
			"Hold [{0}] to exit tutorial mode (resets progress)", Input Binding String(Button(Ultimate))), Null, Left, 0, Color(Yellow),
			Color(Yellow), Color(Yellow), Visible To and String, Default Visibility);
		Create HUD Text(All Players(All Teams), Custom String("PROGRESS:"), Null, Null, Left, 1, Color(Purple), Color(White), Color(White),
			Visible To and String, Default Visibility);
		Wait(1, Ignore Condition);
		"Right-Side HUD"
		Create HUD Text(All Players(All Teams), Custom String("Share Code: {0} ", Global.ShareCode), Null, Null, Right, -3, Color(White),
			Color(White), Color(White), Visible To and String, Default Visibility);
		Create HUD Text(All Players(All Teams), Null, Null, Custom String("Created By: {0}", Global.Author), Right, -2, Color(White),
			Color(White), Color(White), Visible To and String, Default Visibility);
		Create HUD Text(All Players(All Teams), Null, Null, Custom String("version {0}", Global.Version), Right, -1, Color(White), Color(
			White), Color(White), Visible To and String, Default Visibility);
		"Player Progress"
		Create HUD Text(All Players(All Teams), Null, Null, Custom String("Zones Reached\r\n{0}\r\nHeroes Unlocked\r\n{1}", Custom String(
			"{0} / {1}", Local Player.ZoneCount, Global.MaxZones), Custom String("{0} / {1}", Local Player.HeroCount, Global.MaxHeroes)),
			Left, 2, Color(Aqua), Color(Aqua), Color(Blue), Visible To and String, Default Visibility);
	}
}

規則("Player")
{
	事件
	{
		Ongoing - Each Player;
		All;
		All;
	}

	動作
	{
		Event Player.CanDie = False;
		Start Forcing Player To Be Hero(Event Player, Global.HeroRoster[0]);
		While(Has Spawned(Event Player) == False);
			Wait(0.025, Ignore Condition);
		End;
		Disable Game Mode In-World UI(Event Player);
		Disable Game Mode HUD(Event Player);
		If(Global.PlayerBehaviors[0] == 1);
			Disable Movement Collision With Players(Event Player);
		Else If(Global.PlayerBehaviors[0] == 2);
			Set Status(Event Player, Null, Phased Out, 9999);
		End;
		Set Status(Event Player, Null, Invincible, 9999);
		Event Player.SpeedRunMode = False;
		Set Damage Dealt(Event Player, 0);
		Call Subroutine(ResetProgress);
		Wait(0.300, Ignore Condition);
		Set Objective Description(Event Player, Custom String("Find All Zones and Heroes"), String);
		Event Player.CanDie = True;
		Wait(2, Ignore Condition);
		Set Facing(Event Player, Global.SpawnFaceDirection, To World);
	}
}

規則("---------- EXTRA DATA ----------")
{
	事件
	{
		Ongoing - Global;
	}
}

規則("In World Text Locations")
{
	事件
	{
		Ongoing - Global;
	}

	動作
	{
		"\"Heroes\" Text"
		Global.InWorldText[0] = Vector(0, 0, 0);
	}
}

規則("Tutorial Mode Tip Messages")
{
	事件
	{
		Ongoing - Each Player;
		All;
		All;
	}

	條件
	{
		Event Player.TutorialMode == True;
		Is Button Held(Event Player, Button(Melee)) == True;
	}

	動作
	{
		Wait(0.500, Abort When False);
		停用 Small Message(Event Player, Custom String("Tips have not been set up on this map."));
		停用 Abort;
		If(Event Player.ZonesReached[1] == False);
			Small Message(Event Player, Custom String("Tip: Use {0} to reach Sebastian's Workshop Zone", Hero Icon String(Hero(席格馬))));
		Else If(Event Player.ZonesReached[0] == False);
			Small Message(Event Player, Custom String("Tip: Use {0} to reach the Helipad Zone using the portal", Hero Icon String(Hero(席格馬))));
		Else If(Event Player.HeroesUnlocked[0] == False);
			Small Message(Event Player, Custom String("Tip: Find {0} at the other side of Seb's Workshop zone", Hero Icon String(Hero(艾西))));
		Else If(Event Player.ZonesReached[2] == False);
			Small Message(Event Player, Custom String("Tip: Use {0} to reach Distillery Zone", Hero Icon String(Hero(艾西))));
		Else If(Event Player.HeroesUnlocked[1] == False);
			Small Message(Event Player, Custom String("Tip: Find {0} around the Distillery zone", Hero Icon String(Hero(辛梅塔))));
		Else If(Event Player.ZonesReached[3] == False);
			Small Message(Event Player, Custom String("Tip: Use {0} to reach Broken Building Zone", Hero Icon String(Hero(辛梅塔))));
		Else If(Event Player.HeroesUnlocked[2] == False);
			Small Message(Event Player, Custom String("Tip: Find {0} outside of the Broken Building zone", Hero Icon String(Hero(小美))));
		Else If(Event Player.HeroesUnlocked[3] == False);
			Small Message(Event Player, Custom String("Tip: Use {0} to reach {1} at the last point", Hero Icon String(Hero(小美)),
				Hero Icon String(Hero(歐瑞莎))));
		Else If(Event Player.FoundSecretHero == False);
			Small Message(Event Player, Custom String("Tip: Find the secret character hidden somewhere in this map!"));
		Else;
			Small Message(Event Player, Custom String("Tip: Join discord.me/lavaparkour for more maps!"));
		End;
	}
}

規則("---------- EFFECTS ----------")
{
	事件
	{
		Ongoing - Global;
	}
}

規則("Loading Data")
{
	事件
	{
		Ongoing - Global;
	}

	動作
	{
		"Get Max Objective Index Values"
		If(Global.MaxObjectIndex == Null);
			Wait(0.500, Ignore Condition);
			"Lava Max"
			Global.LavaLocations = Filtered Array(Global.LavaLocations, Current Array Element != Null && Current Array Element != Vector(0, 0,
				0));
			Global.LavaRadius = Filtered Array(Global.LavaRadius, Current Array Element != Null && Current Array Element != 0);
			Global.MaxObjectIndex[0] = Count Of(Global.LavaLocations) - 1;
			"Checkpoint Max"
			Global.MaxObjectIndex[1] = Count Of(Global.CheckpointLocations) - 1;
			"Zone Max"
			Global.MaxObjectIndex[2] = Count Of(Global.ZoneLocations) - 1;
			"Portals Max"
			Global.MaxObjectIndex[3] = Count Of(Global.PortalLocations) - 1;
			"Heroes Max"
			Global.MaxObjectIndex[4] = Count Of(Global.HeroLocations) - 1;
			"Unlocks Max"
			Global.MaxObjectIndex[5] = Count Of(Global.UnlockLocations) - 1;
			"Speedrun Max"
			Global.MaxObjectIndex[6] = 0;
			"Bouncepads Max"
			Global.MaxObjectIndex[7] = Count Of(Global.BouncepadLocations) - 1;
		End;
		"Move to next Object Type if end index reached"
		If(Global.LoadingElementIndex > Global.MaxObjectIndex[Global.LoadingObjectIndex]);
			Global.LoadingObjectIndex += 1;
			Global.LoadingElementIndex = 0;
		End;
		"Load Lava"
		If(Global.LoadingObjectIndex == 0);
			Create Effect(All Players(All Teams), Sphere, Global.EffectColors[0], Global.LavaLocations[Global.LoadingElementIndex],
				Global.LavaRadius[Global.LoadingElementIndex], Visible To);
			Wait(0.030, Ignore Condition);
			Global.LoadingElementIndex += 1;
			Loop;
		"Load Checkpoints"
		Else If(Global.LoadingObjectIndex == 1);
			If(Global.CheckpointLocations[Global.LoadingElementIndex] != Vector(0, 0, 0)
				&& Global.CheckpointLocations[Global.LoadingElementIndex] != Null);
				Create Effect(All Players(All Teams), Light Shaft, Global.EffectColors[1], Global.CheckpointLocations[Global.LoadingElementIndex],
					1, Visible To);
			End;
			Wait(0.030, Ignore Condition);
			Global.LoadingElementIndex += 1;
			Loop;
		"Load Zones"
		Else If(Global.LoadingObjectIndex == 2);
			If(Global.ZoneLocations[Global.LoadingElementIndex] != Vector(0, 0, 0)
				&& Global.ZoneLocations[Global.LoadingElementIndex] != Null);
				"Zones"
				If(Global.LoadingElementIndex > 0);
					Create In-World Text(All Players(All Teams), Global.ZoneText[Global.LoadingElementIndex],
						Global.ZoneLocations[Global.LoadingElementIndex] + Vector(0, 3, 0), 3, Clip Against Surfaces, Visible To, Color(White),
						Default Visibility);
					Wait(0.030, Ignore Condition);
					Create Effect(All Players(All Teams), Light Shaft, Global.EffectColors[2], Global.ZoneLocations[Global.LoadingElementIndex], 2,
						Visible To);
				End;
			End;
			Wait(0.030, Ignore Condition);
			Global.LoadingElementIndex += 1;
			Loop;
		"Load Portals"
		Else If(Global.LoadingObjectIndex == 3);
			If(Global.PortalLocations[Global.LoadingElementIndex] != Vector(0, 0, 0)
				&& Global.PortalLocations[Global.LoadingElementIndex] != Null);
				If(Global.EffectBehaviors[0] == False);
					Create In-World Text(Filtered Array(All Players(All Teams), Current Array Element.PortalUnlocked[Evaluate Once(
						Global.LoadingElementIndex)] == True), Global.PortalText[Evaluate Once(Global.LoadingElementIndex)],
						Global.PortalLocations[Evaluate Once(Global.LoadingElementIndex)], 1.500, Clip Against Surfaces, Visible To, Color(White),
						Default Visibility);
					Wait(0.030, Ignore Condition);
					Create Effect(Filtered Array(All Players(All Teams), Current Array Element.PortalUnlocked[Evaluate Once(Global.LoadingElementIndex)
						] == True), Good Aura, Global.EffectColors[3], Global.PortalLocations[Evaluate Once(Global.LoadingElementIndex)], 1,
						Visible To);
				Else;
					Create In-World Text(All Players(All Teams), Global.PortalText[Evaluate Once(Global.LoadingElementIndex)],
						Global.PortalLocations[Evaluate Once(Global.LoadingElementIndex)], 1.500, Clip Against Surfaces, Visible To, Color(White),
						Default Visibility);
					Wait(0.030, Ignore Condition);
					Create In-World Text(Filtered Array(All Players(All Teams), Current Array Element.PortalUnlocked[Evaluate Once(
						Global.LoadingElementIndex)] == False), Custom String("L O C K E D"), Global.PortalLocations[Evaluate Once(
						Global.LoadingElementIndex)] + Vector(0, -0.500, 0), 1.250, Clip Against Surfaces, Visible To, Color(Orange),
						Default Visibility);
					Wait(0.030, Ignore Condition);
					Create Effect(All Players(All Teams), Good Aura, Global.EffectColors[3], Global.PortalLocations[Evaluate Once(
						Global.LoadingElementIndex)], 1, Visible To);
				End;
			End;
			Wait(0.030, Ignore Condition);
			Global.LoadingElementIndex += 1;
			Loop;
		"Load Heroes"
		Else If(Global.LoadingObjectIndex == 4);
			If(Global.HeroLocations[Global.LoadingElementIndex] != Vector(0, 0, 0)
				&& Global.HeroLocations[Global.LoadingElementIndex] != Null);
				Wait(0.030, Ignore Condition);
				If(Global.LoadingElementIndex == 0);
					Create In-World Text(All Players(All Teams), Hero Icon String(Global.HeroRoster[0]), Global.HeroLocations[0], 2,
						Clip Against Surfaces, Visible To, Color(White), Default Visibility);
					Create Effect(All Players(All Teams), Bad Aura, Global.EffectColors[5], Global.HeroLocations[0], 1, Visible To);
				Else If(Global.LoadingElementIndex == 1);
					Create In-World Text(Filtered Array(All Players(All Teams), Current Array Element.HeroesUnlocked[0] == True), Hero Icon String(
						Global.HeroRoster[1]), Global.HeroLocations[1], 2, Clip Against Surfaces, Visible To, Color(White), Default Visibility);
					Create In-World Text(Filtered Array(All Players(All Teams), Current Array Element.HeroesUnlocked[0] == False), Custom String(
						"{0} - {1}", Hero Icon String(Global.HeroRoster[1]), String("受到鎖定")), Global.HeroLocations[1], 2, Clip Against Surfaces,
						Visible To, Color(White), Default Visibility);
					Create Effect(All Players(All Teams), Bad Aura, Global.EffectColors[6], Global.HeroLocations[1], 1, Visible To);
				Else If(Global.LoadingElementIndex == 2);
					Create In-World Text(Filtered Array(All Players(All Teams), Current Array Element.HeroesUnlocked[1] == True), Hero Icon String(
						Global.HeroRoster[2]), Global.HeroLocations[2], 2, Clip Against Surfaces, Visible To, Color(White), Default Visibility);
					Create In-World Text(Filtered Array(All Players(All Teams), Current Array Element.HeroesUnlocked[1] == False), Custom String(
						"{0} - {1}", Hero Icon String(Global.HeroRoster[2]), String("受到鎖定")), Global.HeroLocations[2], 2, Clip Against Surfaces,
						Visible To, Color(White), Default Visibility);
					Create Effect(All Players(All Teams), Bad Aura, Global.EffectColors[7], Global.HeroLocations[2], 1, Visible To);
				Else If(Global.LoadingElementIndex == 3);
					Create In-World Text(Filtered Array(All Players(All Teams), Current Array Element.HeroesUnlocked[2] == True), Hero Icon String(
						Global.HeroRoster[3]), Global.HeroLocations[3], 2, Clip Against Surfaces, Visible To, Color(White), Default Visibility);
					Create In-World Text(Filtered Array(All Players(All Teams), Current Array Element.HeroesUnlocked[2] == False), Custom String(
						"{0} - {1}", Hero Icon String(Global.HeroRoster[3]), String("受到鎖定")), Global.HeroLocations[3], 2, Clip Against Surfaces,
						Visible To, Color(White), Default Visibility);
					Create Effect(All Players(All Teams), Bad Aura, Global.EffectColors[8], Global.HeroLocations[3], 1, Visible To);
				Else If(Global.LoadingElementIndex == 4);
					Create In-World Text(Filtered Array(All Players(All Teams), Current Array Element.HeroesUnlocked[3] == True), Hero Icon String(
						Global.HeroRoster[4]), Global.HeroLocations[4], 2, Clip Against Surfaces, Visible To, Color(White), Default Visibility);
					Create In-World Text(Filtered Array(All Players(All Teams), Current Array Element.HeroesUnlocked[3] == False), Custom String(
						"{0} - {1}", Hero Icon String(Global.HeroRoster[4]), String("受到鎖定")), Global.HeroLocations[4], 2, Clip Against Surfaces,
						Visible To, Color(White), Default Visibility);
					Create Effect(All Players(All Teams), Bad Aura, Global.EffectColors[9], Global.HeroLocations[4], 1, Visible To);
				Else If(Global.LoadingElementIndex == 5);
					Create Effect(All Players(All Teams), Bad Aura, Global.EffectColors[10], Global.HeroLocations[5], 1, Visible To);
				End;
			End;
			Wait(0.030, Ignore Condition);
			Global.LoadingElementIndex += 1;
			Loop;
		"Load Unlocks"
		Else If(Global.LoadingObjectIndex == 5);
			If(Global.UnlockLocations[Global.LoadingElementIndex] != Vector(0, 0, 0)
				&& Global.UnlockLocations[Global.LoadingElementIndex] != Null);
				Create In-World Text(All Players(All Teams), Hero Icon String(Global.HeroRoster[Global.LoadingElementIndex + 1]),
					Global.UnlockLocations[Global.LoadingElementIndex], 2, Clip Against Surfaces, Visible To, Color(White), Default Visibility);
				Wait(0.030, Ignore Condition);
				If(Global.LoadingElementIndex == 0);
					Create Effect(All Players(All Teams), Sparkles, Global.EffectColors[6], Global.UnlockLocations[0], 1, Visible To);
				Else If(Global.LoadingElementIndex == 1);
					Create Effect(All Players(All Teams), Sparkles, Global.EffectColors[7], Global.UnlockLocations[1], 1, Visible To);
				Else If(Global.LoadingElementIndex == 2);
					Create Effect(All Players(All Teams), Sparkles, Global.EffectColors[8], Global.UnlockLocations[2], 1, Visible To);
				Else If(Global.LoadingElementIndex == 3);
					Create Effect(All Players(All Teams), Sparkles, Global.EffectColors[9], Global.UnlockLocations[3], 1, Visible To);
				End;
			End;
			Wait(0.030, Ignore Condition);
			Global.LoadingElementIndex += 1;
			Loop;
		"Load Speedrun"
		Else If(Global.LoadingObjectIndex == 6);
			If(Global.SpeedrunLocation != Vector(0, 0, 0) && Global.SpeedrunLocation != Null);
				Create In-World Text(Filtered Array(All Players(All Teams), Current Array Element.SpeedRunMode == False), Custom String(
					"Speedrun Mode"), Global.SpeedrunLocation, 1, Clip Against Surfaces, Visible To, Color(Red), Default Visibility);
				Wait(0.030, Ignore Condition);
				Create Effect(Filtered Array(All Players(All Teams), Current Array Element.SpeedRunMode == False), Good Aura, Color(Red),
					Global.SpeedrunLocation, 1, Visible To);
				Wait(0.030, Ignore Condition);
				Create In-World Text(Filtered Array(All Players(All Teams), Current Array Element.SpeedRunMode == True), Custom String(
					"Speedrun Mode"), Global.SpeedrunLocation, 1, Clip Against Surfaces, Visible To, Color(Green), Default Visibility);
				Wait(0.030, Ignore Condition);
				Create Effect(Filtered Array(All Players(All Teams), Current Array Element.SpeedRunMode == True), Good Aura, Color(Green),
					Global.SpeedrunLocation, 1, Visible To);
			End;
			Wait(0.030, Ignore Condition);
			Global.LoadingElementIndex += 1;
			Loop;
		"Load Bouncepads"
		Else If(Global.LoadingObjectIndex == 7);
			If(Global.BouncepadLocations[Global.LoadingElementIndex] != Vector(0, 0, 0)
				&& Global.BouncepadLocations[Global.LoadingElementIndex] != Null);
				Create Effect(All Players(All Teams), Orb, Global.EffectColors[4], Global.BouncepadLocations[Global.LoadingElementIndex], 1,
					Visible To);
			End;
			Wait(0.030, Ignore Condition);
			Global.LoadingElementIndex += 1;
			Loop;
		End;
		Create Effect(All Players(All Teams), Sphere, First Of(Global.EffectColors), Direction Towards(Evaluate Once(
			Global.LavaLocations[Global.LoadingElementIndex]), Eye Position(Local Player)) * Evaluate Once(
			Global.LavaRadius[Global.LoadingElementIndex] * Vector(0.015, 0.001, 0.015)) + Evaluate Once(
			Global.LavaLocations[Global.LoadingElementIndex]), Evaluate Once(Global.LavaRadius[Global.LoadingElementIndex]),
			Visible To Position and Radius);
	}
}

規則("In World Text Effects")
{
	事件
	{
		Ongoing - Global;
	}

	動作
	{
		"\"Heroes\" Text"
		If(Global.InWorldText[0] != Vector(0, 0, 0));
			Create In-World Text(All Players(All Teams), String("英雄"), Global.InWorldText[0], 3, Clip Against Surfaces, Visible To and String,
				Color(White), Default Visibility);
		End;
	}
}

規則("---------- FUNCTIONALITY ----------")
{
	事件
	{
		Ongoing - Global;
	}
}

停用 規則("Lava Death")
{
	事件
	{
		Ongoing - Each Player;
		All;
		All;
	}

	條件
	{
		Has Spawned(Event Player) == True;
		Is Alive(Event Player) == True;
		Hero Of(Event Player) != Global.HeroRoster[5];
		Event Player.CanDie == True;
	}

	動作
	{
		If(Is True For Any(Global.LavaLocations, Distance Between(Position Of(Event Player) + Vector(0, 0.300, 0), Current Array Element)
			< Global.LavaRadius[Index Of Array Value(Global.LavaLocations, Current Array Element)]) == True);
			If(Hero Of(Event Player) == Hero(莫伊拉) && Is Using Ability 1(Event Player) == True);
				Wait(0.050 + Global.MaxObjectIndex[0] * 0.001, Ignore Condition);
				Loop If Condition Is True;
			Else If(Hero Of(Event Player) == Hero(死神) && Is Using Ability 1(Event Player) == True);
				Wait(0.050 + Global.MaxObjectIndex[0] * 0.001, Ignore Condition);
				Loop If Condition Is True;
			Else If(Hero Of(Event Player) == Hero(小美) && Is Using Ability 1(Event Player) == True);
				Wait(0.050 + Global.MaxObjectIndex[0] * 0.001, Ignore Condition);
				Loop If Condition Is True;
			End;
			Kill(Event Player, Null);
		End;
		Wait(0.050 + Count Of(Global.LavaLocations) * 0.001, Ignore Condition);
		Loop If Condition Is True;
	}
}

規則("Lava Death by T1m")
{
	事件
	{
		Ongoing - Each Player;
		All;
		All;
	}

	條件
	{
		Has Spawned(Event Player) == True;
		Is Alive(Event Player) == True;
		Hero Of(Event Player) != Global.HeroRoster[5];
		Event Player.CanDie == True;
	}

	動作
	{
		Wait(0.050 + Global.MaxObjectIndex[0] * 0.001, Ignore Condition);
		If(Hero Of(Event Player) == Hero(莫伊拉) && Is Using Ability 1(Event Player));
			Loop If Condition Is True;
		Else If(Hero Of(Event Player) == Hero(歐瑞莎) && Is Using Ability 1(Event Player));
			Loop If Condition Is True;
		Else If(Hero Of(Event Player) == Hero(小美) && Is Using Ability 1(Event Player));
			Loop If Condition Is True;
		End;
		If(Is True For Any(Global.LavaLocations, Magnitude Of((Position Of(Event Player) + Vector(0, 0.300, 0) - Current Array Element)
			/ Vector(0.985, 0.999, 0.985)) < Global.LavaRadius[Current Array Index]));
			Kill(Event Player, Null);
		End;
		Loop If Condition Is True;
	}
}

規則("Respawning")
{
	事件
	{
		Player Died;
		All;
		All;
	}

	動作
	{
		If(Event Player.Victory == False);
			Event Player.Deaths += 1;
		End;
		Wait(0.400, Ignore Condition);
		Teleport(Event Player, Event Player.Respawn);
		Wait(0.400, Ignore Condition);
		Resurrect(Event Player);
		Clear Status(Event Player, Phased Out);
		If(Global.PlayerBehaviors[0] == 2);
			Set Status(Event Player, Null, Phased Out, 9999);
		End;
		If(Event Player.Respawn == Global.ZoneLocations[0]);
			If(Count Of(Filtered Array(Event Player.HeroesUnlocked, Current Array Element == True)) == 0);
				Event Player.Timer = 0;
				Event Player.Deaths = 0;
			End;
		End;
		Set Ability Cooldown(Event Player, Button(Ability 1), 0);
		Set Ability Cooldown(Event Player, Button(Ability 2), 0);
		Set Ability Cooldown(Event Player, Button(Secondary Fire), 0);
	}
}

規則("Checkpoint")
{
	事件
	{
		Ongoing - Each Player;
		All;
		All;
	}

	條件
	{
		Has Spawned(Event Player) == True;
		Hero Of(Event Player) != Global.HeroRoster[5];
		Event Player.CanDie == True;
		Is True For Any(Filtered Array(Global.CheckpointLocations, Current Array Element != Vector(0, 0, 0)), Distance Between(Position Of(
			Event Player), Current Array Element) < 1) == True;
	}

	動作
	{
		For Player Variable(Event Player, LoopCounter, 0, Global.MaxObjectIndex[1] + 1, 1);
			If(Global.CheckpointLocations[Event Player.LoopCounter] != Vector(0, 0, 0)
				&& Global.CheckpointLocations[Event Player.LoopCounter] != 0);
				If(Event Player.Respawn != Global.CheckpointLocations[Event Player.LoopCounter]);
					If(Distance Between(Position Of(Event Player), Global.CheckpointLocations[Event Player.LoopCounter]) <= 1);
						Event Player.Respawn = Global.CheckpointLocations[Event Player.LoopCounter];
						Event Player.AlternativeRespawn = Global.CheckpointLocations[Event Player.LoopCounter];
						Play Effect(All Players(All Teams), Buff Explosion Sound, Color(White), Position Of(Event Player), 100);
						Small Message(Event Player, Custom String("Checkpoint!"));
						Break;
					End;
				End;
			End;
		End;
	}
}

規則("Zones")
{
	事件
	{
		Ongoing - Each Player;
		All;
		All;
	}

	條件
	{
		Has Spawned(Event Player) == True;
		Hero Of(Event Player) != Global.HeroRoster[5];
		Event Player.CanDie == True;
	}

	動作
	{
		If(Global.ZoneLocations[1] != Vector(0, 0, 0));
			If(Event Player.Respawn != Global.ZoneLocations[1] && Distance Between(Position Of(Event Player), Global.ZoneLocations[1]) <= 2);
				Event Player.Respawn = Global.ZoneLocations[1];
				Small Message(Event Player, Custom String("{0}!", String("檢查點")));
				Play Effect(All Players(All Teams), Buff Explosion Sound, Color(White), Position Of(Event Player), 100);
				If(Event Player.ZonesReached[0] == False);
					Event Player.ZonesReached[0] = True;
					Big Message(All Players(All Teams), Custom String(" \r\n{0} {1} {2}", Event Player, String("抵達"), Global.ZoneText[1]));
					Call Subroutine(UpdateCount);
				End;
			End;
		End;
		If(Global.ZoneLocations[2] != Vector(0, 0, 0));
			If(Event Player.Respawn != Global.ZoneLocations[2] && Distance Between(Position Of(Event Player), Global.ZoneLocations[2]) <= 2);
				Event Player.Respawn = Global.ZoneLocations[2];
				Event Player.AlternativeRespawn = Global.ZoneLocations[2];
				Small Message(Event Player, Custom String("{0}!", String("檢查點")));
				Play Effect(All Players(All Teams), Buff Explosion Sound, Color(White), Position Of(Event Player), 100);
				If(Event Player.ZonesReached[1] == False);
					Event Player.ZonesReached[1] = True;
					Big Message(All Players(All Teams), Custom String(" \r\n{0} {1} {2}", Event Player, String("抵達"), Global.ZoneText[2]));
					Call Subroutine(UpdateCount);
				End;
			End;
		End;
		If(Global.ZoneLocations[3] != Vector(0, 0, 0));
			If(Event Player.Respawn != Global.ZoneLocations[3] && Distance Between(Position Of(Event Player), Global.ZoneLocations[3]) <= 2);
				Event Player.Respawn = Global.ZoneLocations[3];
				Event Player.AlternativeRespawn = Global.ZoneLocations[3];
				Small Message(Event Player, Custom String("{0}!", String("檢查點")));
				Play Effect(All Players(All Teams), Buff Explosion Sound, Color(White), Position Of(Event Player), 100);
				If(Event Player.ZonesReached[2] == False);
					Event Player.ZonesReached[2] = True;
					Big Message(All Players(All Teams), Custom String(" \r\n{0} {1} {2}", Event Player, String("抵達"), Global.ZoneText[3]));
					Call Subroutine(UpdateCount);
				End;
			End;
		End;
		If(Global.ZoneLocations[4] != Vector(0, 0, 0));
			If(Event Player.Respawn != Global.ZoneLocations[4] && Distance Between(Position Of(Event Player), Global.ZoneLocations[4]) <= 2);
				Event Player.Respawn = Global.ZoneLocations[4];
				Event Player.AlternativeRespawn = Global.ZoneLocations[4];
				Small Message(Event Player, Custom String("{0}!", String("檢查點")));
				Play Effect(All Players(All Teams), Buff Explosion Sound, Color(White), Position Of(Event Player), 100);
				If(Event Player.ZonesReached[3] == False);
					Event Player.ZonesReached[3] = True;
					Big Message(All Players(All Teams), Custom String(" \r\n{0} {1} {2}", Event Player, String("抵達"), Global.ZoneText[4]));
					Call Subroutine(UpdateCount);
				End;
			End;
		End;
		Wait(0.100, Ignore Condition);
		Loop If Condition Is True;
	}
}

規則("Hero Swap")
{
	事件
	{
		Ongoing - Each Player;
		All;
		All;
	}

	條件
	{
		Is Button Held(Event Player, Button(Interact)) == True;
		Is True For Any(Filtered Array(Global.HeroLocations, Current Array Element != Vector(0, 0, 0)), Distance Between(Eye Position(
			Event Player), Current Array Element) < 1.500) == True;
	}

	動作
	{
		For Player Variable(Event Player, LoopCounter, 0, Global.MaxObjectIndex[4] + 1, 1);
			If(Global.HeroLocations[Event Player.LoopCounter] != Vector(0, 0, 0) && Global.HeroLocations[Event Player.LoopCounter] != 0);
				If(Event Player.HeroesUnlocked[Event Player.LoopCounter - 1] == True || Event Player.LoopCounter == 0);
					If(Distance Between(Eye Position(Event Player), Global.HeroLocations[Event Player.LoopCounter]) <= 1.500);
						Start Forcing Player To Be Hero(Event Player, Global.HeroRoster[Event Player.LoopCounter]);
						If(Event Player.Respawn == Global.ZoneLocations[1]);
							Event Player.AlternativeRespawn = Null;
						End;
						Break;
					End;
				End;
			End;
		End;
	}
}

規則("Hero Swap Tip")
{
	事件
	{
		Ongoing - Each Player;
		All;
		All;
	}

	條件
	{
		Has Spawned(Event Player) == True;
		Is True For Any(Filtered Array(Global.HeroLocations, Current Array Element != Vector(0, 0, 0)), Distance Between(Eye Position(
			Event Player), Current Array Element) < 1.500) == True;
	}

	動作
	{
		Wait(2, Abort When False);
		Small Message(Event Player, Custom String("Press [Interact]"));
	}
}

規則("Hero Unlock")
{
	事件
	{
		Ongoing - Each Player;
		All;
		All;
	}

	條件
	{
		Has Spawned(Event Player) == True;
		Event Player.HeroCount < Global.MaxHeroes;
		Hero Of(Event Player) != Global.HeroRoster[5];
		Is True For Any(Filtered Array(Global.UnlockLocations, Current Array Element != Vector(0, 0, 0)), Distance Between(Eye Position(
			Event Player), Current Array Element) < 1.500) == True;
	}

	動作
	{
		For Player Variable(Event Player, LoopCounter, 0, Global.MaxObjectIndex[5] + 1, 1);
			If(Global.UnlockLocations[Event Player.LoopCounter] != Vector(0, 0, 0) && Global.UnlockLocations[Event Player.LoopCounter] != 0);
				If(Event Player.HeroesUnlocked[Event Player.LoopCounter] == False);
					If(Distance Between(Eye Position(Event Player), Global.UnlockLocations[Event Player.LoopCounter]) <= 1.500);
						Big Message(All Players(All Teams), Custom String(" \r\n{0} {1} {2}", Event Player, String("得到解鎖"), Hero Icon String(
							Global.HeroRoster[Event Player.LoopCounter + 1])));
						Event Player.HeroesUnlocked[Event Player.LoopCounter] = True;
						Play Effect(All Players(All Teams), Buff Explosion Sound, Color(White), Position Of(Event Player), 100);
						Call Subroutine(UpdateCount);
						Break;
					End;
				End;
			End;
		End;
	}
}

規則("Portal Usage")
{
	事件
	{
		Ongoing - Each Player;
		All;
		All;
	}

	條件
	{
		Is Button Held(Event Player, Button(Interact)) == True;
		Is True For Any(Filtered Array(Global.PortalLocations, Current Array Element != Vector(0, 0, 0)), Distance Between(Eye Position(
			Event Player), Current Array Element) < 1.500) == True;
	}

	動作
	{
		For Player Variable(Event Player, LoopCounter, 0, Global.MaxObjectIndex[3] + 1, 1);
			If(Event Player.PortalUnlocked[Event Player.LoopCounter] == True);
				If(Global.PortalLocations[Event Player.LoopCounter] != Vector(0, 0, 0) && Global.PortalLocations[Event Player.LoopCounter] != 0);
					If(Global.PortalDestinations[Event Player.LoopCounter] != Vector(0, 0, 0)
						&& Global.PortalDestinations[Event Player.LoopCounter] != 0);
						If(Distance Between(Eye Position(Event Player), Global.PortalLocations[Event Player.LoopCounter]) <= 1.500);
							Teleport(Event Player, Global.PortalDestinations[Event Player.LoopCounter]);
							Break;
						End;
					End;
				End;
			End;
		End;
	}
}

規則("Unlocking a Portal (reach the destination)")
{
	事件
	{
		Ongoing - Each Player;
		All;
		All;
	}

	條件
	{
		Hero Of(Event Player) != Global.HeroRoster[5];
		Is True For Any(Filtered Array(Global.PortalDestinations, Current Array Element != Vector(0, 0, 0)), Distance Between(
			Current Array Element, Position Of(Event Player)) < 2) == True;
	}

	動作
	{
		For Player Variable(Event Player, LoopCounter, 0, Global.MaxObjectIndex[3] + 1, 1);
			If(Global.PortalDestinations[Event Player.LoopCounter] != Vector(0, 0, 0)
				&& Global.PortalDestinations[Event Player.LoopCounter] != 0);
				If(Event Player.PortalUnlocked[Event Player.LoopCounter] == False);
					If(Distance Between(Position Of(Event Player), Global.PortalDestinations[Event Player.LoopCounter]) <= 2);
						Event Player.PortalUnlocked[Event Player.LoopCounter] = True;
					End;
				End;
			End;
		End;
	}
}

規則("Teleport Back to a Spawn Point")
{
	事件
	{
		Ongoing - Each Player;
		All;
		All;
	}

	條件
	{
		Is Button Held(Event Player, Button(Ultimate)) == True;
		Hero Of(Event Player) != Global.HeroRoster[5];
	}

	動作
	{
		If(Distance Between(Position Of(Event Player), Event Player.Respawn) > 1);
			Teleport(Event Player, Event Player.Respawn);
			Wait(0.050, Ignore Condition);
			Play Effect(All Players(All Teams), Buff Explosion Sound, Color(White), Position Of(Event Player), 100);
		Else;
			If(Event Player.AlternativeRespawn != Null);
				If(Distance Between(Position Of(Event Player), Event Player.AlternativeRespawn) > 1);
					Teleport(Event Player, Event Player.AlternativeRespawn);
					Event Player.Respawn = Event Player.AlternativeRespawn;
				Else;
					If(Event Player.ZonesReached[0] == True);
						Teleport(Event Player, Global.ZoneLocations[1]);
					End;
				End;
			End;
		End;
	}
}

停用 規則("Bouncepad Interaction")
{
	事件
	{
		Ongoing - Each Player;
		All;
		All;
	}

	條件
	{
		Is True For Any(Filtered Array(Global.BouncepadLocations, Current Array Element != Vector(0, 0, 0)), Distance Between(Position Of(
			Event Player), Current Array Element) < 1.500) == True;
	}

	動作
	{
		For Player Variable(Event Player, LoopCounter, 0, Global.MaxObjectIndex[7] + 1, 1);
			If(Global.BouncepadLocations[Event Player.LoopCounter] != Vector(0, 0, 0)
				&& Global.BouncepadLocations[Event Player.LoopCounter] != 0);
				If(Distance Between(Position Of(Event Player), Global.BouncepadLocations[Event Player.LoopCounter]) <= 1.500);
					Apply Impulse(Event Player, Vector(0, 1, 0), Global.BouncepadStrength[Event Player.LoopCounter], To World, Cancel Contrary Motion);
					Play Effect(All Players(All Teams), Debuff Impact Sound, Color(White), Event Player, 75);
					Break;
				End;
			End;
		End;
	}
}

規則("Bouncepad Interaction by T1m")
{
	事件
	{
		Ongoing - Each Player;
		All;
		All;
	}

	條件
	{
		Is True For Any(Filtered Array(Global.BouncepadLocations, Current Array Element != Vector(0, 0, 0)), Distance Between(Position Of(
			Event Player), Current Array Element) < 1.500) == True;
	}

	動作
	{
		Event Player.LoopCounter = Index Of Array Value(Global.BouncepadLocations, First Of(Filtered Array(Global.BouncepadLocations,
			Distance Between(Position Of(Event Player), Current Array Element)
			<= 1.500 && Current Array Element != 0 && Current Array Element != Vector(0, 0, 0))));
		Apply Impulse(Event Player, Up, Square Root(Global.BouncepadStrength[Event Player.LoopCounter] ^ 2 + 35 * (1.500 + Y Component Of(
			Global.BouncepadLocations[Event Player.LoopCounter] - Position Of(Event Player)))), To World, Cancel Contrary Motion);
		Play Effect(All Players(All Teams), Debuff Impact Sound, Color(White), Event Player, 75);
	}
}

規則("Victory")
{
	事件
	{
		Ongoing - Each Player;
		All;
		All;
	}

	條件
	{
		Event Player.Victory == False;
		Event Player.ZoneCount == Global.MaxZones;
		Event Player.HeroCount == Global.MaxHeroes;
	}

	動作
	{
		Event Player.Victory = True;
		If(Event Player.SpeedRunMode == True);
			Destroy HUD Text(Event Player.MyHUD[1]);
			Create HUD Text(Event Player, Custom String("Finished"), Custom String("Deaths: {0}", Event Player.Deaths), Custom String(
				"Time: {0}:{1}", Round To Integer(Event Player.Timer / 60, Down), Round To Integer(Event Player.Timer % 60, Down)), Top, 1,
				Color(Purple), Color(Green), Color(Green), Visible To and String, Default Visibility);
			Event Player.MyHUD[0] = Last Text ID;
			Big Message(All Players(All Teams), Custom String(" \r\n{0} FINISHED IN {1}:{2}!", Event Player, Round To Integer(
				Event Player.Timer / 60, Down), Round To Integer(Event Player.Timer % 60, Down)));
		Else;
			Big Message(All Players(All Teams), Custom String(" \r\n{0} {1}!", Event Player, String("已完成")));
		End;
		Small Message(Event Player, Custom String("You've Opened the Helipad, now you can go out of bounds"));
	}
}

規則("Secret Hero")
{
	事件
	{
		Ongoing - Each Player;
		All;
		All;
	}

	條件
	{
		Has Spawned(Event Player) == True;
		Global.HeroLocations[5] != Vector(0, 0, 0);
		Distance Between(Eye Position(Event Player), Global.HeroLocations[5]) <= 1.500;
		Hero Of(Event Player) != Global.HeroRoster[5];
	}

	動作
	{
		Start Forcing Player To Be Hero(Event Player, Global.HeroRoster[5]);
		If(Event Player.FoundSecretHero == False);
			Big Message(All Players(All Teams), Custom String(" \r\n{0} {1} {2}", Event Player, String("被發現"), Hero Icon String(
				Global.HeroRoster[5])));
		End;
		Wait(0.250, Ignore Condition);
		Teleport(Event Player, Global.ZoneLocations[1]);
		Event Player.FoundSecretHero = True;
	}
}

規則("Secret Hero Jump")
{
	事件
	{
		Ongoing - Each Player;
		All;
		All;
	}

	條件
	{
		Is Button Held(Event Player, Button(Jump)) == True;
		Hero Of(Event Player) == Global.HeroRoster[5];
	}

	動作
	{
		Apply Impulse(Event Player, Vector(0, 1, 0), 30, To World, Cancel Contrary Motion);
		Play Effect(All Players(All Teams), Debuff Impact Sound, Color(White), Event Player, 75);
	}
}

規則("Secret Hero Speed")
{
	事件
	{
		Ongoing - Each Player;
		All;
		All;
	}

	條件
	{
		Hero Of(Event Player) == Global.HeroRoster[5];
	}

	動作
	{
		Set Move Speed(Event Player, 400);
		Wait(0.250, Ignore Condition);
		Loop If Condition Is True;
		Set Move Speed(Event Player, 100);
	}
}

規則("Self-Restart")
{
	事件
	{
		Ongoing - Each Player;
		All;
		All;
	}

	條件
	{
		Is Button Held(Event Player, Button(Ultimate)) == True;
	}

	動作
	{
		Wait(0.750, Abort When False);
		Small Message(Event Player, Custom String("Resetting Progress... 3"));
		Wait(0.750, Abort When False);
		Small Message(Event Player, Custom String("Resetting Progress... 2"));
		Wait(0.750, Abort When False);
		Small Message(Event Player, Custom String("Resetting Progress... 1"));
		Wait(0.750, Abort When False);
		Small Message(Event Player, Custom String("Progress Reset!"));
		Wait(0.050, Ignore Condition);
		Call Subroutine(ResetProgress);
	}
}

規則("Speed Run Toggle")
{
	事件
	{
		Ongoing - Each Player;
		All;
		All;
	}

	條件
	{
		Is Button Held(Event Player, Button(Interact)) == True;
		Global.SpeedrunLocation != Vector(0, 0, 0);
		Distance Between(Eye Position(Event Player), Global.SpeedrunLocation) < 1.500;
	}

	動作
	{
		If(Event Player.SpeedRunMode == False);
			Wait(0.250, Ignore Condition);
			If(!Is Button Held(Event Player, Button(Interact)));
				Small Message(Event Player, Custom String(
					"WARNING: Enabling speed run will reset all progress\r\n        Hold [Interact] to enable speed run mode"));
			End;
			Wait(1, Abort When False);
			Event Player.SpeedRunMode = True;
			Event Player.Victory = False;
			Call Subroutine(ResetProgress);
			Create HUD Text(Event Player, Custom String("Speed Run"), Custom String("Deaths: {0}", Event Player.Deaths), Custom String(
				"Time: {0}:{1}", Round To Integer(Event Player.Timer / 60, Down), Round To Integer(Event Player.Timer % 60, Down)), Top, 1,
				Color(Orange), Color(Red), Color(Orange), Visible To and String, Default Visibility);
			Event Player.MyHUD[1] = Last Text ID;
			Small Message(Event Player, Custom String("Speed Run Mode Activated"));
		Else;
			Destroy HUD Text(Event Player.MyHUD[0]);
			Destroy HUD Text(Event Player.MyHUD[1]);
			Event Player.SpeedRunMode = False;
			Small Message(Event Player, Custom String("Speed Run Mode Disabled"));
		End;
	}
}

規則("Speed Run Timer Increase")
{
	事件
	{
		Ongoing - Each Player;
		All;
		All;
	}

	條件
	{
		Event Player.SpeedRunMode == True;
		Event Player.Victory == False;
		Distance Between(Position Of(Event Player), Global.ZoneLocations[0]) > 1;
	}

	動作
	{
		Wait(0.992, Abort When False);
		Event Player.Timer += 1;
		Loop;
	}
}

規則("Tutorial Mode Toggle")
{
	事件
	{
		Ongoing - Each Player;
		All;
		All;
	}

	條件
	{
		Event Player.TutorialMode == False;
		Is Button Held(Event Player, Button(Reload)) == True;
	}

	動作
	{
		Wait(0.250, Abort When False);
		Small Message(Event Player, Custom String("Starting Tutorial Mode... 3"));
		Wait(0.750, Abort When False);
		Small Message(Event Player, Custom String("Starting Tutorial Mode... 2"));
		Wait(0.750, Abort When False);
		Small Message(Event Player, Custom String("Starting Tutorial Mode... 1"));
		Wait(0.750, Abort When False);
		Small Message(Event Player, Custom String("Tutorial Mode Activated!"));
		Event Player.TutorialMode = True;
		If(Is Button Held(Event Player, Button(Interact)));
			Event Player.HeroesUnlocked = Array(True, True, True, True);
			Event Player.ZonesReached = Array(True, True, True, True);
			Event Player.PortalUnlocked = Array(True, True, True, True, True, True, True, True, True, True, True, True, True, True, True);
			Event Player.ZoneCount = 4;
			Event Player.HeroCount = 4;
		End;
	}
}

規則("Tutorial Mode Set Checkpoint")
{
	事件
	{
		Ongoing - Each Player;
		All;
		All;
	}

	條件
	{
		Event Player.TutorialMode == True;
		Is Button Held(Event Player, Button(Reload)) == True;
		Distance Between(Position Of(Event Player), Event Player.Respawn) > 2;
		Vertical Speed Of(Event Player) == 0;
		Horizontal Speed Of(Event Player) == 0;
	}

	動作
	{
		Wait(0.500, Abort When False);
		Small Message(Event Player, Custom String("Checkpoint Set!"));
		Event Player.Respawn = Position Of(Event Player);
		Event Player.AlternativeRespawn = Position Of(Event Player);
		Play Effect(All Players(All Teams), Buff Explosion Sound, Color(White), Position Of(Event Player), 100);
	}
}

規則("Reset Progress | Subroutine")
{
	事件
	{
		Subroutine;
		ResetProgress;
	}

	動作
	{
		Set Facing(Event Player, Global.SpawnFaceDirection, To World);
		Start Forcing Player To Be Hero(Event Player, Global.HeroRoster[0]);
		If(Event Player.SpeedRunMode == True && Event Player.Victory == True);
			Create HUD Text(Event Player, Custom String("Speed Run"), Custom String("Deaths: {0}", Event Player.Deaths), Custom String(
				"Time: {0}:{1}", Round To Integer(Event Player.Timer / 60, Down), Round To Integer(Event Player.Timer % 60, Down)), Top, 1,
				Color(Orange), Color(Red), Color(Orange), Visible To and String, Default Visibility);
			Event Player.MyHUD[1] = Last Text ID;
		End;
		Destroy HUD Text(Event Player.MyHUD[0]);
		Event Player.PortalUnlocked = Global.PortalUnlockDefaults;
		Event Player.Victory = False;
		Event Player.ZonesReached[0] = False;
		Event Player.ZonesReached[1] = False;
		Event Player.ZonesReached[2] = False;
		Event Player.ZonesReached[3] = False;
		Event Player.HeroesUnlocked[0] = False;
		Event Player.HeroesUnlocked[1] = False;
		Event Player.HeroesUnlocked[2] = False;
		Event Player.HeroesUnlocked[3] = False;
		If(Global.ZoneLocations[0] != Vector(0, 0, 0));
			Event Player.Respawn = Global.ZoneLocations[0];
		End;
		Event Player.Deaths = 0;
		Event Player.Timer = 0;
		Event Player.ZoneCount = 0;
		Event Player.HeroCount = 0;
		Event Player.AlternativeRespawn = Null;
		Teleport(Event Player, Event Player.Respawn);
		Wait(0.100, Ignore Condition);
		Play Effect(All Players(All Teams), Ring Explosion Sound, Color(White), Position Of(Event Player), 100);
		Event Player.TutorialMode = False;
		Event Player.FoundSecretHero = False;
	}
}

規則("Update Count | Subroutine")
{
	事件
	{
		Subroutine;
		UpdateCount;
	}

	動作
	{
		Event Player.ZoneCount = Count Of(Filtered Array(Event Player.ZonesReached, Current Array Element == True));
		Event Player.HeroCount = Count Of(Filtered Array(Event Player.HeroesUnlocked, Current Array Element == True));
		If(Event Player.HeroCount > Global.MaxHeroes);
			Event Player.HeroCount = Global.MaxHeroes;
		End;
	}
}

規則("Match Time Initiation")
{
	事件
	{
		Ongoing - Global;
	}

	條件
	{
		Is Game In Progress == True;
		Is Assembling Heroes == False;
	}

	動作
	{
		Create HUD Text(All Players(All Teams), Null, Null, Custom String("Match Time - {0}:{1}", Round To Integer(Global.MatchTime / 60,
			Down), Round To Integer(Global.MatchTime % 60, Down)), Top, -10, Color(White), Color(White), Color(White),
			Visible To and String, Default Visibility);
		Set Match Time(3599);
		Wait(5, Ignore Condition);
		Pause Match Time;
	}
}

規則("Match Time Warning")
{
	事件
	{
		Ongoing - Global;
	}

	條件
	{
		"10 Min Warning"
		Global.MatchTime < 600;
	}

	動作
	{
		Big Message(All Players(All Teams), Custom String("10 Minute Warning"));
		Wait(300, Ignore Condition);
		Big Message(All Players(All Teams), Custom String("5 Minute Warning"));
		Wait(240, Ignore Condition);
		Big Message(All Players(All Teams), Custom String("1 Minute Warning"));
		Wait(60, Ignore Condition);
		Big Message(All Players(All Teams), Custom String("Match Time Is Up!"));
		Enable Built-In Game Mode Completion;
		Enable Game Mode In-World UI(All Players(All Teams));
		Enable Game Mode HUD(All Players(All Teams));
		Set Match Time(0);
		Wait(0.250, Ignore Condition);
		Unpause Match Time;
	}
}

規則("Match Time")
{
	事件
	{
		Ongoing - Global;
	}

	動作
	{
		Wait(0.998, Ignore Condition);
		Global.MatchTime -= 1;
		If(Global.MatchTime <= 0);
			Abort;
		End;
		Loop;
	}
}

規則("Skip Assembling Heroes")
{
	事件
	{
		Ongoing - Global;
	}

	條件
	{
		Is Assembling Heroes == True;
	}

	動作
	{
		Set Match Time(1);
	}
}

規則("Anti Crash Activation")
{
	事件
	{
		Ongoing - Global;
	}

	條件
	{
		Global.AntiCrash == False;
		Server Load > 200;
	}

	動作
	{
		Wait(1, Abort When False);
		Small Message(All Players(All Teams), Custom String("Anti crash system activated"));
		Set Slow Motion(10);
		Global.AntiCrash = True;
	}
}

規則("Anti Crash Deactivation")
{
	事件
	{
		Ongoing - Global;
	}

	條件
	{
		Global.AntiCrash == True;
		Server Load < 175;
	}

	動作
	{
		Set Slow Motion(100);
		Global.AntiCrash = False;
	}
}

規則("===== Extra things =====")
{
	事件
	{
		Ongoing - Global;
	}
}

規則("SymmetraPads")
{
	事件
	{
		Ongoing - Each Player;
		All;
		All;
	}

	條件
	{
		Hero Of(Event Player) == Hero(辛梅塔);
		Is Using Ability 1(Event Player) == True;
	}

	動作
	{
		Set Ability 1 Enabled(Event Player, False);
		Wait(0.240, Ignore Condition);
		Event Player.Impact = Ray Cast Hit Position(Eye Position(Event Player), Eye Position(Event Player) + Facing Direction Of(
			Event Player) * 100, Null, All Players(All Teams), False) - Facing Direction Of(Event Player) * 1;
		Wait(0.035 * Distance Between(Eye Position(Event Player), Event Player.Impact), Ignore Condition);
		Event Player.SymmetraPads[2] = Event Player.SymmetraPads[1];
		Event Player.SymmetraPads[1] = Event Player.SymmetraPads[0];
		Event Player.SymmetraPads[0] = Event Player.Impact;
		Wait(0.250, Ignore Condition);
		If(Hero Of(Event Player) == Hero(辛梅塔));
			Set Ability 1 Enabled(Event Player, True);
		End;
	}
}

規則("SymmetraPads Interraction")
{
	事件
	{
		Ongoing - Each Player;
		All;
		All;
	}

	條件
	{
		停用 Is True For Any(Event Player.SymmetraPads, Current Array Element != Null && Distance Between(Position Of(Event Player),
			Current Array Element) <= 1.500) == True;
		Hero Of(Event Player) == Hero(辛梅塔);
	}

	動作
	{
		If(Is True For Any(Event Player.SymmetraPads, Current Array Element != Null && Distance Between(Position Of(Event Player),
			Current Array Element) <= 1.500));
			Apply Impulse(Event Player, Vector(0, 1, 0), 15, To World, Cancel Contrary Motion);
		End;
		Wait(0.100, Ignore Condition);
		Loop If Condition Is True;
	}
}

規則("Orb Clip 1")
{
	事件
	{
		Ongoing - Each Player;
		All;
		All;
	}

	條件
	{
		Distance Between(Event Player, Vector(-42.720, 9.020, -63.430)) < 2;
	}

	動作
	{
		Disable Movement Collision With Environment(Event Player, False);
		Wait(0.100, Ignore Condition);
		Enable Movement Collision With Environment(Event Player);
		Loop If Condition Is True;
	}
}

規則("Orb Clip 2")
{
	事件
	{
		Ongoing - Each Player;
		All;
		All;
	}

	條件
	{
		Distance Between(Event Player, Vector(34.150, 15.250, -59.240)) < 1.500;
	}

	動作
	{
		Disable Movement Collision With Environment(Event Player, True);
		Wait(0.100, Ignore Condition);
		Enable Movement Collision With Environment(Event Player);
		Loop If Condition Is True;
	}
}

規則("Sphere for clip")
{
	事件
	{
		Ongoing - Global;
	}

	動作
	{
		Create Effect(All Players(All Teams), Sphere, Color(Gray), Vector(-42.720, 9.020, -63.430), 2, Visible To Position and Radius);
		Create Effect(All Players(All Teams), Sphere, Color(Gray), Vector(34.150, 15.250, -59.240), 1.500, Visible To Position and Radius);
	}
}

規則("Roof of don")
{
	事件
	{
		Ongoing - Each Player;
		All;
		All;
	}

	條件
	{
		Distance Between(Event Player, Vector(33.240, 43.500, -57.440)) < 25.600;
	}

	動作
	{
		Disable Movement Collision With Environment(Event Player, True);
		Wait(0.100, Ignore Condition);
		Enable Movement Collision With Environment(Event Player);
		Loop If Condition Is True;
	}
}

規則("Open the Helipad")
{
	事件
	{
		Ongoing - Each Player;
		All;
		All;
	}

	條件
	{
		Distance Between(Event Player, Vector(186.010, 26.350, -46.770)) < 14;
		Event Player.Victory == True;
	}

	動作
	{
		Disable Movement Collision With Environment(Event Player, False);
		Wait(0.100, Ignore Condition);
		Enable Movement Collision With Environment(Event Player);
		Loop If Condition Is True;
	}
}

規則("Mei Cyro")
{
	事件
	{
		Ongoing - Each Player;
		All;
		小美;
	}

	條件
	{
		Is Using Ability 1(Event Player) == True;
	}

	動作
	{
		Wait(3, Abort When False);
		Press Button(Event Player, Button(Primary Fire));
	}
}

規則("Navigation")
{
	事件
	{
		Ongoing - Global;
	}

	動作
	{
		Create In-World Text(All Players(All Teams), Custom String("<= Zone ||| {0} =>", Hero Icon String(Hero(艾西))), Vector(-85.900,
			7.200, -40.520), 2.500, Clip Against Surfaces, Visible To Position and String, Color(Rose), Default Visibility);
	}
}

規則("Cyro CD")
{
	事件
	{
		Ongoing - Each Player;
		All;
		小美;
	}

	條件
	{
		Ability Cooldown(Event Player, Button(Ability 1)) != 0;
		Ability Cooldown(Event Player, Button(Ability 1)) != 1;
		Ability Cooldown(Event Player, Button(Ability 1)) != 2;
		Ability Cooldown(Event Player, Button(Ability 1)) != 3;
	}

	動作
	{
		Set Ability Cooldown(Event Player, Button(Ability 1), 3);
	}
}

規則("Prevention")
{
	事件
	{
		Ongoing - Each Player;
		All;
		All;
	}

	條件
	{
		(Distance Between(Event Player, Vector(52.310, 7.420, -102.900)) < 5 || Distance Between(Event Player, Vector(59.790, 11, -68.840))
			< 11.100) == True;
		Hero Of(Event Player) != Hero(辛梅塔);
		Hero Of(Event Player) != Hero(托比昂);
		Event Player.Victory != True;
	}

	動作
	{
		Small Message(Event Player, Custom String("Only {0} can go in here", Hero Icon String(Hero(辛梅塔))));
		Kill(Event Player, Null);
	}
}